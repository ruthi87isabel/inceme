'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.17929
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CMTORREVIEJA")>  _
Partial Public Class ClasesOdontogramaDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertmd_ConceptoFra(instance As md_ConceptoFra)
    End Sub
  Partial Private Sub Updatemd_ConceptoFra(instance As md_ConceptoFra)
    End Sub
  Partial Private Sub Deletemd_ConceptoFra(instance As md_ConceptoFra)
    End Sub
  Partial Private Sub Insertmd_d_Accion(instance As md_d_Accion)
    End Sub
  Partial Private Sub Updatemd_d_Accion(instance As md_d_Accion)
    End Sub
  Partial Private Sub Deletemd_d_Accion(instance As md_d_Accion)
    End Sub
  Partial Private Sub Insertmd_d_Odontograma(instance As md_d_Odontograma)
    End Sub
  Partial Private Sub Updatemd_d_Odontograma(instance As md_d_Odontograma)
    End Sub
  Partial Private Sub Deletemd_d_Odontograma(instance As md_d_Odontograma)
    End Sub
  Partial Private Sub Insertmd_d_Color(instance As md_d_Color)
    End Sub
  Partial Private Sub Updatemd_d_Color(instance As md_d_Color)
    End Sub
  Partial Private Sub Deletemd_d_Color(instance As md_d_Color)
    End Sub
  Partial Private Sub Insertmd_d_ConceptoFra_Imagen(instance As md_d_ConceptoFra_Imagen)
    End Sub
  Partial Private Sub Updatemd_d_ConceptoFra_Imagen(instance As md_d_ConceptoFra_Imagen)
    End Sub
  Partial Private Sub Deletemd_d_ConceptoFra_Imagen(instance As md_d_ConceptoFra_Imagen)
    End Sub
  Partial Private Sub Insertmd_d_Imagen(instance As md_d_Imagen)
    End Sub
  Partial Private Sub Updatemd_d_Imagen(instance As md_d_Imagen)
    End Sub
  Partial Private Sub Deletemd_d_Imagen(instance As md_d_Imagen)
    End Sub
  Partial Private Sub Insertmd_d_Presupuesto(instance As md_d_Presupuesto)
    End Sub
  Partial Private Sub Updatemd_d_Presupuesto(instance As md_d_Presupuesto)
    End Sub
  Partial Private Sub Deletemd_d_Presupuesto(instance As md_d_Presupuesto)
    End Sub
  Partial Private Sub Insertmd_ConceptoFamilia(instance As md_ConceptoFamilia)
    End Sub
  Partial Private Sub Updatemd_ConceptoFamilia(instance As md_ConceptoFamilia)
    End Sub
  Partial Private Sub Deletemd_ConceptoFamilia(instance As md_ConceptoFamilia)
    End Sub
  Partial Private Sub Insertmd_MEDICO(instance As md_MEDICO)
    End Sub
  Partial Private Sub Updatemd_MEDICO(instance As md_MEDICO)
    End Sub
  Partial Private Sub Deletemd_MEDICO(instance As md_MEDICO)
    End Sub
  Partial Private Sub Insertmd_d_PresupuestoLinea(instance As md_d_PresupuestoLinea)
    End Sub
  Partial Private Sub Updatemd_d_PresupuestoLinea(instance As md_d_PresupuestoLinea)
    End Sub
  Partial Private Sub Deletemd_d_PresupuestoLinea(instance As md_d_PresupuestoLinea)
    End Sub
  Partial Private Sub Insertmd_MUTUA(instance As md_MUTUA)
    End Sub
  Partial Private Sub Updatemd_MUTUA(instance As md_MUTUA)
    End Sub
  Partial Private Sub Deletemd_MUTUA(instance As md_MUTUA)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.centro_medico.My.MySettings.Default.CMConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property md_ConceptoFras() As System.Data.Linq.Table(Of md_ConceptoFra)
		Get
			Return Me.GetTable(Of md_ConceptoFra)
		End Get
	End Property
	
	Public ReadOnly Property md_d_Accions() As System.Data.Linq.Table(Of md_d_Accion)
		Get
			Return Me.GetTable(Of md_d_Accion)
		End Get
	End Property
	
	Public ReadOnly Property md_d_Odontogramas() As System.Data.Linq.Table(Of md_d_Odontograma)
		Get
			Return Me.GetTable(Of md_d_Odontograma)
		End Get
	End Property
	
	Public ReadOnly Property md_d_Colors() As System.Data.Linq.Table(Of md_d_Color)
		Get
			Return Me.GetTable(Of md_d_Color)
		End Get
	End Property
	
	Public ReadOnly Property md_d_ConceptoFra_Imagens() As System.Data.Linq.Table(Of md_d_ConceptoFra_Imagen)
		Get
			Return Me.GetTable(Of md_d_ConceptoFra_Imagen)
		End Get
	End Property
	
	Public ReadOnly Property md_d_Imagens() As System.Data.Linq.Table(Of md_d_Imagen)
		Get
			Return Me.GetTable(Of md_d_Imagen)
		End Get
	End Property
	
	Public ReadOnly Property md_d_Presupuestos() As System.Data.Linq.Table(Of md_d_Presupuesto)
		Get
			Return Me.GetTable(Of md_d_Presupuesto)
		End Get
	End Property
	
	Public ReadOnly Property md_ConceptoFamilias() As System.Data.Linq.Table(Of md_ConceptoFamilia)
		Get
			Return Me.GetTable(Of md_ConceptoFamilia)
		End Get
	End Property
	
	Public ReadOnly Property md_MEDICOs() As System.Data.Linq.Table(Of md_MEDICO)
		Get
			Return Me.GetTable(Of md_MEDICO)
		End Get
	End Property
	
	Public ReadOnly Property md_d_PresupuestoLineas() As System.Data.Linq.Table(Of md_d_PresupuestoLinea)
		Get
			Return Me.GetTable(Of md_d_PresupuestoLinea)
		End Get
	End Property
	
	Public ReadOnly Property md_MUTUAs() As System.Data.Linq.Table(Of md_MUTUA)
		Get
			Return Me.GetTable(Of md_MUTUA)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CONCEPTOSFRA")>  _
Partial Public Class md_ConceptoFra
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As String
	
	Private _DESCRIPCION As String
	
	Private _IMPORTE As Single
	
	Private _Duracion As System.Nullable(Of Date)
	
	Private _IDFAMILIA As System.Nullable(Of Integer)
	
	Private _XMLCont As System.Data.Linq.Link(Of String)
	
	Private _d_Accions As EntitySet(Of md_d_Accion)
	
	Private _d_ConceptoFra_Imagens As EntitySet(Of md_d_ConceptoFra_Imagen)
	
	Private _md_d_PresupuestoLineas As EntitySet(Of md_d_PresupuestoLinea)
	
	Private _ConceptoFamilia As EntityRef(Of md_ConceptoFamilia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As String)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnIMPORTEChanging(value As Single)
    End Sub
    Partial Private Sub OnIMPORTEChanged()
    End Sub
    Partial Private Sub OnDuracionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDuracionChanged()
    End Sub
    Partial Private Sub OnIDFAMILIAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDFAMILIAChanged()
    End Sub
    Partial Private Sub OnXMLContChanging(value As String)
    End Sub
    Partial Private Sub OnXMLContChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._d_Accions = New EntitySet(Of md_d_Accion)(AddressOf Me.attach_d_Accions, AddressOf Me.detach_d_Accions)
		Me._d_ConceptoFra_Imagens = New EntitySet(Of md_d_ConceptoFra_Imagen)(AddressOf Me.attach_d_ConceptoFra_Imagens, AddressOf Me.detach_d_ConceptoFra_Imagens)
		Me._md_d_PresupuestoLineas = New EntitySet(Of md_d_PresupuestoLinea)(AddressOf Me.attach_md_d_PresupuestoLineas, AddressOf Me.detach_md_d_PresupuestoLineas)
		Me._ConceptoFamilia = CType(Nothing, EntityRef(Of md_ConceptoFamilia))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODIGO() As String
		Get
			Return Me._CODIGO
		End Get
		Set
			If (String.Equals(Me._CODIGO, value) = false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMPORTE", DbType:="Real NOT NULL")>  _
	Public Property IMPORTE() As Single
		Get
			Return Me._IMPORTE
		End Get
		Set
			If ((Me._IMPORTE = value)  _
						= false) Then
				Me.OnIMPORTEChanging(value)
				Me.SendPropertyChanging
				Me._IMPORTE = value
				Me.SendPropertyChanged("IMPORTE")
				Me.OnIMPORTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duracion", DbType:="DateTime")>  _
	Public Property Duracion() As System.Nullable(Of Date)
		Get
			Return Me._Duracion
		End Get
		Set
			If (Me._Duracion.Equals(value) = false) Then
				Me.OnDuracionChanging(value)
				Me.SendPropertyChanging
				Me._Duracion = value
				Me.SendPropertyChanged("Duracion")
				Me.OnDuracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDFAMILIA", DbType:="Int")>  _
	Public Property IDFAMILIA() As System.Nullable(Of Integer)
		Get
			Return Me._IDFAMILIA
		End Get
		Set
			If (Me._IDFAMILIA.Equals(value) = false) Then
				If Me._ConceptoFamilia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDFAMILIAChanging(value)
				Me.SendPropertyChanging
				Me._IDFAMILIA = value
				Me.SendPropertyChanged("IDFAMILIA")
				Me.OnIDFAMILIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XMLCont", DbType:="NVarChar(MAX)")>  _
	Public Property XMLCont() As String
		Get
			Return Me._XMLCont.Value
		End Get
		Set
			If (String.Equals(Me._XMLCont.Value, value) = false) Then
				Me.OnXMLContChanging(value)
				Me.SendPropertyChanging
				Me._XMLCont.Value = value
				Me.SendPropertyChanged("XMLCont")
				Me.OnXMLContChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_ConceptoFra_md_d_Accion", Storage:="_d_Accions", ThisKey:="CODIGO", OtherKey:="IDTratamiento")>  _
	Public Property md_d_Accions() As EntitySet(Of md_d_Accion)
		Get
			Return Me._d_Accions
		End Get
		Set
			Me._d_Accions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_ConceptoFra_md_d_ConceptoFra_Imagen", Storage:="_d_ConceptoFra_Imagens", ThisKey:="CODIGO", OtherKey:="CodigoCfra")>  _
	Public Property md_d_ConceptoFra_Imagens() As EntitySet(Of md_d_ConceptoFra_Imagen)
		Get
			Return Me._d_ConceptoFra_Imagens
		End Get
		Set
			Me._d_ConceptoFra_Imagens.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_ConceptoFra_md_d_PresupuestoLinea", Storage:="_md_d_PresupuestoLineas", ThisKey:="CODIGO", OtherKey:="IDTratamiento")>  _
	Public Property md_d_PresupuestoLineas() As EntitySet(Of md_d_PresupuestoLinea)
		Get
			Return Me._md_d_PresupuestoLineas
		End Get
		Set
			Me._md_d_PresupuestoLineas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_ConceptoFamilia_md_ConceptoFra", Storage:="_ConceptoFamilia", ThisKey:="IDFAMILIA", OtherKey:="IDFamilia", IsForeignKey:=true)>  _
	Public Property md_ConceptoFamilia() As md_ConceptoFamilia
		Get
			Return Me._ConceptoFamilia.Entity
		End Get
		Set
			Dim previousValue As md_ConceptoFamilia = Me._ConceptoFamilia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ConceptoFamilia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ConceptoFamilia.Entity = Nothing
					previousValue.md_ConceptoFras.Remove(Me)
				End If
				Me._ConceptoFamilia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.md_ConceptoFras.Add(Me)
					Me._IDFAMILIA = value.IDFamilia
				Else
					Me._IDFAMILIA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("md_ConceptoFamilia")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_d_Accions(ByVal entity As md_d_Accion)
		Me.SendPropertyChanging
		entity.md_ConceptoFra = Me
	End Sub
	
	Private Sub detach_d_Accions(ByVal entity As md_d_Accion)
		Me.SendPropertyChanging
		entity.md_ConceptoFra = Nothing
	End Sub
	
	Private Sub attach_d_ConceptoFra_Imagens(ByVal entity As md_d_ConceptoFra_Imagen)
		Me.SendPropertyChanging
		entity.md_ConceptoFra = Me
	End Sub
	
	Private Sub detach_d_ConceptoFra_Imagens(ByVal entity As md_d_ConceptoFra_Imagen)
		Me.SendPropertyChanging
		entity.md_ConceptoFra = Nothing
	End Sub
	
	Private Sub attach_md_d_PresupuestoLineas(ByVal entity As md_d_PresupuestoLinea)
		Me.SendPropertyChanging
		entity.md_ConceptoFra = Me
	End Sub
	
	Private Sub detach_md_d_PresupuestoLineas(ByVal entity As md_d_PresupuestoLinea)
		Me.SendPropertyChanging
		entity.md_ConceptoFra = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.d_Acciones")>  _
Partial Public Class md_d_Accion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDAccion As Long
	
	Private _IDOdontograma As System.Nullable(Of Integer)
	
	Private _FechaEjecucion As System.Nullable(Of Date)
	
	Private _IDMedico As System.Nullable(Of Integer)
	
	Private _DescripcionGenerada As String
	
	Private _IDGabinete As System.Nullable(Of Integer)
	
	Private _IDTratamiento As String
	
	Private _Cuadrantes As String
	
	Private _PiezasInvolucradas As String
	
	Private _Urgente As System.Nullable(Of Integer)
	
	Private _ConceptoFra As EntityRef(Of md_ConceptoFra)
	
	Private _d_Odontograma As EntityRef(Of md_d_Odontograma)
	
	Private _MEDICO As EntityRef(Of md_MEDICO)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDAccionChanging(value As Long)
    End Sub
    Partial Private Sub OnIDAccionChanged()
    End Sub
    Partial Private Sub OnIDOdontogramaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDOdontogramaChanged()
    End Sub
    Partial Private Sub OnFechaEjecucionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaEjecucionChanged()
    End Sub
    Partial Private Sub OnIDMedicoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDMedicoChanged()
    End Sub
    Partial Private Sub OnDescripcionGeneradaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionGeneradaChanged()
    End Sub
    Partial Private Sub OnIDGabineteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDGabineteChanged()
    End Sub
    Partial Private Sub OnIDTratamientoChanging(value As String)
    End Sub
    Partial Private Sub OnIDTratamientoChanged()
    End Sub
    Partial Private Sub OnCuadrantesChanging(value As String)
    End Sub
    Partial Private Sub OnCuadrantesChanged()
    End Sub
    Partial Private Sub OnPiezasInvolucradasChanging(value As String)
    End Sub
    Partial Private Sub OnPiezasInvolucradasChanged()
    End Sub
    Partial Private Sub OnUrgenteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUrgenteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ConceptoFra = CType(Nothing, EntityRef(Of md_ConceptoFra))
		Me._d_Odontograma = CType(Nothing, EntityRef(Of md_d_Odontograma))
		Me._MEDICO = CType(Nothing, EntityRef(Of md_MEDICO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDAccion", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDAccion() As Long
		Get
			Return Me._IDAccion
		End Get
		Set
			If ((Me._IDAccion = value)  _
						= false) Then
				Me.OnIDAccionChanging(value)
				Me.SendPropertyChanging
				Me._IDAccion = value
				Me.SendPropertyChanged("IDAccion")
				Me.OnIDAccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDOdontograma", DbType:="Int")>  _
	Public Property IDOdontograma() As System.Nullable(Of Integer)
		Get
			Return Me._IDOdontograma
		End Get
		Set
			If (Me._IDOdontograma.Equals(value) = false) Then
				If Me._d_Odontograma.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDOdontogramaChanging(value)
				Me.SendPropertyChanging
				Me._IDOdontograma = value
				Me.SendPropertyChanged("IDOdontograma")
				Me.OnIDOdontogramaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaEjecucion", DbType:="DateTime")>  _
	Public Property FechaEjecucion() As System.Nullable(Of Date)
		Get
			Return Me._FechaEjecucion
		End Get
		Set
			If (Me._FechaEjecucion.Equals(value) = false) Then
				Me.OnFechaEjecucionChanging(value)
				Me.SendPropertyChanging
				Me._FechaEjecucion = value
				Me.SendPropertyChanged("FechaEjecucion")
				Me.OnFechaEjecucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDMedico", DbType:="Int")>  _
	Public Property IDMedico() As System.Nullable(Of Integer)
		Get
			Return Me._IDMedico
		End Get
		Set
			If (Me._IDMedico.Equals(value) = false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDMedicoChanging(value)
				Me.SendPropertyChanging
				Me._IDMedico = value
				Me.SendPropertyChanged("IDMedico")
				Me.OnIDMedicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionGenerada", DbType:="NVarChar(250)")>  _
	Public Property DescripcionGenerada() As String
		Get
			Return Me._DescripcionGenerada
		End Get
		Set
			If (String.Equals(Me._DescripcionGenerada, value) = false) Then
				Me.OnDescripcionGeneradaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionGenerada = value
				Me.SendPropertyChanged("DescripcionGenerada")
				Me.OnDescripcionGeneradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDGabinete", DbType:="Int")>  _
	Public Property IDGabinete() As System.Nullable(Of Integer)
		Get
			Return Me._IDGabinete
		End Get
		Set
			If (Me._IDGabinete.Equals(value) = false) Then
				Me.OnIDGabineteChanging(value)
				Me.SendPropertyChanging
				Me._IDGabinete = value
				Me.SendPropertyChanged("IDGabinete")
				Me.OnIDGabineteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDTratamiento", DbType:="VarChar(10)")>  _
	Public Property IDTratamiento() As String
		Get
			Return Me._IDTratamiento
		End Get
		Set
			If (String.Equals(Me._IDTratamiento, value) = false) Then
				If Me._ConceptoFra.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDTratamientoChanging(value)
				Me.SendPropertyChanging
				Me._IDTratamiento = value
				Me.SendPropertyChanged("IDTratamiento")
				Me.OnIDTratamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cuadrantes", DbType:="NVarChar(50)")>  _
	Public Property Cuadrantes() As String
		Get
			Return Me._Cuadrantes
		End Get
		Set
			If (String.Equals(Me._Cuadrantes, value) = false) Then
				Me.OnCuadrantesChanging(value)
				Me.SendPropertyChanging
				Me._Cuadrantes = value
				Me.SendPropertyChanged("Cuadrantes")
				Me.OnCuadrantesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PiezasInvolucradas", DbType:="NVarChar(50)")>  _
	Public Property PiezasInvolucradas() As String
		Get
			Return Me._PiezasInvolucradas
		End Get
		Set
			If (String.Equals(Me._PiezasInvolucradas, value) = false) Then
				Me.OnPiezasInvolucradasChanging(value)
				Me.SendPropertyChanging
				Me._PiezasInvolucradas = value
				Me.SendPropertyChanged("PiezasInvolucradas")
				Me.OnPiezasInvolucradasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Urgente", DbType:="Int")>  _
	Public Property Urgente() As System.Nullable(Of Integer)
		Get
			Return Me._Urgente
		End Get
		Set
			If (Me._Urgente.Equals(value) = false) Then
				Me.OnUrgenteChanging(value)
				Me.SendPropertyChanging
				Me._Urgente = value
				Me.SendPropertyChanged("Urgente")
				Me.OnUrgenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_ConceptoFra_md_d_Accion", Storage:="_ConceptoFra", ThisKey:="IDTratamiento", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property md_ConceptoFra() As md_ConceptoFra
		Get
			Return Me._ConceptoFra.Entity
		End Get
		Set
			Dim previousValue As md_ConceptoFra = Me._ConceptoFra.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ConceptoFra.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ConceptoFra.Entity = Nothing
					previousValue.md_d_Accions.Remove(Me)
				End If
				Me._ConceptoFra.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.md_d_Accions.Add(Me)
					Me._IDTratamiento = value.CODIGO
				Else
					Me._IDTratamiento = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("md_ConceptoFra")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_d_Odontograma_md_d_Accion", Storage:="_d_Odontograma", ThisKey:="IDOdontograma", OtherKey:="IDOdontograma", IsForeignKey:=true)>  _
	Public Property md_d_Odontograma() As md_d_Odontograma
		Get
			Return Me._d_Odontograma.Entity
		End Get
		Set
			Dim previousValue As md_d_Odontograma = Me._d_Odontograma.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._d_Odontograma.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._d_Odontograma.Entity = Nothing
					previousValue.md_d_Accions.Remove(Me)
				End If
				Me._d_Odontograma.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.md_d_Accions.Add(Me)
					Me._IDOdontograma = value.IDOdontograma
				Else
					Me._IDOdontograma = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("md_d_Odontograma")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_MEDICO_md_d_Accion", Storage:="_MEDICO", ThisKey:="IDMedico", OtherKey:="CMEDICO", IsForeignKey:=true)>  _
	Public Property md_MEDICO() As md_MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As md_MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.md_d_Accions.Remove(Me)
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.md_d_Accions.Add(Me)
					Me._IDMedico = value.CMEDICO
				Else
					Me._IDMedico = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("md_MEDICO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.d_Odontogramas")>  _
Partial Public Class md_d_Odontograma
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDOdontograma As Integer
	
	Private _IDPaciente As System.Nullable(Of Integer)
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _TipoDenticion As System.Nullable(Of Integer)
	
	Private _d_Accions As EntitySet(Of md_d_Accion)
	
	Private _d_Presupuestos As EntitySet(Of md_d_Presupuesto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDOdontogramaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDOdontogramaChanged()
    End Sub
    Partial Private Sub OnIDPacienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDPacienteChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnTipoDenticionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTipoDenticionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._d_Accions = New EntitySet(Of md_d_Accion)(AddressOf Me.attach_d_Accions, AddressOf Me.detach_d_Accions)
		Me._d_Presupuestos = New EntitySet(Of md_d_Presupuesto)(AddressOf Me.attach_d_Presupuestos, AddressOf Me.detach_d_Presupuestos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDOdontograma", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDOdontograma() As Integer
		Get
			Return Me._IDOdontograma
		End Get
		Set
			If ((Me._IDOdontograma = value)  _
						= false) Then
				Me.OnIDOdontogramaChanging(value)
				Me.SendPropertyChanging
				Me._IDOdontograma = value
				Me.SendPropertyChanged("IDOdontograma")
				Me.OnIDOdontogramaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPaciente", DbType:="Int")>  _
	Public Property IDPaciente() As System.Nullable(Of Integer)
		Get
			Return Me._IDPaciente
		End Get
		Set
			If (Me._IDPaciente.Equals(value) = false) Then
				Me.OnIDPacienteChanging(value)
				Me.SendPropertyChanging
				Me._IDPaciente = value
				Me.SendPropertyChanged("IDPaciente")
				Me.OnIDPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="DateTime")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoDenticion", DbType:="Int")>  _
	Public Property TipoDenticion() As System.Nullable(Of Integer)
		Get
			Return Me._TipoDenticion
		End Get
		Set
			If (Me._TipoDenticion.Equals(value) = false) Then
				Me.OnTipoDenticionChanging(value)
				Me.SendPropertyChanging
				Me._TipoDenticion = value
				Me.SendPropertyChanged("TipoDenticion")
				Me.OnTipoDenticionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_d_Odontograma_md_d_Accion", Storage:="_d_Accions", ThisKey:="IDOdontograma", OtherKey:="IDOdontograma")>  _
	Public Property md_d_Accions() As EntitySet(Of md_d_Accion)
		Get
			Return Me._d_Accions
		End Get
		Set
			Me._d_Accions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_d_Odontograma_md_d_Presupuesto", Storage:="_d_Presupuestos", ThisKey:="IDOdontograma", OtherKey:="IDOdontograma")>  _
	Public Property md_d_Presupuestos() As EntitySet(Of md_d_Presupuesto)
		Get
			Return Me._d_Presupuestos
		End Get
		Set
			Me._d_Presupuestos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_d_Accions(ByVal entity As md_d_Accion)
		Me.SendPropertyChanging
		entity.md_d_Odontograma = Me
	End Sub
	
	Private Sub detach_d_Accions(ByVal entity As md_d_Accion)
		Me.SendPropertyChanging
		entity.md_d_Odontograma = Nothing
	End Sub
	
	Private Sub attach_d_Presupuestos(ByVal entity As md_d_Presupuesto)
		Me.SendPropertyChanging
		entity.md_d_Odontograma = Me
	End Sub
	
	Private Sub detach_d_Presupuestos(ByVal entity As md_d_Presupuesto)
		Me.SendPropertyChanging
		entity.md_d_Odontograma = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.d_Colores")>  _
Partial Public Class md_d_Color
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDColor As Integer
	
	Private _clPendiente As Integer
	
	Private _clPrimeravista As Integer
	
	Private _clPresupuesto As Integer
	
	Private _clRealizado As Integer
	
	Private _clUrgente As Integer
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDColorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDColorChanged()
    End Sub
    Partial Private Sub OnclPendienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnclPendienteChanged()
    End Sub
    Partial Private Sub OnclPrimeravistaChanging(value As Integer)
    End Sub
    Partial Private Sub OnclPrimeravistaChanged()
    End Sub
    Partial Private Sub OnclPresupuestoChanging(value As Integer)
    End Sub
    Partial Private Sub OnclPresupuestoChanged()
    End Sub
    Partial Private Sub OnclRealizadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnclRealizadoChanged()
    End Sub
    Partial Private Sub OnclUrgenteChanging(value As Integer)
    End Sub
    Partial Private Sub OnclUrgenteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDColor", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IDColor() As Integer
		Get
			Return Me._IDColor
		End Get
		Set
			If ((Me._IDColor = value)  _
						= false) Then
				Me.OnIDColorChanging(value)
				Me.SendPropertyChanging
				Me._IDColor = value
				Me.SendPropertyChanged("IDColor")
				Me.OnIDColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clPendiente", DbType:="Int NOT NULL")>  _
	Public Property clPendiente() As Integer
		Get
			Return Me._clPendiente
		End Get
		Set
			If ((Me._clPendiente = value)  _
						= false) Then
				Me.OnclPendienteChanging(value)
				Me.SendPropertyChanging
				Me._clPendiente = value
				Me.SendPropertyChanged("clPendiente")
				Me.OnclPendienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clPrimeravista", DbType:="Int NOT NULL")>  _
	Public Property clPrimeravista() As Integer
		Get
			Return Me._clPrimeravista
		End Get
		Set
			If ((Me._clPrimeravista = value)  _
						= false) Then
				Me.OnclPrimeravistaChanging(value)
				Me.SendPropertyChanging
				Me._clPrimeravista = value
				Me.SendPropertyChanged("clPrimeravista")
				Me.OnclPrimeravistaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clPresupuesto", DbType:="Int NOT NULL")>  _
	Public Property clPresupuesto() As Integer
		Get
			Return Me._clPresupuesto
		End Get
		Set
			If ((Me._clPresupuesto = value)  _
						= false) Then
				Me.OnclPresupuestoChanging(value)
				Me.SendPropertyChanging
				Me._clPresupuesto = value
				Me.SendPropertyChanged("clPresupuesto")
				Me.OnclPresupuestoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clRealizado", DbType:="Int NOT NULL")>  _
	Public Property clRealizado() As Integer
		Get
			Return Me._clRealizado
		End Get
		Set
			If ((Me._clRealizado = value)  _
						= false) Then
				Me.OnclRealizadoChanging(value)
				Me.SendPropertyChanging
				Me._clRealizado = value
				Me.SendPropertyChanged("clRealizado")
				Me.OnclRealizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clUrgente", DbType:="Int NOT NULL")>  _
	Public Property clUrgente() As Integer
		Get
			Return Me._clUrgente
		End Get
		Set
			If ((Me._clUrgente = value)  _
						= false) Then
				Me.OnclUrgenteChanging(value)
				Me.SendPropertyChanging
				Me._clUrgente = value
				Me.SendPropertyChanged("clUrgente")
				Me.OnclUrgenteChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.d_ConceptosFra_Imagenes")>  _
Partial Public Class md_d_ConceptoFra_Imagen
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CodigoCfra As String
	
	Private _Cuadrante As Char
	
	Private _IDImagen As Integer
	
	Private _Pintar As Boolean
	
	Private _ConceptoFra As EntityRef(Of md_ConceptoFra)
	
	Private _d_Imagen As EntityRef(Of md_d_Imagen)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodigoCfraChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoCfraChanged()
    End Sub
    Partial Private Sub OnCuadranteChanging(value As Char)
    End Sub
    Partial Private Sub OnCuadranteChanged()
    End Sub
    Partial Private Sub OnIDImagenChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDImagenChanged()
    End Sub
    Partial Private Sub OnPintarChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPintarChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ConceptoFra = CType(Nothing, EntityRef(Of md_ConceptoFra))
		Me._d_Imagen = CType(Nothing, EntityRef(Of md_d_Imagen))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoCfra", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CodigoCfra() As String
		Get
			Return Me._CodigoCfra
		End Get
		Set
			If (String.Equals(Me._CodigoCfra, value) = false) Then
				If Me._ConceptoFra.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCodigoCfraChanging(value)
				Me.SendPropertyChanging
				Me._CodigoCfra = value
				Me.SendPropertyChanged("CodigoCfra")
				Me.OnCodigoCfraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cuadrante", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Cuadrante() As Char
		Get
			Return Me._Cuadrante
		End Get
		Set
			If ((Me._Cuadrante = value)  _
						= false) Then
				Me.OnCuadranteChanging(value)
				Me.SendPropertyChanging
				Me._Cuadrante = value
				Me.SendPropertyChanged("Cuadrante")
				Me.OnCuadranteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDImagen", DbType:="Int NOT NULL")>  _
	Public Property IDImagen() As Integer
		Get
			Return Me._IDImagen
		End Get
		Set
			If ((Me._IDImagen = value)  _
						= false) Then
				If Me._d_Imagen.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDImagenChanging(value)
				Me.SendPropertyChanging
				Me._IDImagen = value
				Me.SendPropertyChanged("IDImagen")
				Me.OnIDImagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pintar", DbType:="Bit NOT NULL")>  _
	Public Property Pintar() As Boolean
		Get
			Return Me._Pintar
		End Get
		Set
			If ((Me._Pintar = value)  _
						= false) Then
				Me.OnPintarChanging(value)
				Me.SendPropertyChanging
				Me._Pintar = value
				Me.SendPropertyChanged("Pintar")
				Me.OnPintarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_ConceptoFra_md_d_ConceptoFra_Imagen", Storage:="_ConceptoFra", ThisKey:="CodigoCfra", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property md_ConceptoFra() As md_ConceptoFra
		Get
			Return Me._ConceptoFra.Entity
		End Get
		Set
			Dim previousValue As md_ConceptoFra = Me._ConceptoFra.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ConceptoFra.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ConceptoFra.Entity = Nothing
					previousValue.md_d_ConceptoFra_Imagens.Remove(Me)
				End If
				Me._ConceptoFra.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.md_d_ConceptoFra_Imagens.Add(Me)
					Me._CodigoCfra = value.CODIGO
				Else
					Me._CodigoCfra = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("md_ConceptoFra")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_d_Imagen_md_d_ConceptoFra_Imagen", Storage:="_d_Imagen", ThisKey:="IDImagen", OtherKey:="IDImagen", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property md_d_Imagen() As md_d_Imagen
		Get
			Return Me._d_Imagen.Entity
		End Get
		Set
			Dim previousValue As md_d_Imagen = Me._d_Imagen.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._d_Imagen.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._d_Imagen.Entity = Nothing
					previousValue.md_d_ConceptoFra_Imagens.Remove(Me)
				End If
				Me._d_Imagen.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.md_d_ConceptoFra_Imagens.Add(Me)
					Me._IDImagen = value.IDImagen
				Else
					Me._IDImagen = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("md_d_Imagen")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.d_Imagenes")>  _
Partial Public Class md_d_Imagen
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDImagen As Integer
	
	Private _Imagen As System.Data.Linq.Binary
	
	Private _Descripcion As String
	
	Private _Crdt As Date
	
	Private _d_ConceptoFra_Imagens As EntitySet(Of md_d_ConceptoFra_Imagen)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDImagenChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDImagenChanged()
    End Sub
    Partial Private Sub OnImagenChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImagenChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnCrdtChanging(value As Date)
    End Sub
    Partial Private Sub OnCrdtChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._d_ConceptoFra_Imagens = New EntitySet(Of md_d_ConceptoFra_Imagen)(AddressOf Me.attach_d_ConceptoFra_Imagens, AddressOf Me.detach_d_ConceptoFra_Imagens)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDImagen", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDImagen() As Integer
		Get
			Return Me._IDImagen
		End Get
		Set
			If ((Me._IDImagen = value)  _
						= false) Then
				Me.OnIDImagenChanging(value)
				Me.SendPropertyChanging
				Me._IDImagen = value
				Me.SendPropertyChanged("IDImagen")
				Me.OnIDImagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Imagen", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Imagen() As System.Data.Linq.Binary
		Get
			Return Me._Imagen
		End Get
		Set
			If (Object.Equals(Me._Imagen, value) = false) Then
				Me.OnImagenChanging(value)
				Me.SendPropertyChanging
				Me._Imagen = value
				Me.SendPropertyChanged("Imagen")
				Me.OnImagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Crdt", DbType:="DateTime NOT NULL")>  _
	Public Property Crdt() As Date
		Get
			Return Me._Crdt
		End Get
		Set
			If ((Me._Crdt = value)  _
						= false) Then
				Me.OnCrdtChanging(value)
				Me.SendPropertyChanging
				Me._Crdt = value
				Me.SendPropertyChanged("Crdt")
				Me.OnCrdtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_d_Imagen_md_d_ConceptoFra_Imagen", Storage:="_d_ConceptoFra_Imagens", ThisKey:="IDImagen", OtherKey:="IDImagen")>  _
	Public Property md_d_ConceptoFra_Imagens() As EntitySet(Of md_d_ConceptoFra_Imagen)
		Get
			Return Me._d_ConceptoFra_Imagens
		End Get
		Set
			Me._d_ConceptoFra_Imagens.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_d_ConceptoFra_Imagens(ByVal entity As md_d_ConceptoFra_Imagen)
		Me.SendPropertyChanging
		entity.md_d_Imagen = Me
	End Sub
	
	Private Sub detach_d_ConceptoFra_Imagens(ByVal entity As md_d_ConceptoFra_Imagen)
		Me.SendPropertyChanging
		entity.md_d_Imagen = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.d_Presupuesto")>  _
Partial Public Class md_d_Presupuesto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDPresupuesto As Integer
	
	Private _IDOdontograma As Integer
	
	Private _FechaConcepcion As Date
	
	Private _IDMutua As System.Nullable(Of Integer)
	
	Private _md_d_PresupuestoLineas As EntitySet(Of md_d_PresupuestoLinea)
	
	Private _d_Odontograma As EntityRef(Of md_d_Odontograma)
	
	Private _md_MUTUA As EntityRef(Of md_MUTUA)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDPresupuestoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDPresupuestoChanged()
    End Sub
    Partial Private Sub OnIDOdontogramaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDOdontogramaChanged()
    End Sub
    Partial Private Sub OnFechaConcepcionChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaConcepcionChanged()
    End Sub
    Partial Private Sub OnIDMutuaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDMutuaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._md_d_PresupuestoLineas = New EntitySet(Of md_d_PresupuestoLinea)(AddressOf Me.attach_md_d_PresupuestoLineas, AddressOf Me.detach_md_d_PresupuestoLineas)
		Me._d_Odontograma = CType(Nothing, EntityRef(Of md_d_Odontograma))
		Me._md_MUTUA = CType(Nothing, EntityRef(Of md_MUTUA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPresupuesto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDPresupuesto() As Integer
		Get
			Return Me._IDPresupuesto
		End Get
		Set
			If ((Me._IDPresupuesto = value)  _
						= false) Then
				Me.OnIDPresupuestoChanging(value)
				Me.SendPropertyChanging
				Me._IDPresupuesto = value
				Me.SendPropertyChanged("IDPresupuesto")
				Me.OnIDPresupuestoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDOdontograma", DbType:="Int NOT NULL")>  _
	Public Property IDOdontograma() As Integer
		Get
			Return Me._IDOdontograma
		End Get
		Set
			If ((Me._IDOdontograma = value)  _
						= false) Then
				If Me._d_Odontograma.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDOdontogramaChanging(value)
				Me.SendPropertyChanging
				Me._IDOdontograma = value
				Me.SendPropertyChanged("IDOdontograma")
				Me.OnIDOdontogramaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaConcepcion", DbType:="DateTime NOT NULL")>  _
	Public Property FechaConcepcion() As Date
		Get
			Return Me._FechaConcepcion
		End Get
		Set
			If ((Me._FechaConcepcion = value)  _
						= false) Then
				Me.OnFechaConcepcionChanging(value)
				Me.SendPropertyChanging
				Me._FechaConcepcion = value
				Me.SendPropertyChanged("FechaConcepcion")
				Me.OnFechaConcepcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDMutua", DbType:="Int")>  _
	Public Property IDMutua() As System.Nullable(Of Integer)
		Get
			Return Me._IDMutua
		End Get
		Set
			If (Me._IDMutua.Equals(value) = false) Then
				If Me._md_MUTUA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDMutuaChanging(value)
				Me.SendPropertyChanging
				Me._IDMutua = value
				Me.SendPropertyChanged("IDMutua")
				Me.OnIDMutuaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_d_Presupuesto_md_d_PresupuestoLinea", Storage:="_md_d_PresupuestoLineas", ThisKey:="IDPresupuesto", OtherKey:="IDPresupuesto")>  _
	Public Property md_d_PresupuestoLineas() As EntitySet(Of md_d_PresupuestoLinea)
		Get
			Return Me._md_d_PresupuestoLineas
		End Get
		Set
			Me._md_d_PresupuestoLineas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_d_Odontograma_md_d_Presupuesto", Storage:="_d_Odontograma", ThisKey:="IDOdontograma", OtherKey:="IDOdontograma", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property md_d_Odontograma() As md_d_Odontograma
		Get
			Return Me._d_Odontograma.Entity
		End Get
		Set
			Dim previousValue As md_d_Odontograma = Me._d_Odontograma.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._d_Odontograma.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._d_Odontograma.Entity = Nothing
					previousValue.md_d_Presupuestos.Remove(Me)
				End If
				Me._d_Odontograma.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.md_d_Presupuestos.Add(Me)
					Me._IDOdontograma = value.IDOdontograma
				Else
					Me._IDOdontograma = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("md_d_Odontograma")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_MUTUA_md_d_Presupuesto", Storage:="_md_MUTUA", ThisKey:="IDMutua", OtherKey:="CMUTUA", IsForeignKey:=true)>  _
	Public Property md_MUTUA() As md_MUTUA
		Get
			Return Me._md_MUTUA.Entity
		End Get
		Set
			Dim previousValue As md_MUTUA = Me._md_MUTUA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._md_MUTUA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._md_MUTUA.Entity = Nothing
					previousValue.md_d_Presupuestos.Remove(Me)
				End If
				Me._md_MUTUA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.md_d_Presupuestos.Add(Me)
					Me._IDMutua = value.CMUTUA
				Else
					Me._IDMutua = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("md_MUTUA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_md_d_PresupuestoLineas(ByVal entity As md_d_PresupuestoLinea)
		Me.SendPropertyChanging
		entity.md_d_Presupuesto = Me
	End Sub
	
	Private Sub detach_md_d_PresupuestoLineas(ByVal entity As md_d_PresupuestoLinea)
		Me.SendPropertyChanging
		entity.md_d_Presupuesto = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CONCEPTOSFAMILIAS")>  _
Partial Public Class md_ConceptoFamilia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDFamilia As Integer
	
	Private _Descripcion As String
	
	Private _Categoria As System.Nullable(Of Integer)
	
	Private _IconoName As System.Data.Linq.Binary
	
	Private _Natural As Boolean
	
	Private _ConceptoFras As EntitySet(Of md_ConceptoFra)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDFamiliaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDFamiliaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnCategoriaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoriaChanged()
    End Sub
    Partial Private Sub OnIconoNameChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnIconoNameChanged()
    End Sub
    Partial Private Sub OnNaturalChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNaturalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ConceptoFras = New EntitySet(Of md_ConceptoFra)(AddressOf Me.attach_ConceptoFras, AddressOf Me.detach_ConceptoFras)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDFamilia", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IDFamilia() As Integer
		Get
			Return Me._IDFamilia
		End Get
		Set
			If ((Me._IDFamilia = value)  _
						= false) Then
				Me.OnIDFamiliaChanging(value)
				Me.SendPropertyChanging
				Me._IDFamilia = value
				Me.SendPropertyChanged("IDFamilia")
				Me.OnIDFamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Categoria", DbType:="Int")>  _
	Public Property Categoria() As System.Nullable(Of Integer)
		Get
			Return Me._Categoria
		End Get
		Set
			If (Me._Categoria.Equals(value) = false) Then
				Me.OnCategoriaChanging(value)
				Me.SendPropertyChanging
				Me._Categoria = value
				Me.SendPropertyChanged("Categoria")
				Me.OnCategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconoName", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IconoName() As System.Data.Linq.Binary
		Get
			Return Me._IconoName
		End Get
		Set
			If (Object.Equals(Me._IconoName, value) = false) Then
				Me.OnIconoNameChanging(value)
				Me.SendPropertyChanging
				Me._IconoName = value
				Me.SendPropertyChanged("IconoName")
				Me.OnIconoNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Natural]", Storage:="_Natural", DbType:="Bit NOT NULL")>  _
	Public Property Natural() As Boolean
		Get
			Return Me._Natural
		End Get
		Set
			If ((Me._Natural = value)  _
						= false) Then
				Me.OnNaturalChanging(value)
				Me.SendPropertyChanging
				Me._Natural = value
				Me.SendPropertyChanged("Natural")
				Me.OnNaturalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_ConceptoFamilia_md_ConceptoFra", Storage:="_ConceptoFras", ThisKey:="IDFamilia", OtherKey:="IDFAMILIA")>  _
	Public Property md_ConceptoFras() As EntitySet(Of md_ConceptoFra)
		Get
			Return Me._ConceptoFras
		End Get
		Set
			Me._ConceptoFras.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ConceptoFras(ByVal entity As md_ConceptoFra)
		Me.SendPropertyChanging
		entity.md_ConceptoFamilia = Me
	End Sub
	
	Private Sub detach_ConceptoFras(ByVal entity As md_ConceptoFra)
		Me.SendPropertyChanging
		entity.md_ConceptoFamilia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MEDICOS")>  _
Partial Public Class md_MEDICO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NOMBRE As String
	
	Private _APELLIDO1 As String
	
	Private _APELLIDO2 As String
	
	Private _CMEDICO As Integer
	
	Private _d_Accions As EntitySet(Of md_d_Accion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREChanged()
    End Sub
    Partial Private Sub OnAPELLIDO1Changing(value As String)
    End Sub
    Partial Private Sub OnAPELLIDO1Changed()
    End Sub
    Partial Private Sub OnAPELLIDO2Changing(value As String)
    End Sub
    Partial Private Sub OnAPELLIDO2Changed()
    End Sub
    Partial Private Sub OnCMEDICOChanging(value As Integer)
    End Sub
    Partial Private Sub OnCMEDICOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._d_Accions = New EntitySet(Of md_d_Accion)(AddressOf Me.attach_d_Accions, AddressOf Me.detach_d_Accions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", DbType:="VarChar(25)")>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me.OnNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRE = value
				Me.SendPropertyChanged("NOMBRE")
				Me.OnNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_APELLIDO1", DbType:="VarChar(15)")>  _
	Public Property APELLIDO1() As String
		Get
			Return Me._APELLIDO1
		End Get
		Set
			If (String.Equals(Me._APELLIDO1, value) = false) Then
				Me.OnAPELLIDO1Changing(value)
				Me.SendPropertyChanging
				Me._APELLIDO1 = value
				Me.SendPropertyChanged("APELLIDO1")
				Me.OnAPELLIDO1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_APELLIDO2", DbType:="VarChar(15)")>  _
	Public Property APELLIDO2() As String
		Get
			Return Me._APELLIDO2
		End Get
		Set
			If (String.Equals(Me._APELLIDO2, value) = false) Then
				Me.OnAPELLIDO2Changing(value)
				Me.SendPropertyChanging
				Me._APELLIDO2 = value
				Me.SendPropertyChanged("APELLIDO2")
				Me.OnAPELLIDO2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMEDICO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CMEDICO() As Integer
		Get
			Return Me._CMEDICO
		End Get
		Set
			If ((Me._CMEDICO = value)  _
						= false) Then
				Me.OnCMEDICOChanging(value)
				Me.SendPropertyChanging
				Me._CMEDICO = value
				Me.SendPropertyChanged("CMEDICO")
				Me.OnCMEDICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_MEDICO_md_d_Accion", Storage:="_d_Accions", ThisKey:="CMEDICO", OtherKey:="IDMedico")>  _
	Public Property md_d_Accions() As EntitySet(Of md_d_Accion)
		Get
			Return Me._d_Accions
		End Get
		Set
			Me._d_Accions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_d_Accions(ByVal entity As md_d_Accion)
		Me.SendPropertyChanging
		entity.md_MEDICO = Me
	End Sub
	
	Private Sub detach_d_Accions(ByVal entity As md_d_Accion)
		Me.SendPropertyChanging
		entity.md_MEDICO = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.d_PresupuestoLineas")>  _
Partial Public Class md_d_PresupuestoLinea
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDPresupuestoLinea As Long
	
	Private _IDPresupuesto As Integer
	
	Private _DescripcionGenerada As String
	
	Private _IDTratamiento As String
	
	Private _Cuadrantes As String
	
	Private _PiezasInvolucradas As String
	
	Private _Confirmado As Boolean
	
	Private _Realizado As Boolean
	
	Private _Urgencia As Integer
	
	Private _FechaConfirmado As System.Nullable(Of Date)
	
	Private _FechaRealizado As System.Nullable(Of Date)
	
	Private _Importe As Decimal
	
	Private _IDCITA As System.Nullable(Of Integer)
	
	Private _DescuentoPercent As System.Nullable(Of Double)
	
	Private _IDAccionOrigen As System.Nullable(Of Integer)
	
	Private _md_ConceptoFra As EntityRef(Of md_ConceptoFra)
	
	Private _md_d_Presupuesto As EntityRef(Of md_d_Presupuesto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDPresupuestoLineaChanging(value As Long)
    End Sub
    Partial Private Sub OnIDPresupuestoLineaChanged()
    End Sub
    Partial Private Sub OnIDPresupuestoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDPresupuestoChanged()
    End Sub
    Partial Private Sub OnDescripcionGeneradaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionGeneradaChanged()
    End Sub
    Partial Private Sub OnIDTratamientoChanging(value As String)
    End Sub
    Partial Private Sub OnIDTratamientoChanged()
    End Sub
    Partial Private Sub OnCuadrantesChanging(value As String)
    End Sub
    Partial Private Sub OnCuadrantesChanged()
    End Sub
    Partial Private Sub OnPiezasInvolucradasChanging(value As String)
    End Sub
    Partial Private Sub OnPiezasInvolucradasChanged()
    End Sub
    Partial Private Sub OnConfirmadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnConfirmadoChanged()
    End Sub
    Partial Private Sub OnRealizadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRealizadoChanged()
    End Sub
    Partial Private Sub OnUrgenciaChanging(value As Integer)
    End Sub
    Partial Private Sub OnUrgenciaChanged()
    End Sub
    Partial Private Sub OnFechaConfirmadoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaConfirmadoChanged()
    End Sub
    Partial Private Sub OnFechaRealizadoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaRealizadoChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As Decimal)
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    Partial Private Sub OnIDCITAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDCITAChanged()
    End Sub
    Partial Private Sub OnDescuentoPercentChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuentoPercentChanged()
    End Sub
    Partial Private Sub OnIDAccionOrigenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDAccionOrigenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._md_ConceptoFra = CType(Nothing, EntityRef(Of md_ConceptoFra))
		Me._md_d_Presupuesto = CType(Nothing, EntityRef(Of md_d_Presupuesto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPresupuestoLinea", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDPresupuestoLinea() As Long
		Get
			Return Me._IDPresupuestoLinea
		End Get
		Set
			If ((Me._IDPresupuestoLinea = value)  _
						= false) Then
				Me.OnIDPresupuestoLineaChanging(value)
				Me.SendPropertyChanging
				Me._IDPresupuestoLinea = value
				Me.SendPropertyChanged("IDPresupuestoLinea")
				Me.OnIDPresupuestoLineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPresupuesto", DbType:="Int NOT NULL")>  _
	Public Property IDPresupuesto() As Integer
		Get
			Return Me._IDPresupuesto
		End Get
		Set
			If ((Me._IDPresupuesto = value)  _
						= false) Then
				If Me._md_d_Presupuesto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDPresupuestoChanging(value)
				Me.SendPropertyChanging
				Me._IDPresupuesto = value
				Me.SendPropertyChanged("IDPresupuesto")
				Me.OnIDPresupuestoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionGenerada", DbType:="NVarChar(250)")>  _
	Public Property DescripcionGenerada() As String
		Get
			Return Me._DescripcionGenerada
		End Get
		Set
			If (String.Equals(Me._DescripcionGenerada, value) = false) Then
				Me.OnDescripcionGeneradaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionGenerada = value
				Me.SendPropertyChanged("DescripcionGenerada")
				Me.OnDescripcionGeneradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDTratamiento", DbType:="VarChar(10)")>  _
	Public Property IDTratamiento() As String
		Get
			Return Me._IDTratamiento
		End Get
		Set
			If (String.Equals(Me._IDTratamiento, value) = false) Then
				If Me._md_ConceptoFra.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDTratamientoChanging(value)
				Me.SendPropertyChanging
				Me._IDTratamiento = value
				Me.SendPropertyChanged("IDTratamiento")
				Me.OnIDTratamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cuadrantes", DbType:="NVarChar(50)")>  _
	Public Property Cuadrantes() As String
		Get
			Return Me._Cuadrantes
		End Get
		Set
			If (String.Equals(Me._Cuadrantes, value) = false) Then
				Me.OnCuadrantesChanging(value)
				Me.SendPropertyChanging
				Me._Cuadrantes = value
				Me.SendPropertyChanged("Cuadrantes")
				Me.OnCuadrantesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PiezasInvolucradas", DbType:="NVarChar(50)")>  _
	Public Property PiezasInvolucradas() As String
		Get
			Return Me._PiezasInvolucradas
		End Get
		Set
			If (String.Equals(Me._PiezasInvolucradas, value) = false) Then
				Me.OnPiezasInvolucradasChanging(value)
				Me.SendPropertyChanging
				Me._PiezasInvolucradas = value
				Me.SendPropertyChanged("PiezasInvolucradas")
				Me.OnPiezasInvolucradasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Confirmado", DbType:="Bit NOT NULL")>  _
	Public Property Confirmado() As Boolean
		Get
			Return Me._Confirmado
		End Get
		Set
			If ((Me._Confirmado = value)  _
						= false) Then
				Me.OnConfirmadoChanging(value)
				Me.SendPropertyChanging
				Me._Confirmado = value
				Me.SendPropertyChanged("Confirmado")
				Me.OnConfirmadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Realizado", DbType:="Bit NOT NULL")>  _
	Public Property Realizado() As Boolean
		Get
			Return Me._Realizado
		End Get
		Set
			If ((Me._Realizado = value)  _
						= false) Then
				Me.OnRealizadoChanging(value)
				Me.SendPropertyChanging
				Me._Realizado = value
				Me.SendPropertyChanged("Realizado")
				Me.OnRealizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Urgencia", DbType:="Int NOT NULL")>  _
	Public Property Urgencia() As Integer
		Get
			Return Me._Urgencia
		End Get
		Set
			If ((Me._Urgencia = value)  _
						= false) Then
				Me.OnUrgenciaChanging(value)
				Me.SendPropertyChanging
				Me._Urgencia = value
				Me.SendPropertyChanged("Urgencia")
				Me.OnUrgenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaConfirmado", DbType:="DateTime")>  _
	Public Property FechaConfirmado() As System.Nullable(Of Date)
		Get
			Return Me._FechaConfirmado
		End Get
		Set
			If (Me._FechaConfirmado.Equals(value) = false) Then
				Me.OnFechaConfirmadoChanging(value)
				Me.SendPropertyChanging
				Me._FechaConfirmado = value
				Me.SendPropertyChanged("FechaConfirmado")
				Me.OnFechaConfirmadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaRealizado", DbType:="DateTime")>  _
	Public Property FechaRealizado() As System.Nullable(Of Date)
		Get
			Return Me._FechaRealizado
		End Get
		Set
			If (Me._FechaRealizado.Equals(value) = false) Then
				Me.OnFechaRealizadoChanging(value)
				Me.SendPropertyChanging
				Me._FechaRealizado = value
				Me.SendPropertyChanged("FechaRealizado")
				Me.OnFechaRealizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Decimal(10,2) NOT NULL")>  _
	Public Property Importe() As Decimal
		Get
			Return Me._Importe
		End Get
		Set
			If ((Me._Importe = value)  _
						= false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDCITA", DbType:="Int")>  _
	Public Property IDCITA() As System.Nullable(Of Integer)
		Get
			Return Me._IDCITA
		End Get
		Set
			If (Me._IDCITA.Equals(value) = false) Then
				Me.OnIDCITAChanging(value)
				Me.SendPropertyChanging
				Me._IDCITA = value
				Me.SendPropertyChanged("IDCITA")
				Me.OnIDCITAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescuentoPercent", DbType:="Float")>  _
	Public Property DescuentoPercent() As System.Nullable(Of Double)
		Get
			Return Me._DescuentoPercent
		End Get
		Set
			If (Me._DescuentoPercent.Equals(value) = false) Then
				Me.OnDescuentoPercentChanging(value)
				Me.SendPropertyChanging
				Me._DescuentoPercent = value
				Me.SendPropertyChanged("DescuentoPercent")
				Me.OnDescuentoPercentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDAccionOrigen", DbType:="BigInt")>  _
	Public Property IDAccionOrigen() As System.Nullable(Of Integer)
		Get
			Return Me._IDAccionOrigen
		End Get
		Set
			If (Me._IDAccionOrigen.Equals(value) = false) Then
				Me.OnIDAccionOrigenChanging(value)
				Me.SendPropertyChanging
				Me._IDAccionOrigen = value
				Me.SendPropertyChanged("IDAccionOrigen")
				Me.OnIDAccionOrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_ConceptoFra_md_d_PresupuestoLinea", Storage:="_md_ConceptoFra", ThisKey:="IDTratamiento", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property md_ConceptoFra() As md_ConceptoFra
		Get
			Return Me._md_ConceptoFra.Entity
		End Get
		Set
			Dim previousValue As md_ConceptoFra = Me._md_ConceptoFra.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._md_ConceptoFra.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._md_ConceptoFra.Entity = Nothing
					previousValue.md_d_PresupuestoLineas.Remove(Me)
				End If
				Me._md_ConceptoFra.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.md_d_PresupuestoLineas.Add(Me)
					Me._IDTratamiento = value.CODIGO
				Else
					Me._IDTratamiento = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("md_ConceptoFra")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_d_Presupuesto_md_d_PresupuestoLinea", Storage:="_md_d_Presupuesto", ThisKey:="IDPresupuesto", OtherKey:="IDPresupuesto", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property md_d_Presupuesto() As md_d_Presupuesto
		Get
			Return Me._md_d_Presupuesto.Entity
		End Get
		Set
			Dim previousValue As md_d_Presupuesto = Me._md_d_Presupuesto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._md_d_Presupuesto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._md_d_Presupuesto.Entity = Nothing
					previousValue.md_d_PresupuestoLineas.Remove(Me)
				End If
				Me._md_d_Presupuesto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.md_d_PresupuestoLineas.Add(Me)
					Me._IDPresupuesto = value.IDPresupuesto
				Else
					Me._IDPresupuesto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("md_d_Presupuesto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MUTUAS")>  _
Partial Public Class md_MUTUA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NOMBRE As String
	
	Private _DIRECCION As String
	
	Private _POBLACION As String
	
	Private _PROVINCIA As String
	
	Private _CP As String
	
	Private _TLFNO1 As String
	
	Private _TLFNO2 As String
	
	Private _FAX As String
	
	Private _MAIL As String
	
	Private _WEB As String
	
	Private _PERSONACON As String
	
	Private _NOTAS As String
	
	Private _CMUTUA As Integer
	
	Private _CIF As String
	
	Private _ESPECIALIDAD As String
	
	Private _PARTELSR As String
	
	Private _PARTEMTR As String
	
	Private _IdTarifa As System.Nullable(Of Integer)
	
	Private _NoContrato As String
	
	Private _Logo As System.Data.Linq.Binary
	
	Private _md_d_Presupuestos As EntitySet(Of md_d_Presupuesto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREChanged()
    End Sub
    Partial Private Sub OnDIRECCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDIRECCIONChanged()
    End Sub
    Partial Private Sub OnPOBLACIONChanging(value As String)
    End Sub
    Partial Private Sub OnPOBLACIONChanged()
    End Sub
    Partial Private Sub OnPROVINCIAChanging(value As String)
    End Sub
    Partial Private Sub OnPROVINCIAChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnTLFNO1Changing(value As String)
    End Sub
    Partial Private Sub OnTLFNO1Changed()
    End Sub
    Partial Private Sub OnTLFNO2Changing(value As String)
    End Sub
    Partial Private Sub OnTLFNO2Changed()
    End Sub
    Partial Private Sub OnFAXChanging(value As String)
    End Sub
    Partial Private Sub OnFAXChanged()
    End Sub
    Partial Private Sub OnMAILChanging(value As String)
    End Sub
    Partial Private Sub OnMAILChanged()
    End Sub
    Partial Private Sub OnWEBChanging(value As String)
    End Sub
    Partial Private Sub OnWEBChanged()
    End Sub
    Partial Private Sub OnPERSONACONChanging(value As String)
    End Sub
    Partial Private Sub OnPERSONACONChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    Partial Private Sub OnCMUTUAChanging(value As Integer)
    End Sub
    Partial Private Sub OnCMUTUAChanged()
    End Sub
    Partial Private Sub OnCIFChanging(value As String)
    End Sub
    Partial Private Sub OnCIFChanged()
    End Sub
    Partial Private Sub OnESPECIALIDADChanging(value As String)
    End Sub
    Partial Private Sub OnESPECIALIDADChanged()
    End Sub
    Partial Private Sub OnPARTELSRChanging(value As String)
    End Sub
    Partial Private Sub OnPARTELSRChanged()
    End Sub
    Partial Private Sub OnPARTEMTRChanging(value As String)
    End Sub
    Partial Private Sub OnPARTEMTRChanged()
    End Sub
    Partial Private Sub OnIdTarifaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdTarifaChanged()
    End Sub
    Partial Private Sub OnNoContratoChanging(value As String)
    End Sub
    Partial Private Sub OnNoContratoChanged()
    End Sub
    Partial Private Sub OnLogoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnLogoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._md_d_Presupuestos = New EntitySet(Of md_d_Presupuesto)(AddressOf Me.attach_md_d_Presupuestos, AddressOf Me.detach_md_d_Presupuestos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", DbType:="VarChar(90)")>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me.OnNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRE = value
				Me.SendPropertyChanged("NOMBRE")
				Me.OnNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIRECCION", DbType:="VarChar(150)")>  _
	Public Property DIRECCION() As String
		Get
			Return Me._DIRECCION
		End Get
		Set
			If (String.Equals(Me._DIRECCION, value) = false) Then
				Me.OnDIRECCIONChanging(value)
				Me.SendPropertyChanging
				Me._DIRECCION = value
				Me.SendPropertyChanged("DIRECCION")
				Me.OnDIRECCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POBLACION", DbType:="VarChar(20)")>  _
	Public Property POBLACION() As String
		Get
			Return Me._POBLACION
		End Get
		Set
			If (String.Equals(Me._POBLACION, value) = false) Then
				Me.OnPOBLACIONChanging(value)
				Me.SendPropertyChanging
				Me._POBLACION = value
				Me.SendPropertyChanged("POBLACION")
				Me.OnPOBLACIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCIA", DbType:="VarChar(20)")>  _
	Public Property PROVINCIA() As String
		Get
			Return Me._PROVINCIA
		End Get
		Set
			If (String.Equals(Me._PROVINCIA, value) = false) Then
				Me.OnPROVINCIAChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCIA = value
				Me.SendPropertyChanged("PROVINCIA")
				Me.OnPROVINCIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="VarChar(5)")>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLFNO1", DbType:="VarChar(10)")>  _
	Public Property TLFNO1() As String
		Get
			Return Me._TLFNO1
		End Get
		Set
			If (String.Equals(Me._TLFNO1, value) = false) Then
				Me.OnTLFNO1Changing(value)
				Me.SendPropertyChanging
				Me._TLFNO1 = value
				Me.SendPropertyChanged("TLFNO1")
				Me.OnTLFNO1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLFNO2", DbType:="VarChar(10)")>  _
	Public Property TLFNO2() As String
		Get
			Return Me._TLFNO2
		End Get
		Set
			If (String.Equals(Me._TLFNO2, value) = false) Then
				Me.OnTLFNO2Changing(value)
				Me.SendPropertyChanging
				Me._TLFNO2 = value
				Me.SendPropertyChanged("TLFNO2")
				Me.OnTLFNO2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAX", DbType:="VarChar(10)")>  _
	Public Property FAX() As String
		Get
			Return Me._FAX
		End Get
		Set
			If (String.Equals(Me._FAX, value) = false) Then
				Me.OnFAXChanging(value)
				Me.SendPropertyChanging
				Me._FAX = value
				Me.SendPropertyChanged("FAX")
				Me.OnFAXChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAIL", DbType:="VarChar(40)")>  _
	Public Property MAIL() As String
		Get
			Return Me._MAIL
		End Get
		Set
			If (String.Equals(Me._MAIL, value) = false) Then
				Me.OnMAILChanging(value)
				Me.SendPropertyChanging
				Me._MAIL = value
				Me.SendPropertyChanged("MAIL")
				Me.OnMAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WEB", DbType:="VarChar(40)")>  _
	Public Property WEB() As String
		Get
			Return Me._WEB
		End Get
		Set
			If (String.Equals(Me._WEB, value) = false) Then
				Me.OnWEBChanging(value)
				Me.SendPropertyChanging
				Me._WEB = value
				Me.SendPropertyChanged("WEB")
				Me.OnWEBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERSONACON", DbType:="VarChar(40)")>  _
	Public Property PERSONACON() As String
		Get
			Return Me._PERSONACON
		End Get
		Set
			If (String.Equals(Me._PERSONACON, value) = false) Then
				Me.OnPERSONACONChanging(value)
				Me.SendPropertyChanging
				Me._PERSONACON = value
				Me.SendPropertyChanged("PERSONACON")
				Me.OnPERSONACONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="VarChar(8000)")>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMUTUA", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CMUTUA() As Integer
		Get
			Return Me._CMUTUA
		End Get
		Set
			If ((Me._CMUTUA = value)  _
						= false) Then
				Me.OnCMUTUAChanging(value)
				Me.SendPropertyChanging
				Me._CMUTUA = value
				Me.SendPropertyChanged("CMUTUA")
				Me.OnCMUTUAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIF", DbType:="VarChar(10)")>  _
	Public Property CIF() As String
		Get
			Return Me._CIF
		End Get
		Set
			If (String.Equals(Me._CIF, value) = false) Then
				Me.OnCIFChanging(value)
				Me.SendPropertyChanging
				Me._CIF = value
				Me.SendPropertyChanged("CIF")
				Me.OnCIFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ESPECIALIDAD", DbType:="VarChar(50)")>  _
	Public Property ESPECIALIDAD() As String
		Get
			Return Me._ESPECIALIDAD
		End Get
		Set
			If (String.Equals(Me._ESPECIALIDAD, value) = false) Then
				Me.OnESPECIALIDADChanging(value)
				Me.SendPropertyChanging
				Me._ESPECIALIDAD = value
				Me.SendPropertyChanged("ESPECIALIDAD")
				Me.OnESPECIALIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PARTELSR", DbType:="VarChar(30)")>  _
	Public Property PARTELSR() As String
		Get
			Return Me._PARTELSR
		End Get
		Set
			If (String.Equals(Me._PARTELSR, value) = false) Then
				Me.OnPARTELSRChanging(value)
				Me.SendPropertyChanging
				Me._PARTELSR = value
				Me.SendPropertyChanged("PARTELSR")
				Me.OnPARTELSRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PARTEMTR", DbType:="VarChar(30)")>  _
	Public Property PARTEMTR() As String
		Get
			Return Me._PARTEMTR
		End Get
		Set
			If (String.Equals(Me._PARTEMTR, value) = false) Then
				Me.OnPARTEMTRChanging(value)
				Me.SendPropertyChanging
				Me._PARTEMTR = value
				Me.SendPropertyChanged("PARTEMTR")
				Me.OnPARTEMTRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTarifa", DbType:="Int")>  _
	Public Property IdTarifa() As System.Nullable(Of Integer)
		Get
			Return Me._IdTarifa
		End Get
		Set
			If (Me._IdTarifa.Equals(value) = false) Then
				Me.OnIdTarifaChanging(value)
				Me.SendPropertyChanging
				Me._IdTarifa = value
				Me.SendPropertyChanged("IdTarifa")
				Me.OnIdTarifaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoContrato", DbType:="NVarChar(50)")>  _
	Public Property NoContrato() As String
		Get
			Return Me._NoContrato
		End Get
		Set
			If (String.Equals(Me._NoContrato, value) = false) Then
				Me.OnNoContratoChanging(value)
				Me.SendPropertyChanging
				Me._NoContrato = value
				Me.SendPropertyChanged("NoContrato")
				Me.OnNoContratoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Logo", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Logo() As System.Data.Linq.Binary
		Get
			Return Me._Logo
		End Get
		Set
			If (Object.Equals(Me._Logo, value) = false) Then
				Me.OnLogoChanging(value)
				Me.SendPropertyChanging
				Me._Logo = value
				Me.SendPropertyChanged("Logo")
				Me.OnLogoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="md_MUTUA_md_d_Presupuesto", Storage:="_md_d_Presupuestos", ThisKey:="CMUTUA", OtherKey:="IDMutua")>  _
	Public Property md_d_Presupuestos() As EntitySet(Of md_d_Presupuesto)
		Get
			Return Me._md_d_Presupuestos
		End Get
		Set
			Me._md_d_Presupuestos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_md_d_Presupuestos(ByVal entity As md_d_Presupuesto)
		Me.SendPropertyChanging
		entity.md_MUTUA = Me
	End Sub
	
	Private Sub detach_md_d_Presupuestos(ByVal entity As md_d_Presupuesto)
		Me.SendPropertyChanging
		entity.md_MUTUA = Nothing
	End Sub
End Class
