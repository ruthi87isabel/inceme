'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="siesta")>  _
Partial Public Class CMLinqDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertPACIENTE(instance As PACIENTE)
    End Sub
  Partial Private Sub UpdatePACIENTE(instance As PACIENTE)
    End Sub
  Partial Private Sub DeletePACIENTE(instance As PACIENTE)
    End Sub
  Partial Private Sub InsertFORMASPAGO(instance As FORMASPAGO)
    End Sub
  Partial Private Sub UpdateFORMASPAGO(instance As FORMASPAGO)
    End Sub
  Partial Private Sub DeleteFORMASPAGO(instance As FORMASPAGO)
    End Sub
  Partial Private Sub InsertEMPRESA(instance As EMPRESA)
    End Sub
  Partial Private Sub UpdateEMPRESA(instance As EMPRESA)
    End Sub
  Partial Private Sub DeleteEMPRESA(instance As EMPRESA)
    End Sub
  Partial Private Sub InsertFACTURA(instance As FACTURA)
    End Sub
  Partial Private Sub UpdateFACTURA(instance As FACTURA)
    End Sub
  Partial Private Sub DeleteFACTURA(instance As FACTURA)
    End Sub
  Partial Private Sub InsertContactosPaciente(instance As ContactosPaciente)
    End Sub
  Partial Private Sub UpdateContactosPaciente(instance As ContactosPaciente)
    End Sub
  Partial Private Sub DeleteContactosPaciente(instance As ContactosPaciente)
    End Sub
  Partial Private Sub InsertParentesco(instance As Parentesco)
    End Sub
  Partial Private Sub UpdateParentesco(instance As Parentesco)
    End Sub
  Partial Private Sub DeleteParentesco(instance As Parentesco)
    End Sub
  Partial Private Sub InsertAsociado(instance As Asociado)
    End Sub
  Partial Private Sub UpdateAsociado(instance As Asociado)
    End Sub
  Partial Private Sub DeleteAsociado(instance As Asociado)
    End Sub
  Partial Private Sub InsertBANCO(instance As BANCO)
    End Sub
  Partial Private Sub UpdateBANCO(instance As BANCO)
    End Sub
  Partial Private Sub DeleteBANCO(instance As BANCO)
    End Sub
  Partial Private Sub InsertN_Articulo(instance As N_Articulo)
    End Sub
  Partial Private Sub UpdateN_Articulo(instance As N_Articulo)
    End Sub
  Partial Private Sub DeleteN_Articulo(instance As N_Articulo)
    End Sub
  Partial Private Sub InsertPagosPaciente(instance As PagosPaciente)
    End Sub
  Partial Private Sub UpdatePagosPaciente(instance As PagosPaciente)
    End Sub
  Partial Private Sub DeletePagosPaciente(instance As PagosPaciente)
    End Sub
  Partial Private Sub InsertROLE(instance As ROLE)
    End Sub
  Partial Private Sub UpdateROLE(instance As ROLE)
    End Sub
  Partial Private Sub DeleteROLE(instance As ROLE)
    End Sub
  Partial Private Sub InsertROLESITEM(instance As ROLESITEM)
    End Sub
  Partial Private Sub UpdateROLESITEM(instance As ROLESITEM)
    End Sub
  Partial Private Sub DeleteROLESITEM(instance As ROLESITEM)
    End Sub
  Partial Private Sub InsertROLESUSUARIO(instance As ROLESUSUARIO)
    End Sub
  Partial Private Sub UpdateROLESUSUARIO(instance As ROLESUSUARIO)
    End Sub
  Partial Private Sub DeleteROLESUSUARIO(instance As ROLESUSUARIO)
    End Sub
  Partial Private Sub InsertROLESPERMISO(instance As ROLESPERMISO)
    End Sub
  Partial Private Sub UpdateROLESPERMISO(instance As ROLESPERMISO)
    End Sub
  Partial Private Sub DeleteROLESPERMISO(instance As ROLESPERMISO)
    End Sub
  Partial Private Sub InsertPERMISO(instance As PERMISO)
    End Sub
  Partial Private Sub UpdatePERMISO(instance As PERMISO)
    End Sub
  Partial Private Sub DeletePERMISO(instance As PERMISO)
    End Sub
  Partial Private Sub InsertReportesPersonalizado(instance As ReportesPersonalizado)
    End Sub
  Partial Private Sub UpdateReportesPersonalizado(instance As ReportesPersonalizado)
    End Sub
  Partial Private Sub DeleteReportesPersonalizado(instance As ReportesPersonalizado)
    End Sub
  Partial Private Sub InsertSERIES(instance As SERIES)
    End Sub
  Partial Private Sub UpdateSERIES(instance As SERIES)
    End Sub
  Partial Private Sub DeleteSERIES(instance As SERIES)
    End Sub
  Partial Private Sub Insertd_Accione(instance As d_Accione)
    End Sub
  Partial Private Sub Updated_Accione(instance As d_Accione)
    End Sub
  Partial Private Sub Deleted_Accione(instance As d_Accione)
    End Sub
  Partial Private Sub Insertd_Colore(instance As d_Colore)
    End Sub
  Partial Private Sub Updated_Colore(instance As d_Colore)
    End Sub
  Partial Private Sub Deleted_Colore(instance As d_Colore)
    End Sub
  Partial Private Sub Insertd_ConceptosFra_Imagene(instance As d_ConceptosFra_Imagene)
    End Sub
  Partial Private Sub Updated_ConceptosFra_Imagene(instance As d_ConceptosFra_Imagene)
    End Sub
  Partial Private Sub Deleted_ConceptosFra_Imagene(instance As d_ConceptosFra_Imagene)
    End Sub
  Partial Private Sub Insertd_Diente(instance As d_Diente)
    End Sub
  Partial Private Sub Updated_Diente(instance As d_Diente)
    End Sub
  Partial Private Sub Deleted_Diente(instance As d_Diente)
    End Sub
  Partial Private Sub Insertd_Imagene(instance As d_Imagene)
    End Sub
  Partial Private Sub Updated_Imagene(instance As d_Imagene)
    End Sub
  Partial Private Sub Deleted_Imagene(instance As d_Imagene)
    End Sub
  Partial Private Sub Insertd_Odontograma(instance As d_Odontograma)
    End Sub
  Partial Private Sub Updated_Odontograma(instance As d_Odontograma)
    End Sub
  Partial Private Sub Deleted_Odontograma(instance As d_Odontograma)
    End Sub
  Partial Private Sub Insertd_Presupuesto(instance As d_Presupuesto)
    End Sub
  Partial Private Sub Updated_Presupuesto(instance As d_Presupuesto)
    End Sub
  Partial Private Sub Deleted_Presupuesto(instance As d_Presupuesto)
    End Sub
  Partial Private Sub InsertFICHEROSGLOBAL(instance As FICHEROSGLOBAL)
    End Sub
  Partial Private Sub UpdateFICHEROSGLOBAL(instance As FICHEROSGLOBAL)
    End Sub
  Partial Private Sub DeleteFICHEROSGLOBAL(instance As FICHEROSGLOBAL)
    End Sub
  Partial Private Sub InsertFICHERO(instance As FICHERO)
    End Sub
  Partial Private Sub UpdateFICHERO(instance As FICHERO)
    End Sub
  Partial Private Sub DeleteFICHERO(instance As FICHERO)
    End Sub
  Partial Private Sub InsertCONCEPTOSFAMILIA(instance As CONCEPTOSFAMILIA)
    End Sub
  Partial Private Sub UpdateCONCEPTOSFAMILIA(instance As CONCEPTOSFAMILIA)
    End Sub
  Partial Private Sub DeleteCONCEPTOSFAMILIA(instance As CONCEPTOSFAMILIA)
    End Sub
  Partial Private Sub InsertCONCEPTOSFRA(instance As CONCEPTOSFRA)
    End Sub
  Partial Private Sub UpdateCONCEPTOSFRA(instance As CONCEPTOSFRA)
    End Sub
  Partial Private Sub DeleteCONCEPTOSFRA(instance As CONCEPTOSFRA)
    End Sub
  Partial Private Sub InsertN_TipoIVA(instance As N_TipoIVA)
    End Sub
  Partial Private Sub UpdateN_TipoIVA(instance As N_TipoIVA)
    End Sub
  Partial Private Sub DeleteN_TipoIVA(instance As N_TipoIVA)
    End Sub
  Partial Private Sub InsertLEMPRESA(instance As LEMPRESA)
    End Sub
  Partial Private Sub UpdateLEMPRESA(instance As LEMPRESA)
    End Sub
  Partial Private Sub DeleteLEMPRESA(instance As LEMPRESA)
    End Sub
  Partial Private Sub InsertGASTO(instance As GASTO)
    End Sub
  Partial Private Sub UpdateGASTO(instance As GASTO)
    End Sub
  Partial Private Sub DeleteGASTO(instance As GASTO)
    End Sub
  Partial Private Sub InsertN_Factura(instance As N_Factura)
    End Sub
  Partial Private Sub UpdateN_Factura(instance As N_Factura)
    End Sub
  Partial Private Sub DeleteN_Factura(instance As N_Factura)
    End Sub
  Partial Private Sub InsertN_Factura_Linea(instance As N_Factura_Linea)
    End Sub
  Partial Private Sub UpdateN_Factura_Linea(instance As N_Factura_Linea)
    End Sub
  Partial Private Sub DeleteN_Factura_Linea(instance As N_Factura_Linea)
    End Sub
  Partial Private Sub InsertCONCEPTOSFACTURABLE(instance As CONCEPTOSFACTURABLE)
    End Sub
  Partial Private Sub UpdateCONCEPTOSFACTURABLE(instance As CONCEPTOSFACTURABLE)
    End Sub
  Partial Private Sub DeleteCONCEPTOSFACTURABLE(instance As CONCEPTOSFACTURABLE)
    End Sub
  Partial Private Sub InsertComunicacion(instance As Comunicacion)
    End Sub
  Partial Private Sub UpdateComunicacion(instance As Comunicacion)
    End Sub
  Partial Private Sub DeleteComunicacion(instance As Comunicacion)
    End Sub
  Partial Private Sub InsertTarifa(instance As Tarifa)
    End Sub
  Partial Private Sub UpdateTarifa(instance As Tarifa)
    End Sub
  Partial Private Sub DeleteTarifa(instance As Tarifa)
    End Sub
  Partial Private Sub InsertPLANTILLA(instance As PLANTILLA)
    End Sub
  Partial Private Sub UpdatePLANTILLA(instance As PLANTILLA)
    End Sub
  Partial Private Sub DeletePLANTILLA(instance As PLANTILLA)
    End Sub
  Partial Private Sub InsertPLANTILLAANALITICA(instance As PLANTILLAANALITICA)
    End Sub
  Partial Private Sub UpdatePLANTILLAANALITICA(instance As PLANTILLAANALITICA)
    End Sub
  Partial Private Sub DeletePLANTILLAANALITICA(instance As PLANTILLAANALITICA)
    End Sub
  Partial Private Sub InsertPLANTILLA_HISTORIALE(instance As PLANTILLA_HISTORIALE)
    End Sub
  Partial Private Sub UpdatePLANTILLA_HISTORIALE(instance As PLANTILLA_HISTORIALE)
    End Sub
  Partial Private Sub DeletePLANTILLA_HISTORIALE(instance As PLANTILLA_HISTORIALE)
    End Sub
  Partial Private Sub InsertDERIVACIONES_DESTINO(instance As DERIVACIONES_DESTINO)
    End Sub
  Partial Private Sub UpdateDERIVACIONES_DESTINO(instance As DERIVACIONES_DESTINO)
    End Sub
  Partial Private Sub DeleteDERIVACIONES_DESTINO(instance As DERIVACIONES_DESTINO)
    End Sub
  Partial Private Sub InsertARTICULO(instance As ARTICULO)
    End Sub
  Partial Private Sub UpdateARTICULO(instance As ARTICULO)
    End Sub
  Partial Private Sub DeleteARTICULO(instance As ARTICULO)
    End Sub
  Partial Private Sub InsertN_Parte(instance As N_Parte)
    End Sub
  Partial Private Sub UpdateN_Parte(instance As N_Parte)
    End Sub
  Partial Private Sub DeleteN_Parte(instance As N_Parte)
    End Sub
  Partial Private Sub InsertDIAGNOSTICO(instance As DIAGNOSTICO)
    End Sub
  Partial Private Sub UpdateDIAGNOSTICO(instance As DIAGNOSTICO)
    End Sub
  Partial Private Sub DeleteDIAGNOSTICO(instance As DIAGNOSTICO)
    End Sub
  Partial Private Sub InsertHistorialesDiagnostico(instance As HistorialesDiagnostico)
    End Sub
  Partial Private Sub UpdateHistorialesDiagnostico(instance As HistorialesDiagnostico)
    End Sub
  Partial Private Sub DeleteHistorialesDiagnostico(instance As HistorialesDiagnostico)
    End Sub
  Partial Private Sub InsertLHISTORIALE(instance As LHISTORIALE)
    End Sub
  Partial Private Sub UpdateLHISTORIALE(instance As LHISTORIALE)
    End Sub
  Partial Private Sub DeleteLHISTORIALE(instance As LHISTORIALE)
    End Sub
  Partial Private Sub InsertLINEASINDICACIONE(instance As LINEASINDICACIONE)
    End Sub
  Partial Private Sub UpdateLINEASINDICACIONE(instance As LINEASINDICACIONE)
    End Sub
  Partial Private Sub DeleteLINEASINDICACIONE(instance As LINEASINDICACIONE)
    End Sub
  Partial Private Sub InsertSALA(instance As SALA)
    End Sub
  Partial Private Sub UpdateSALA(instance As SALA)
    End Sub
  Partial Private Sub DeleteSALA(instance As SALA)
    End Sub
  Partial Private Sub InsertLINEASFACTURA(instance As LINEASFACTURA)
    End Sub
  Partial Private Sub UpdateLINEASFACTURA(instance As LINEASFACTURA)
    End Sub
  Partial Private Sub DeleteLINEASFACTURA(instance As LINEASFACTURA)
    End Sub
  Partial Private Sub InsertMEDICO(instance As MEDICO)
    End Sub
  Partial Private Sub UpdateMEDICO(instance As MEDICO)
    End Sub
  Partial Private Sub DeleteMEDICO(instance As MEDICO)
    End Sub
  Partial Private Sub InsertMEDICOS_CONCEPTOFRA(instance As MEDICOS_CONCEPTOFRA)
    End Sub
  Partial Private Sub UpdateMEDICOS_CONCEPTOFRA(instance As MEDICOS_CONCEPTOFRA)
    End Sub
  Partial Private Sub DeleteMEDICOS_CONCEPTOFRA(instance As MEDICOS_CONCEPTOFRA)
    End Sub
  Partial Private Sub InsertLiquidacion_Medico(instance As Liquidacion_Medico)
    End Sub
  Partial Private Sub UpdateLiquidacion_Medico(instance As Liquidacion_Medico)
    End Sub
  Partial Private Sub DeleteLiquidacion_Medico(instance As Liquidacion_Medico)
    End Sub
  Partial Private Sub InsertN_PedidosProveedor(instance As N_PedidosProveedor)
    End Sub
  Partial Private Sub UpdateN_PedidosProveedor(instance As N_PedidosProveedor)
    End Sub
  Partial Private Sub DeleteN_PedidosProveedor(instance As N_PedidosProveedor)
    End Sub
  Partial Private Sub InsertN_PedidosProveedor_Totale(instance As N_PedidosProveedor_Totale)
    End Sub
  Partial Private Sub UpdateN_PedidosProveedor_Totale(instance As N_PedidosProveedor_Totale)
    End Sub
  Partial Private Sub DeleteN_PedidosProveedor_Totale(instance As N_PedidosProveedor_Totale)
    End Sub
  Partial Private Sub InsertN_PedidosProveedor_Linea(instance As N_PedidosProveedor_Linea)
    End Sub
  Partial Private Sub UpdateN_PedidosProveedor_Linea(instance As N_PedidosProveedor_Linea)
    End Sub
  Partial Private Sub DeleteN_PedidosProveedor_Linea(instance As N_PedidosProveedor_Linea)
    End Sub
  Partial Private Sub InsertN_PedidosProveedor_Tipo(instance As N_PedidosProveedor_Tipo)
    End Sub
  Partial Private Sub UpdateN_PedidosProveedor_Tipo(instance As N_PedidosProveedor_Tipo)
    End Sub
  Partial Private Sub DeleteN_PedidosProveedor_Tipo(instance As N_PedidosProveedor_Tipo)
    End Sub
  Partial Private Sub InsertN_Poblacione(instance As N_Poblacione)
    End Sub
  Partial Private Sub UpdateN_Poblacione(instance As N_Poblacione)
    End Sub
  Partial Private Sub DeleteN_Poblacione(instance As N_Poblacione)
    End Sub
  Partial Private Sub InsertN_Proceso(instance As N_Proceso)
    End Sub
  Partial Private Sub UpdateN_Proceso(instance As N_Proceso)
    End Sub
  Partial Private Sub DeleteN_Proceso(instance As N_Proceso)
    End Sub
  Partial Private Sub InsertN_Proveedor(instance As N_Proveedor)
    End Sub
  Partial Private Sub UpdateN_Proveedor(instance As N_Proveedor)
    End Sub
  Partial Private Sub DeleteN_Proveedor(instance As N_Proveedor)
    End Sub
  Partial Private Sub InsertN_Provincia(instance As N_Provincia)
    End Sub
  Partial Private Sub UpdateN_Provincia(instance As N_Provincia)
    End Sub
  Partial Private Sub DeleteN_Provincia(instance As N_Provincia)
    End Sub
  Partial Private Sub InsertCALENDARIO_GLOBAL(instance As CALENDARIO_GLOBAL)
    End Sub
  Partial Private Sub UpdateCALENDARIO_GLOBAL(instance As CALENDARIO_GLOBAL)
    End Sub
  Partial Private Sub DeleteCALENDARIO_GLOBAL(instance As CALENDARIO_GLOBAL)
    End Sub
  Partial Private Sub InsertCALENDARIO_USUARIO(instance As CALENDARIO_USUARIO)
    End Sub
  Partial Private Sub UpdateCALENDARIO_USUARIO(instance As CALENDARIO_USUARIO)
    End Sub
  Partial Private Sub DeleteCALENDARIO_USUARIO(instance As CALENDARIO_USUARIO)
    End Sub
  Partial Private Sub InsertCALENDARIO_MEDICO(instance As CALENDARIO_MEDICO)
    End Sub
  Partial Private Sub UpdateCALENDARIO_MEDICO(instance As CALENDARIO_MEDICO)
    End Sub
  Partial Private Sub DeleteCALENDARIO_MEDICO(instance As CALENDARIO_MEDICO)
    End Sub
  Partial Private Sub InsertAntecedentesDiagnostico(instance As AntecedentesDiagnostico)
    End Sub
  Partial Private Sub UpdateAntecedentesDiagnostico(instance As AntecedentesDiagnostico)
    End Sub
  Partial Private Sub DeleteAntecedentesDiagnostico(instance As AntecedentesDiagnostico)
    End Sub
  Partial Private Sub InsertCOMPARATIVA(instance As COMPARATIVA)
    End Sub
  Partial Private Sub UpdateCOMPARATIVA(instance As COMPARATIVA)
    End Sub
  Partial Private Sub DeleteCOMPARATIVA(instance As COMPARATIVA)
    End Sub
  Partial Private Sub InsertDATOSCOMPARATIVA(instance As DATOSCOMPARATIVA)
    End Sub
  Partial Private Sub UpdateDATOSCOMPARATIVA(instance As DATOSCOMPARATIVA)
    End Sub
  Partial Private Sub DeleteDATOSCOMPARATIVA(instance As DATOSCOMPARATIVA)
    End Sub
  Partial Private Sub InsertRC_Categorias_GaleriaImagene(instance As RC_Categorias_GaleriaImagene)
    End Sub
  Partial Private Sub UpdateRC_Categorias_GaleriaImagene(instance As RC_Categorias_GaleriaImagene)
    End Sub
  Partial Private Sub DeleteRC_Categorias_GaleriaImagene(instance As RC_Categorias_GaleriaImagene)
    End Sub
  Partial Private Sub InsertRC_Categorias_Imagene(instance As RC_Categorias_Imagene)
    End Sub
  Partial Private Sub UpdateRC_Categorias_Imagene(instance As RC_Categorias_Imagene)
    End Sub
  Partial Private Sub DeleteRC_Categorias_Imagene(instance As RC_Categorias_Imagene)
    End Sub
  Partial Private Sub InsertMODELOSCOMPARATIVA(instance As MODELOSCOMPARATIVA)
    End Sub
  Partial Private Sub UpdateMODELOSCOMPARATIVA(instance As MODELOSCOMPARATIVA)
    End Sub
  Partial Private Sub DeleteMODELOSCOMPARATIVA(instance As MODELOSCOMPARATIVA)
    End Sub
  Partial Private Sub InsertLCOMPARATIVA(instance As LCOMPARATIVA)
    End Sub
  Partial Private Sub UpdateLCOMPARATIVA(instance As LCOMPARATIVA)
    End Sub
  Partial Private Sub DeleteLCOMPARATIVA(instance As LCOMPARATIVA)
    End Sub
  Partial Private Sub InsertNOTA(instance As NOTA)
    End Sub
  Partial Private Sub UpdateNOTA(instance As NOTA)
    End Sub
  Partial Private Sub DeleteNOTA(instance As NOTA)
    End Sub
  Partial Private Sub InsertLMUTUA(instance As LMUTUA)
    End Sub
  Partial Private Sub UpdateLMUTUA(instance As LMUTUA)
    End Sub
  Partial Private Sub DeleteLMUTUA(instance As LMUTUA)
    End Sub
  Partial Private Sub InsertLCOMPARATIVAS_TRATAMIENTO(instance As LCOMPARATIVAS_TRATAMIENTO)
    End Sub
  Partial Private Sub UpdateLCOMPARATIVAS_TRATAMIENTO(instance As LCOMPARATIVAS_TRATAMIENTO)
    End Sub
  Partial Private Sub DeleteLCOMPARATIVAS_TRATAMIENTO(instance As LCOMPARATIVAS_TRATAMIENTO)
    End Sub
  Partial Private Sub InsertLineasCita(instance As LineasCita)
    End Sub
  Partial Private Sub UpdateLineasCita(instance As LineasCita)
    End Sub
  Partial Private Sub DeleteLineasCita(instance As LineasCita)
    End Sub
  Partial Private Sub InsertLINEASALARMA(instance As LINEASALARMA)
    End Sub
  Partial Private Sub UpdateLINEASALARMA(instance As LINEASALARMA)
    End Sub
  Partial Private Sub DeleteLINEASALARMA(instance As LINEASALARMA)
    End Sub
  Partial Private Sub InsertALARMA(instance As ALARMA)
    End Sub
  Partial Private Sub UpdateALARMA(instance As ALARMA)
    End Sub
  Partial Private Sub DeleteALARMA(instance As ALARMA)
    End Sub
  Partial Private Sub InsertINFORME_MEDICO(instance As INFORME_MEDICO)
    End Sub
  Partial Private Sub UpdateINFORME_MEDICO(instance As INFORME_MEDICO)
    End Sub
  Partial Private Sub DeleteINFORME_MEDICO(instance As INFORME_MEDICO)
    End Sub
  Partial Private Sub InsertINFORMACIONPRIMARIA(instance As INFORMACIONPRIMARIA)
    End Sub
  Partial Private Sub UpdateINFORMACIONPRIMARIA(instance As INFORMACIONPRIMARIA)
    End Sub
  Partial Private Sub DeleteINFORMACIONPRIMARIA(instance As INFORMACIONPRIMARIA)
    End Sub
  Partial Private Sub InsertRecetasMedicamento(instance As RecetasMedicamento)
    End Sub
  Partial Private Sub UpdateRecetasMedicamento(instance As RecetasMedicamento)
    End Sub
  Partial Private Sub DeleteRecetasMedicamento(instance As RecetasMedicamento)
    End Sub
  Partial Private Sub InsertMEDICAMENTO(instance As MEDICAMENTO)
    End Sub
  Partial Private Sub UpdateMEDICAMENTO(instance As MEDICAMENTO)
    End Sub
  Partial Private Sub DeleteMEDICAMENTO(instance As MEDICAMENTO)
    End Sub
  Partial Private Sub InsertComoConocio(instance As ComoConocio)
    End Sub
  Partial Private Sub UpdateComoConocio(instance As ComoConocio)
    End Sub
  Partial Private Sub DeleteComoConocio(instance As ComoConocio)
    End Sub
  Partial Private Sub InsertAuditoria(instance As Auditoria)
    End Sub
  Partial Private Sub UpdateAuditoria(instance As Auditoria)
    End Sub
  Partial Private Sub DeleteAuditoria(instance As Auditoria)
    End Sub
  Partial Private Sub InsertN_Almacen(instance As N_Almacen)
    End Sub
  Partial Private Sub UpdateN_Almacen(instance As N_Almacen)
    End Sub
  Partial Private Sub DeleteN_Almacen(instance As N_Almacen)
    End Sub
  Partial Private Sub InsertLiquidacion_Medico_Linea(instance As Liquidacion_Medico_Linea)
    End Sub
  Partial Private Sub UpdateLiquidacion_Medico_Linea(instance As Liquidacion_Medico_Linea)
    End Sub
  Partial Private Sub DeleteLiquidacion_Medico_Linea(instance As Liquidacion_Medico_Linea)
    End Sub
  Partial Private Sub InsertN_Ticket_Linea(instance As N_Ticket_Linea)
    End Sub
  Partial Private Sub UpdateN_Ticket_Linea(instance As N_Ticket_Linea)
    End Sub
  Partial Private Sub DeleteN_Ticket_Linea(instance As N_Ticket_Linea)
    End Sub
  Partial Private Sub InsertN_Ticket(instance As N_Ticket)
    End Sub
  Partial Private Sub UpdateN_Ticket(instance As N_Ticket)
    End Sub
  Partial Private Sub DeleteN_Ticket(instance As N_Ticket)
    End Sub
  Partial Private Sub InsertN_Articulos_ConsolidacionStock(instance As N_Articulos_ConsolidacionStock)
    End Sub
  Partial Private Sub UpdateN_Articulos_ConsolidacionStock(instance As N_Articulos_ConsolidacionStock)
    End Sub
  Partial Private Sub DeleteN_Articulos_ConsolidacionStock(instance As N_Articulos_ConsolidacionStock)
    End Sub
  Partial Private Sub InsertMEDICOS_FICHERO(instance As MEDICOS_FICHERO)
    End Sub
  Partial Private Sub UpdateMEDICOS_FICHERO(instance As MEDICOS_FICHERO)
    End Sub
  Partial Private Sub DeleteMEDICOS_FICHERO(instance As MEDICOS_FICHERO)
    End Sub
  Partial Private Sub InsertMODELOSDATO(instance As MODELOSDATO)
    End Sub
  Partial Private Sub UpdateMODELOSDATO(instance As MODELOSDATO)
    End Sub
  Partial Private Sub DeleteMODELOSDATO(instance As MODELOSDATO)
    End Sub
  Partial Private Sub InsertHISTORIALE(instance As HISTORIALE)
    End Sub
  Partial Private Sub UpdateHISTORIALE(instance As HISTORIALE)
    End Sub
  Partial Private Sub DeleteHISTORIALE(instance As HISTORIALE)
    End Sub
  Partial Private Sub InsertMUTUA(instance As MUTUA)
    End Sub
  Partial Private Sub UpdateMUTUA(instance As MUTUA)
    End Sub
  Partial Private Sub DeleteMUTUA(instance As MUTUA)
    End Sub
  Partial Private Sub InsertRECETA(instance As RECETA)
    End Sub
  Partial Private Sub UpdateRECETA(instance As RECETA)
    End Sub
  Partial Private Sub DeleteRECETA(instance As RECETA)
    End Sub
  Partial Private Sub InsertN_Partes_Asistencia(instance As N_Partes_Asistencia)
    End Sub
  Partial Private Sub UpdateN_Partes_Asistencia(instance As N_Partes_Asistencia)
    End Sub
  Partial Private Sub DeleteN_Partes_Asistencia(instance As N_Partes_Asistencia)
    End Sub
  Partial Private Sub InsertEntregasCuenta(instance As EntregasCuenta)
    End Sub
  Partial Private Sub UpdateEntregasCuenta(instance As EntregasCuenta)
    End Sub
  Partial Private Sub DeleteEntregasCuenta(instance As EntregasCuenta)
    End Sub
  Partial Private Sub InsertRECIBO(instance As RECIBO)
    End Sub
  Partial Private Sub UpdateRECIBO(instance As RECIBO)
    End Sub
  Partial Private Sub DeleteRECIBO(instance As RECIBO)
    End Sub
  Partial Private Sub InsertRecetasXML(instance As RecetasXML)
    End Sub
  Partial Private Sub UpdateRecetasXML(instance As RecetasXML)
    End Sub
  Partial Private Sub DeleteRecetasXML(instance As RecetasXML)
    End Sub
  Partial Private Sub InsertHORARIOS_MEDICOS(instance As HORARIOS_MEDICOS)
    End Sub
  Partial Private Sub UpdateHORARIOS_MEDICOS(instance As HORARIOS_MEDICOS)
    End Sub
  Partial Private Sub DeleteHORARIOS_MEDICOS(instance As HORARIOS_MEDICOS)
    End Sub
  Partial Private Sub InsertBonos(instance As Bonos)
    End Sub
  Partial Private Sub UpdateBonos(instance As Bonos)
    End Sub
  Partial Private Sub DeleteBonos(instance As Bonos)
    End Sub
  Partial Private Sub InsertSesiones(instance As Sesiones)
    End Sub
  Partial Private Sub UpdateSesiones(instance As Sesiones)
    End Sub
  Partial Private Sub DeleteSesiones(instance As Sesiones)
    End Sub
  Partial Private Sub InsertANALITICAS(instance As ANALITICAS)
    End Sub
  Partial Private Sub UpdateANALITICAS(instance As ANALITICAS)
    End Sub
  Partial Private Sub DeleteANALITICAS(instance As ANALITICAS)
    End Sub
  Partial Private Sub InsertAUDIOMETRIAS(instance As AUDIOMETRIAS)
    End Sub
  Partial Private Sub UpdateAUDIOMETRIAS(instance As AUDIOMETRIAS)
    End Sub
  Partial Private Sub DeleteAUDIOMETRIAS(instance As AUDIOMETRIAS)
    End Sub
  Partial Private Sub InsertDERIVACIONES(instance As DERIVACIONES)
    End Sub
  Partial Private Sub UpdateDERIVACIONES(instance As DERIVACIONES)
    End Sub
  Partial Private Sub DeleteDERIVACIONES(instance As DERIVACIONES)
    End Sub
  Partial Private Sub InsertHISTORIALES_REVISIONES(instance As HISTORIALES_REVISIONES)
    End Sub
  Partial Private Sub UpdateHISTORIALES_REVISIONES(instance As HISTORIALES_REVISIONES)
    End Sub
  Partial Private Sub DeleteHISTORIALES_REVISIONES(instance As HISTORIALES_REVISIONES)
    End Sub
  Partial Private Sub InsertIMAGENES(instance As IMAGENES)
    End Sub
  Partial Private Sub UpdateIMAGENES(instance As IMAGENES)
    End Sub
  Partial Private Sub DeleteIMAGENES(instance As IMAGENES)
    End Sub
  Partial Private Sub InsertPRESUPUESTOS(instance As PRESUPUESTOS)
    End Sub
  Partial Private Sub UpdatePRESUPUESTOS(instance As PRESUPUESTOS)
    End Sub
  Partial Private Sub DeletePRESUPUESTOS(instance As PRESUPUESTOS)
    End Sub
  Partial Private Sub InsertVariablesGlobale(instance As VariablesGlobale)
    End Sub
  Partial Private Sub UpdateVariablesGlobale(instance As VariablesGlobale)
    End Sub
  Partial Private Sub DeleteVariablesGlobale(instance As VariablesGlobale)
    End Sub
  Partial Private Sub InsertLPLANTILLAANALITICAS(instance As LPLANTILLAANALITICAS)
    End Sub
  Partial Private Sub UpdateLPLANTILLAANALITICAS(instance As LPLANTILLAANALITICAS)
    End Sub
  Partial Private Sub DeleteLPLANTILLAANALITICAS(instance As LPLANTILLAANALITICAS)
    End Sub
  Partial Private Sub InsertPLANTILLAANALITICAS(instance As PLANTILLAANALITICAS)
    End Sub
  Partial Private Sub UpdatePLANTILLAANALITICAS(instance As PLANTILLAANALITICAS)
    End Sub
  Partial Private Sub DeletePLANTILLAANALITICAS(instance As PLANTILLAANALITICAS)
    End Sub
  Partial Private Sub InsertCONCEPTOSANALITICA(instance As CONCEPTOSANALITICA)
    End Sub
  Partial Private Sub UpdateCONCEPTOSANALITICA(instance As CONCEPTOSANALITICA)
    End Sub
  Partial Private Sub DeleteCONCEPTOSANALITICA(instance As CONCEPTOSANALITICA)
    End Sub
  Partial Private Sub InsertCITA(instance As CITA)
    End Sub
  Partial Private Sub UpdateCITA(instance As CITA)
    End Sub
  Partial Private Sub DeleteCITA(instance As CITA)
    End Sub
  Partial Private Sub InsertDescartar_Pacientes_Duplicado(instance As Descartar_Pacientes_Duplicado)
    End Sub
  Partial Private Sub UpdateDescartar_Pacientes_Duplicado(instance As Descartar_Pacientes_Duplicado)
    End Sub
  Partial Private Sub DeleteDescartar_Pacientes_Duplicado(instance As Descartar_Pacientes_Duplicado)
    End Sub
  Partial Private Sub InsertRecordatorio(instance As Recordatorio)
    End Sub
  Partial Private Sub UpdateRecordatorio(instance As Recordatorio)
    End Sub
  Partial Private Sub DeleteRecordatorio(instance As Recordatorio)
    End Sub
  Partial Private Sub Insertd_PresupuestoLinea(instance As d_PresupuestoLinea)
    End Sub
  Partial Private Sub Updated_PresupuestoLinea(instance As d_PresupuestoLinea)
    End Sub
  Partial Private Sub Deleted_PresupuestoLinea(instance As d_PresupuestoLinea)
    End Sub
  Partial Private Sub InsertUSUARIO(instance As USUARIO)
    End Sub
  Partial Private Sub UpdateUSUARIO(instance As USUARIO)
    End Sub
  Partial Private Sub DeleteUSUARIO(instance As USUARIO)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.centro_medico.My.MySettings.Default.CMConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property PACIENTEs() As System.Data.Linq.Table(Of PACIENTE)
		Get
			Return Me.GetTable(Of PACIENTE)
		End Get
	End Property
	
	Public ReadOnly Property FORMASPAGOs() As System.Data.Linq.Table(Of FORMASPAGO)
		Get
			Return Me.GetTable(Of FORMASPAGO)
		End Get
	End Property
	
	Public ReadOnly Property EMPRESAs() As System.Data.Linq.Table(Of EMPRESA)
		Get
			Return Me.GetTable(Of EMPRESA)
		End Get
	End Property
	
	Public ReadOnly Property FACTURAs() As System.Data.Linq.Table(Of FACTURA)
		Get
			Return Me.GetTable(Of FACTURA)
		End Get
	End Property
	
	Public ReadOnly Property ContactosPacientes() As System.Data.Linq.Table(Of ContactosPaciente)
		Get
			Return Me.GetTable(Of ContactosPaciente)
		End Get
	End Property
	
	Public ReadOnly Property Parentescos() As System.Data.Linq.Table(Of Parentesco)
		Get
			Return Me.GetTable(Of Parentesco)
		End Get
	End Property
	
	Public ReadOnly Property Asociados() As System.Data.Linq.Table(Of Asociado)
		Get
			Return Me.GetTable(Of Asociado)
		End Get
	End Property
	
	Public ReadOnly Property BANCOs() As System.Data.Linq.Table(Of BANCO)
		Get
			Return Me.GetTable(Of BANCO)
		End Get
	End Property
	
	Public ReadOnly Property N_Articulos() As System.Data.Linq.Table(Of N_Articulo)
		Get
			Return Me.GetTable(Of N_Articulo)
		End Get
	End Property
	
	Public ReadOnly Property PagosPacientes() As System.Data.Linq.Table(Of PagosPaciente)
		Get
			Return Me.GetTable(Of PagosPaciente)
		End Get
	End Property
	
	Public ReadOnly Property ROLEs() As System.Data.Linq.Table(Of ROLE)
		Get
			Return Me.GetTable(Of ROLE)
		End Get
	End Property
	
	Public ReadOnly Property ROLESITEMs() As System.Data.Linq.Table(Of ROLESITEM)
		Get
			Return Me.GetTable(Of ROLESITEM)
		End Get
	End Property
	
	Public ReadOnly Property ROLESUSUARIOs() As System.Data.Linq.Table(Of ROLESUSUARIO)
		Get
			Return Me.GetTable(Of ROLESUSUARIO)
		End Get
	End Property
	
	Public ReadOnly Property ROLESPERMISOs() As System.Data.Linq.Table(Of ROLESPERMISO)
		Get
			Return Me.GetTable(Of ROLESPERMISO)
		End Get
	End Property
	
	Public ReadOnly Property PERMISOs() As System.Data.Linq.Table(Of PERMISO)
		Get
			Return Me.GetTable(Of PERMISO)
		End Get
	End Property
	
	Public ReadOnly Property ReportesPersonalizados() As System.Data.Linq.Table(Of ReportesPersonalizado)
		Get
			Return Me.GetTable(Of ReportesPersonalizado)
		End Get
	End Property
	
	Public ReadOnly Property SERIES() As System.Data.Linq.Table(Of SERIES)
		Get
			Return Me.GetTable(Of SERIES)
		End Get
	End Property
	
	Public ReadOnly Property d_Acciones() As System.Data.Linq.Table(Of d_Accione)
		Get
			Return Me.GetTable(Of d_Accione)
		End Get
	End Property
	
	Public ReadOnly Property d_Colores() As System.Data.Linq.Table(Of d_Colore)
		Get
			Return Me.GetTable(Of d_Colore)
		End Get
	End Property
	
	Public ReadOnly Property d_ConceptosFra_Imagenes() As System.Data.Linq.Table(Of d_ConceptosFra_Imagene)
		Get
			Return Me.GetTable(Of d_ConceptosFra_Imagene)
		End Get
	End Property
	
	Public ReadOnly Property d_Dientes() As System.Data.Linq.Table(Of d_Diente)
		Get
			Return Me.GetTable(Of d_Diente)
		End Get
	End Property
	
	Public ReadOnly Property d_Imagenes() As System.Data.Linq.Table(Of d_Imagene)
		Get
			Return Me.GetTable(Of d_Imagene)
		End Get
	End Property
	
	Public ReadOnly Property d_Odontogramas() As System.Data.Linq.Table(Of d_Odontograma)
		Get
			Return Me.GetTable(Of d_Odontograma)
		End Get
	End Property
	
	Public ReadOnly Property d_Presupuestos() As System.Data.Linq.Table(Of d_Presupuesto)
		Get
			Return Me.GetTable(Of d_Presupuesto)
		End Get
	End Property
	
	Public ReadOnly Property FICHEROSGLOBALs() As System.Data.Linq.Table(Of FICHEROSGLOBAL)
		Get
			Return Me.GetTable(Of FICHEROSGLOBAL)
		End Get
	End Property
	
	Public ReadOnly Property FICHEROs() As System.Data.Linq.Table(Of FICHERO)
		Get
			Return Me.GetTable(Of FICHERO)
		End Get
	End Property
	
	Public ReadOnly Property CONCEPTOSFAMILIAs() As System.Data.Linq.Table(Of CONCEPTOSFAMILIA)
		Get
			Return Me.GetTable(Of CONCEPTOSFAMILIA)
		End Get
	End Property
	
	Public ReadOnly Property CONCEPTOSFRAs() As System.Data.Linq.Table(Of CONCEPTOSFRA)
		Get
			Return Me.GetTable(Of CONCEPTOSFRA)
		End Get
	End Property
	
	Public ReadOnly Property N_TipoIVAs() As System.Data.Linq.Table(Of N_TipoIVA)
		Get
			Return Me.GetTable(Of N_TipoIVA)
		End Get
	End Property
	
	Public ReadOnly Property LEMPRESAs() As System.Data.Linq.Table(Of LEMPRESA)
		Get
			Return Me.GetTable(Of LEMPRESA)
		End Get
	End Property
	
	Public ReadOnly Property DESGLOSEIVAS() As System.Data.Linq.Table(Of DESGLOSEIVAS)
		Get
			Return Me.GetTable(Of DESGLOSEIVAS)
		End Get
	End Property
	
	Public ReadOnly Property CLINICAINCEMEs() As System.Data.Linq.Table(Of CLINICAINCEME)
		Get
			Return Me.GetTable(Of CLINICAINCEME)
		End Get
	End Property
	
	Public ReadOnly Property GASTOs() As System.Data.Linq.Table(Of GASTO)
		Get
			Return Me.GetTable(Of GASTO)
		End Get
	End Property
	
	Public ReadOnly Property N_Facturas() As System.Data.Linq.Table(Of N_Factura)
		Get
			Return Me.GetTable(Of N_Factura)
		End Get
	End Property
	
	Public ReadOnly Property N_Factura_Lineas() As System.Data.Linq.Table(Of N_Factura_Linea)
		Get
			Return Me.GetTable(Of N_Factura_Linea)
		End Get
	End Property
	
	Public ReadOnly Property CONCEPTOSFACTURABLEs() As System.Data.Linq.Table(Of CONCEPTOSFACTURABLE)
		Get
			Return Me.GetTable(Of CONCEPTOSFACTURABLE)
		End Get
	End Property
	
	Public ReadOnly Property Comunicacions() As System.Data.Linq.Table(Of Comunicacion)
		Get
			Return Me.GetTable(Of Comunicacion)
		End Get
	End Property
	
	Public ReadOnly Property Tarifas() As System.Data.Linq.Table(Of Tarifa)
		Get
			Return Me.GetTable(Of Tarifa)
		End Get
	End Property
	
	Public ReadOnly Property PLANTILLAs() As System.Data.Linq.Table(Of PLANTILLA)
		Get
			Return Me.GetTable(Of PLANTILLA)
		End Get
	End Property
	
	Public ReadOnly Property PLANTILLAANALITICAs() As System.Data.Linq.Table(Of PLANTILLAANALITICA)
		Get
			Return Me.GetTable(Of PLANTILLAANALITICA)
		End Get
	End Property
	
	Public ReadOnly Property PLANTILLA_HISTORIALEs() As System.Data.Linq.Table(Of PLANTILLA_HISTORIALE)
		Get
			Return Me.GetTable(Of PLANTILLA_HISTORIALE)
		End Get
	End Property
	
	Public ReadOnly Property DERIVACIONES_DESTINOs() As System.Data.Linq.Table(Of DERIVACIONES_DESTINO)
		Get
			Return Me.GetTable(Of DERIVACIONES_DESTINO)
		End Get
	End Property
	
	Public ReadOnly Property ARTICULOs() As System.Data.Linq.Table(Of ARTICULO)
		Get
			Return Me.GetTable(Of ARTICULO)
		End Get
	End Property
	
	Public ReadOnly Property N_Partes() As System.Data.Linq.Table(Of N_Parte)
		Get
			Return Me.GetTable(Of N_Parte)
		End Get
	End Property
	
	Public ReadOnly Property DIAGNOSTICOs() As System.Data.Linq.Table(Of DIAGNOSTICO)
		Get
			Return Me.GetTable(Of DIAGNOSTICO)
		End Get
	End Property
	
	Public ReadOnly Property HistorialesDiagnosticos() As System.Data.Linq.Table(Of HistorialesDiagnostico)
		Get
			Return Me.GetTable(Of HistorialesDiagnostico)
		End Get
	End Property
	
	Public ReadOnly Property LHISTORIALEs() As System.Data.Linq.Table(Of LHISTORIALE)
		Get
			Return Me.GetTable(Of LHISTORIALE)
		End Get
	End Property
	
	Public ReadOnly Property LINEASINDICACIONEs() As System.Data.Linq.Table(Of LINEASINDICACIONE)
		Get
			Return Me.GetTable(Of LINEASINDICACIONE)
		End Get
	End Property
	
	Public ReadOnly Property SALAs() As System.Data.Linq.Table(Of SALA)
		Get
			Return Me.GetTable(Of SALA)
		End Get
	End Property
	
	Public ReadOnly Property LINEASFACTURAs() As System.Data.Linq.Table(Of LINEASFACTURA)
		Get
			Return Me.GetTable(Of LINEASFACTURA)
		End Get
	End Property
	
	Public ReadOnly Property MEDICOs() As System.Data.Linq.Table(Of MEDICO)
		Get
			Return Me.GetTable(Of MEDICO)
		End Get
	End Property
	
	Public ReadOnly Property MEDICOS_CONCEPTOFRAs() As System.Data.Linq.Table(Of MEDICOS_CONCEPTOFRA)
		Get
			Return Me.GetTable(Of MEDICOS_CONCEPTOFRA)
		End Get
	End Property
	
	Public ReadOnly Property Liquidacion_Medicos() As System.Data.Linq.Table(Of Liquidacion_Medico)
		Get
			Return Me.GetTable(Of Liquidacion_Medico)
		End Get
	End Property
	
	Public ReadOnly Property N_PedidosProveedors() As System.Data.Linq.Table(Of N_PedidosProveedor)
		Get
			Return Me.GetTable(Of N_PedidosProveedor)
		End Get
	End Property
	
	Public ReadOnly Property N_PedidosProveedor_Totales() As System.Data.Linq.Table(Of N_PedidosProveedor_Totale)
		Get
			Return Me.GetTable(Of N_PedidosProveedor_Totale)
		End Get
	End Property
	
	Public ReadOnly Property N_PedidosProveedor_Lineas() As System.Data.Linq.Table(Of N_PedidosProveedor_Linea)
		Get
			Return Me.GetTable(Of N_PedidosProveedor_Linea)
		End Get
	End Property
	
	Public ReadOnly Property N_PedidosProveedor_Tipos() As System.Data.Linq.Table(Of N_PedidosProveedor_Tipo)
		Get
			Return Me.GetTable(Of N_PedidosProveedor_Tipo)
		End Get
	End Property
	
	Public ReadOnly Property N_Poblaciones() As System.Data.Linq.Table(Of N_Poblacione)
		Get
			Return Me.GetTable(Of N_Poblacione)
		End Get
	End Property
	
	Public ReadOnly Property N_Procesos() As System.Data.Linq.Table(Of N_Proceso)
		Get
			Return Me.GetTable(Of N_Proceso)
		End Get
	End Property
	
	Public ReadOnly Property N_Proveedors() As System.Data.Linq.Table(Of N_Proveedor)
		Get
			Return Me.GetTable(Of N_Proveedor)
		End Get
	End Property
	
	Public ReadOnly Property N_Provincias() As System.Data.Linq.Table(Of N_Provincia)
		Get
			Return Me.GetTable(Of N_Provincia)
		End Get
	End Property
	
	Public ReadOnly Property CALENDARIO_GLOBALs() As System.Data.Linq.Table(Of CALENDARIO_GLOBAL)
		Get
			Return Me.GetTable(Of CALENDARIO_GLOBAL)
		End Get
	End Property
	
	Public ReadOnly Property CALENDARIO_USUARIOs() As System.Data.Linq.Table(Of CALENDARIO_USUARIO)
		Get
			Return Me.GetTable(Of CALENDARIO_USUARIO)
		End Get
	End Property
	
	Public ReadOnly Property CALENDARIO_MEDICOs() As System.Data.Linq.Table(Of CALENDARIO_MEDICO)
		Get
			Return Me.GetTable(Of CALENDARIO_MEDICO)
		End Get
	End Property
	
	Public ReadOnly Property AntecedentesDiagnosticos() As System.Data.Linq.Table(Of AntecedentesDiagnostico)
		Get
			Return Me.GetTable(Of AntecedentesDiagnostico)
		End Get
	End Property
	
	Public ReadOnly Property COMPARATIVAs() As System.Data.Linq.Table(Of COMPARATIVA)
		Get
			Return Me.GetTable(Of COMPARATIVA)
		End Get
	End Property
	
	Public ReadOnly Property DATOSCOMPARATIVAs() As System.Data.Linq.Table(Of DATOSCOMPARATIVA)
		Get
			Return Me.GetTable(Of DATOSCOMPARATIVA)
		End Get
	End Property
	
	Public ReadOnly Property RC_Categorias_GaleriaImagenes() As System.Data.Linq.Table(Of RC_Categorias_GaleriaImagene)
		Get
			Return Me.GetTable(Of RC_Categorias_GaleriaImagene)
		End Get
	End Property
	
	Public ReadOnly Property RC_Categorias_Imagenes() As System.Data.Linq.Table(Of RC_Categorias_Imagene)
		Get
			Return Me.GetTable(Of RC_Categorias_Imagene)
		End Get
	End Property
	
	Public ReadOnly Property MODELOSCOMPARATIVAs() As System.Data.Linq.Table(Of MODELOSCOMPARATIVA)
		Get
			Return Me.GetTable(Of MODELOSCOMPARATIVA)
		End Get
	End Property
	
	Public ReadOnly Property LCOMPARATIVAs() As System.Data.Linq.Table(Of LCOMPARATIVA)
		Get
			Return Me.GetTable(Of LCOMPARATIVA)
		End Get
	End Property
	
	Public ReadOnly Property NOTAs() As System.Data.Linq.Table(Of NOTA)
		Get
			Return Me.GetTable(Of NOTA)
		End Get
	End Property
	
	Public ReadOnly Property LMUTUAs() As System.Data.Linq.Table(Of LMUTUA)
		Get
			Return Me.GetTable(Of LMUTUA)
		End Get
	End Property
	
	Public ReadOnly Property LCOMPARATIVAS_TRATAMIENTOs() As System.Data.Linq.Table(Of LCOMPARATIVAS_TRATAMIENTO)
		Get
			Return Me.GetTable(Of LCOMPARATIVAS_TRATAMIENTO)
		End Get
	End Property
	
	Public ReadOnly Property LineasCitas() As System.Data.Linq.Table(Of LineasCita)
		Get
			Return Me.GetTable(Of LineasCita)
		End Get
	End Property
	
	Public ReadOnly Property LINEASALARMAs() As System.Data.Linq.Table(Of LINEASALARMA)
		Get
			Return Me.GetTable(Of LINEASALARMA)
		End Get
	End Property
	
	Public ReadOnly Property ALARMAs() As System.Data.Linq.Table(Of ALARMA)
		Get
			Return Me.GetTable(Of ALARMA)
		End Get
	End Property
	
	Public ReadOnly Property INFORME_MEDICOs() As System.Data.Linq.Table(Of INFORME_MEDICO)
		Get
			Return Me.GetTable(Of INFORME_MEDICO)
		End Get
	End Property
	
	Public ReadOnly Property INFORMACIONPRIMARIAs() As System.Data.Linq.Table(Of INFORMACIONPRIMARIA)
		Get
			Return Me.GetTable(Of INFORMACIONPRIMARIA)
		End Get
	End Property
	
	Public ReadOnly Property RecetasMedicamentos() As System.Data.Linq.Table(Of RecetasMedicamento)
		Get
			Return Me.GetTable(Of RecetasMedicamento)
		End Get
	End Property
	
	Public ReadOnly Property MEDICAMENTOs() As System.Data.Linq.Table(Of MEDICAMENTO)
		Get
			Return Me.GetTable(Of MEDICAMENTO)
		End Get
	End Property
	
	Public ReadOnly Property ComoConocios() As System.Data.Linq.Table(Of ComoConocio)
		Get
			Return Me.GetTable(Of ComoConocio)
		End Get
	End Property
	
	Public ReadOnly Property Auditorias() As System.Data.Linq.Table(Of Auditoria)
		Get
			Return Me.GetTable(Of Auditoria)
		End Get
	End Property
	
	Public ReadOnly Property N_Almacens() As System.Data.Linq.Table(Of N_Almacen)
		Get
			Return Me.GetTable(Of N_Almacen)
		End Get
	End Property
	
	Public ReadOnly Property Liquidacion_Medico_Lineas() As System.Data.Linq.Table(Of Liquidacion_Medico_Linea)
		Get
			Return Me.GetTable(Of Liquidacion_Medico_Linea)
		End Get
	End Property
	
	Public ReadOnly Property N_Ticket_Lineas() As System.Data.Linq.Table(Of N_Ticket_Linea)
		Get
			Return Me.GetTable(Of N_Ticket_Linea)
		End Get
	End Property
	
	Public ReadOnly Property N_Tickets() As System.Data.Linq.Table(Of N_Ticket)
		Get
			Return Me.GetTable(Of N_Ticket)
		End Get
	End Property
	
	Public ReadOnly Property N_Articulos_ConsolidacionStocks() As System.Data.Linq.Table(Of N_Articulos_ConsolidacionStock)
		Get
			Return Me.GetTable(Of N_Articulos_ConsolidacionStock)
		End Get
	End Property
	
	Public ReadOnly Property MEDICOS_FICHEROs() As System.Data.Linq.Table(Of MEDICOS_FICHERO)
		Get
			Return Me.GetTable(Of MEDICOS_FICHERO)
		End Get
	End Property
	
	Public ReadOnly Property MODELOSDATOs() As System.Data.Linq.Table(Of MODELOSDATO)
		Get
			Return Me.GetTable(Of MODELOSDATO)
		End Get
	End Property
	
	Public ReadOnly Property HISTORIALEs() As System.Data.Linq.Table(Of HISTORIALE)
		Get
			Return Me.GetTable(Of HISTORIALE)
		End Get
	End Property
	
	Public ReadOnly Property MUTUAs() As System.Data.Linq.Table(Of MUTUA)
		Get
			Return Me.GetTable(Of MUTUA)
		End Get
	End Property
	
	Public ReadOnly Property RECETAs() As System.Data.Linq.Table(Of RECETA)
		Get
			Return Me.GetTable(Of RECETA)
		End Get
	End Property
	
	Public ReadOnly Property N_Partes_Asistencias() As System.Data.Linq.Table(Of N_Partes_Asistencia)
		Get
			Return Me.GetTable(Of N_Partes_Asistencia)
		End Get
	End Property
	
	Public ReadOnly Property EntregasCuentas() As System.Data.Linq.Table(Of EntregasCuenta)
		Get
			Return Me.GetTable(Of EntregasCuenta)
		End Get
	End Property
	
	Public ReadOnly Property RECIBOs() As System.Data.Linq.Table(Of RECIBO)
		Get
			Return Me.GetTable(Of RECIBO)
		End Get
	End Property
	
	Public ReadOnly Property RecetasXML() As System.Data.Linq.Table(Of RecetasXML)
		Get
			Return Me.GetTable(Of RecetasXML)
		End Get
	End Property
	
	Public ReadOnly Property HORARIOS_MEDICOS() As System.Data.Linq.Table(Of HORARIOS_MEDICOS)
		Get
			Return Me.GetTable(Of HORARIOS_MEDICOS)
		End Get
	End Property
	
	Public ReadOnly Property Bonos() As System.Data.Linq.Table(Of Bonos)
		Get
			Return Me.GetTable(Of Bonos)
		End Get
	End Property
	
	Public ReadOnly Property Sesiones() As System.Data.Linq.Table(Of Sesiones)
		Get
			Return Me.GetTable(Of Sesiones)
		End Get
	End Property
	
	Public ReadOnly Property ANALITICAS() As System.Data.Linq.Table(Of ANALITICAS)
		Get
			Return Me.GetTable(Of ANALITICAS)
		End Get
	End Property
	
	Public ReadOnly Property AUDIOMETRIAS() As System.Data.Linq.Table(Of AUDIOMETRIAS)
		Get
			Return Me.GetTable(Of AUDIOMETRIAS)
		End Get
	End Property
	
	Public ReadOnly Property DERIVACIONES() As System.Data.Linq.Table(Of DERIVACIONES)
		Get
			Return Me.GetTable(Of DERIVACIONES)
		End Get
	End Property
	
	Public ReadOnly Property HISTORIALES_REVISIONES() As System.Data.Linq.Table(Of HISTORIALES_REVISIONES)
		Get
			Return Me.GetTable(Of HISTORIALES_REVISIONES)
		End Get
	End Property
	
	Public ReadOnly Property IMAGENES() As System.Data.Linq.Table(Of IMAGENES)
		Get
			Return Me.GetTable(Of IMAGENES)
		End Get
	End Property
	
	Public ReadOnly Property PRESUPUESTOS() As System.Data.Linq.Table(Of PRESUPUESTOS)
		Get
			Return Me.GetTable(Of PRESUPUESTOS)
		End Get
	End Property
	
	Public ReadOnly Property VariablesGlobales() As System.Data.Linq.Table(Of VariablesGlobale)
		Get
			Return Me.GetTable(Of VariablesGlobale)
		End Get
	End Property
	
	Public ReadOnly Property LPLANTILLAANALITICAS() As System.Data.Linq.Table(Of LPLANTILLAANALITICAS)
		Get
			Return Me.GetTable(Of LPLANTILLAANALITICAS)
		End Get
	End Property
	
	Public ReadOnly Property PLANTILLAANALITICAS1() As System.Data.Linq.Table(Of PLANTILLAANALITICAS)
		Get
			Return Me.GetTable(Of PLANTILLAANALITICAS)
		End Get
	End Property
	
	Public ReadOnly Property CONCEPTOSANALITICAs() As System.Data.Linq.Table(Of CONCEPTOSANALITICA)
		Get
			Return Me.GetTable(Of CONCEPTOSANALITICA)
		End Get
	End Property
	
	Public ReadOnly Property CITAs() As System.Data.Linq.Table(Of CITA)
		Get
			Return Me.GetTable(Of CITA)
		End Get
	End Property
	
	Public ReadOnly Property Descartar_Pacientes_Duplicados() As System.Data.Linq.Table(Of Descartar_Pacientes_Duplicado)
		Get
			Return Me.GetTable(Of Descartar_Pacientes_Duplicado)
		End Get
	End Property
	
	Public ReadOnly Property Recordatorios() As System.Data.Linq.Table(Of Recordatorio)
		Get
			Return Me.GetTable(Of Recordatorio)
		End Get
	End Property
	
	Public ReadOnly Property d_PresupuestoLineas() As System.Data.Linq.Table(Of d_PresupuestoLinea)
		Get
			Return Me.GetTable(Of d_PresupuestoLinea)
		End Get
	End Property
	
	Public ReadOnly Property USUARIOs() As System.Data.Linq.Table(Of USUARIO)
		Get
			Return Me.GetTable(Of USUARIO)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PACIENTES")>  _
Partial Public Class PACIENTE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NOMBRE As String
	
	Private _APELLIDO1 As String
	
	Private _APELLIDO2 As String
	
	Private _DOMICILIO As String
	
	Private _TLFNO As String
	
	Private _MOVIL As String
	
	Private _PROFESION As String
	
	Private _LOCALIDAD As String
	
	Private _CP As String
	
	Private _REFEMPRESA As System.Nullable(Of Integer)
	
	Private _DNI As String
	
	Private _FECHAN As System.Nullable(Of Date)
	
	Private _OBSERVACIONES As String
	
	Private _PROVINCIA As String
	
	Private _NSS As String
	
	Private _PUESTO As String
	
	Private _REGIMEN As System.Nullable(Of Char)
	
	Private _TARJETASANITARIA As String
	
	Private _REFMUTUA As System.Nullable(Of Integer)
	
	Private _CPACIENTE As Integer
	
	Private _SEXO As System.Nullable(Of Char)
	
	Private _FECHAALTA As System.Nullable(Of Date)
	
	Private _TUTOR As String
	
	Private _PAGOBANCO As System.Nullable(Of Char)
	
	Private _ENTIDAD As String
	
	Private _OFICINA As String
	
	Private _DC As String
	
	Private _TITULAR As String
	
	Private _CUENTA As String
	
	Private _DEFUNCION As System.Nullable(Of Char)
	
	Private _NIE As String
	
	Private _PASAPORTE As String
	
	Private _REFPAIS As Integer
	
	Private _FOTO As System.Data.Linq.Binary
	
	Private _FOTOGRAFIA As String
	
	Private _SOCIO As System.Nullable(Of Char)
	
	Private _ACTIVO As System.Nullable(Of Char)
	
	Private _REFFORMAPAGO As String
	
	Private _FECHABAJA As System.Nullable(Of Date)
	
	Private _CONOCIO As String
	
	Private _WEB As String
	
	Private _EMAIL As String
	
	Private _CODIGOPROPIO As String
	
	Private _BENEFICIARIOCODIGOSOCIO As Integer
	
	Private _BENEFICIARIOPARENTESCO As String
	
	Private _Eliminado As System.Nullable(Of Boolean)
	
	Private _SOCIOVALIDOHASTA As System.Nullable(Of Date)
	
	Private _FACTURAs As EntitySet(Of FACTURA)
	
	Private _ContactosPacientes As EntitySet(Of ContactosPaciente)
	
	Private _Asociados As EntitySet(Of Asociado)
	
	Private _Asociados1 As EntitySet(Of Asociado)
	
	Private _PagosPacientes As EntitySet(Of PagosPaciente)
	
	Private _d_Odontogramas As EntitySet(Of d_Odontograma)
	
	Private _FICHEROs As EntitySet(Of FICHERO)
	
	Private _LEMPRESAs As EntitySet(Of LEMPRESA)
	
	Private _N_Facturas As EntitySet(Of N_Factura)
	
	Private _Comunicacions As EntitySet(Of Comunicacion)
	
	Private _N_Procesos As EntitySet(Of N_Proceso)
	
	Private _AntecedentesDiagnosticos As EntitySet(Of AntecedentesDiagnostico)
	
	Private _COMPARATIVAs As EntitySet(Of COMPARATIVA)
	
	Private _LMUTUAs As EntitySet(Of LMUTUA)
	
	Private _LINEASALARMAs As EntitySet(Of LINEASALARMA)
	
	Private _INFORME_MEDICOs As EntitySet(Of INFORME_MEDICO)
	
	Private _INFORMACIONPRIMARIAs As EntitySet(Of INFORMACIONPRIMARIA)
	
	Private _N_Tickets As EntitySet(Of N_Ticket)
	
	Private _HISTORIALEs As EntitySet(Of HISTORIALE)
	
	Private _RECETAs As EntitySet(Of RECETA)
	
	Private _N_Partes_Asistencias As EntitySet(Of N_Partes_Asistencia)
	
	Private _EntregasCuentas As EntitySet(Of EntregasCuenta)
	
	Private _RECIBOs As EntitySet(Of RECIBO)
	
	Private _Bonos As EntitySet(Of Bonos)
	
	Private _ANALITICAS As EntitySet(Of ANALITICAS)
	
	Private _AUDIOMETRIAS As EntitySet(Of AUDIOMETRIAS)
	
	Private _DERIVACIONES As EntitySet(Of DERIVACIONES)
	
	Private _HISTORIALES_REVISIONES As EntitySet(Of HISTORIALES_REVISIONES)
	
	Private _IMAGENES As EntitySet(Of IMAGENES)
	
	Private _PRESUPUESTOS As EntitySet(Of PRESUPUESTOS)
	
	Private _CITAs As EntitySet(Of CITA)
	
	Private _Descartar_Pacientes_Duplicados As EntitySet(Of Descartar_Pacientes_Duplicado)
	
	Private _Descartar_Pacientes_Duplicados1 As EntitySet(Of Descartar_Pacientes_Duplicado)
	
	Private _EMPRESA As EntityRef(Of EMPRESA)
	
	Private _FORMASPAGO As EntityRef(Of FORMASPAGO)
	
	Private _MUTUA As EntityRef(Of MUTUA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREChanged()
    End Sub
    Partial Private Sub OnAPELLIDO1Changing(value As String)
    End Sub
    Partial Private Sub OnAPELLIDO1Changed()
    End Sub
    Partial Private Sub OnAPELLIDO2Changing(value As String)
    End Sub
    Partial Private Sub OnAPELLIDO2Changed()
    End Sub
    Partial Private Sub OnDOMICILIOChanging(value As String)
    End Sub
    Partial Private Sub OnDOMICILIOChanged()
    End Sub
    Partial Private Sub OnTLFNOChanging(value As String)
    End Sub
    Partial Private Sub OnTLFNOChanged()
    End Sub
    Partial Private Sub OnMOVILChanging(value As String)
    End Sub
    Partial Private Sub OnMOVILChanged()
    End Sub
    Partial Private Sub OnPROFESIONChanging(value As String)
    End Sub
    Partial Private Sub OnPROFESIONChanged()
    End Sub
    Partial Private Sub OnLOCALIDADChanging(value As String)
    End Sub
    Partial Private Sub OnLOCALIDADChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnREFEMPRESAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFEMPRESAChanged()
    End Sub
    Partial Private Sub OnDNIChanging(value As String)
    End Sub
    Partial Private Sub OnDNIChanged()
    End Sub
    Partial Private Sub OnFECHANChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHANChanged()
    End Sub
    Partial Private Sub OnOBSERVACIONESChanging(value As String)
    End Sub
    Partial Private Sub OnOBSERVACIONESChanged()
    End Sub
    Partial Private Sub OnPROVINCIAChanging(value As String)
    End Sub
    Partial Private Sub OnPROVINCIAChanged()
    End Sub
    Partial Private Sub OnNSSChanging(value As String)
    End Sub
    Partial Private Sub OnNSSChanged()
    End Sub
    Partial Private Sub OnPUESTOChanging(value As String)
    End Sub
    Partial Private Sub OnPUESTOChanged()
    End Sub
    Partial Private Sub OnREGIMENChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnREGIMENChanged()
    End Sub
    Partial Private Sub OnTARJETASANITARIAChanging(value As String)
    End Sub
    Partial Private Sub OnTARJETASANITARIAChanged()
    End Sub
    Partial Private Sub OnREFMUTUAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFMUTUAChanged()
    End Sub
    Partial Private Sub OnCPACIENTEChanging(value As Integer)
    End Sub
    Partial Private Sub OnCPACIENTEChanged()
    End Sub
    Partial Private Sub OnSEXOChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnSEXOChanged()
    End Sub
    Partial Private Sub OnFECHAALTAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAALTAChanged()
    End Sub
    Partial Private Sub OnTUTORChanging(value As String)
    End Sub
    Partial Private Sub OnTUTORChanged()
    End Sub
    Partial Private Sub OnPAGOBANCOChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnPAGOBANCOChanged()
    End Sub
    Partial Private Sub OnENTIDADChanging(value As String)
    End Sub
    Partial Private Sub OnENTIDADChanged()
    End Sub
    Partial Private Sub OnOFICINAChanging(value As String)
    End Sub
    Partial Private Sub OnOFICINAChanged()
    End Sub
    Partial Private Sub OnDCChanging(value As String)
    End Sub
    Partial Private Sub OnDCChanged()
    End Sub
    Partial Private Sub OnTITULARChanging(value As String)
    End Sub
    Partial Private Sub OnTITULARChanged()
    End Sub
    Partial Private Sub OnCUENTAChanging(value As String)
    End Sub
    Partial Private Sub OnCUENTAChanged()
    End Sub
    Partial Private Sub OnDEFUNCIONChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnDEFUNCIONChanged()
    End Sub
    Partial Private Sub OnNIEChanging(value As String)
    End Sub
    Partial Private Sub OnNIEChanged()
    End Sub
    Partial Private Sub OnPASAPORTEChanging(value As String)
    End Sub
    Partial Private Sub OnPASAPORTEChanged()
    End Sub
    Partial Private Sub OnREFPAISChanging(value As Integer)
    End Sub
    Partial Private Sub OnREFPAISChanged()
    End Sub
    Partial Private Sub OnFOTOChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFOTOChanged()
    End Sub
    Partial Private Sub OnFOTOGRAFIAChanging(value As String)
    End Sub
    Partial Private Sub OnFOTOGRAFIAChanged()
    End Sub
    Partial Private Sub OnSOCIOChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnSOCIOChanged()
    End Sub
    Partial Private Sub OnACTIVOChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnACTIVOChanged()
    End Sub
    Partial Private Sub OnREFFORMAPAGOChanging(value As String)
    End Sub
    Partial Private Sub OnREFFORMAPAGOChanged()
    End Sub
    Partial Private Sub OnFECHABAJAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHABAJAChanged()
    End Sub
    Partial Private Sub OnCONOCIOChanging(value As String)
    End Sub
    Partial Private Sub OnCONOCIOChanged()
    End Sub
    Partial Private Sub OnWEBChanging(value As String)
    End Sub
    Partial Private Sub OnWEBChanged()
    End Sub
    Partial Private Sub OnEMAILChanging(value As String)
    End Sub
    Partial Private Sub OnEMAILChanged()
    End Sub
    Partial Private Sub OnCODIGOPROPIOChanging(value As String)
    End Sub
    Partial Private Sub OnCODIGOPROPIOChanged()
    End Sub
    Partial Private Sub OnBENEFICIARIOCODIGOSOCIOChanging(value As Integer)
    End Sub
    Partial Private Sub OnBENEFICIARIOCODIGOSOCIOChanged()
    End Sub
    Partial Private Sub OnBENEFICIARIOPARENTESCOChanging(value As String)
    End Sub
    Partial Private Sub OnBENEFICIARIOPARENTESCOChanged()
    End Sub
    Partial Private Sub OnEliminadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEliminadoChanged()
    End Sub
    Partial Private Sub OnSOCIOVALIDOHASTAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSOCIOVALIDOHASTAChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FACTURAs = New EntitySet(Of FACTURA)(AddressOf Me.attach_FACTURAs, AddressOf Me.detach_FACTURAs)
		Me._ContactosPacientes = New EntitySet(Of ContactosPaciente)(AddressOf Me.attach_ContactosPacientes, AddressOf Me.detach_ContactosPacientes)
		Me._Asociados = New EntitySet(Of Asociado)(AddressOf Me.attach_Asociados, AddressOf Me.detach_Asociados)
		Me._Asociados1 = New EntitySet(Of Asociado)(AddressOf Me.attach_Asociados1, AddressOf Me.detach_Asociados1)
		Me._PagosPacientes = New EntitySet(Of PagosPaciente)(AddressOf Me.attach_PagosPacientes, AddressOf Me.detach_PagosPacientes)
		Me._d_Odontogramas = New EntitySet(Of d_Odontograma)(AddressOf Me.attach_d_Odontogramas, AddressOf Me.detach_d_Odontogramas)
		Me._FICHEROs = New EntitySet(Of FICHERO)(AddressOf Me.attach_FICHEROs, AddressOf Me.detach_FICHEROs)
		Me._LEMPRESAs = New EntitySet(Of LEMPRESA)(AddressOf Me.attach_LEMPRESAs, AddressOf Me.detach_LEMPRESAs)
		Me._N_Facturas = New EntitySet(Of N_Factura)(AddressOf Me.attach_N_Facturas, AddressOf Me.detach_N_Facturas)
		Me._Comunicacions = New EntitySet(Of Comunicacion)(AddressOf Me.attach_Comunicacions, AddressOf Me.detach_Comunicacions)
		Me._N_Procesos = New EntitySet(Of N_Proceso)(AddressOf Me.attach_N_Procesos, AddressOf Me.detach_N_Procesos)
		Me._AntecedentesDiagnosticos = New EntitySet(Of AntecedentesDiagnostico)(AddressOf Me.attach_AntecedentesDiagnosticos, AddressOf Me.detach_AntecedentesDiagnosticos)
		Me._COMPARATIVAs = New EntitySet(Of COMPARATIVA)(AddressOf Me.attach_COMPARATIVAs, AddressOf Me.detach_COMPARATIVAs)
		Me._LMUTUAs = New EntitySet(Of LMUTUA)(AddressOf Me.attach_LMUTUAs, AddressOf Me.detach_LMUTUAs)
		Me._LINEASALARMAs = New EntitySet(Of LINEASALARMA)(AddressOf Me.attach_LINEASALARMAs, AddressOf Me.detach_LINEASALARMAs)
		Me._INFORME_MEDICOs = New EntitySet(Of INFORME_MEDICO)(AddressOf Me.attach_INFORME_MEDICOs, AddressOf Me.detach_INFORME_MEDICOs)
		Me._INFORMACIONPRIMARIAs = New EntitySet(Of INFORMACIONPRIMARIA)(AddressOf Me.attach_INFORMACIONPRIMARIAs, AddressOf Me.detach_INFORMACIONPRIMARIAs)
		Me._N_Tickets = New EntitySet(Of N_Ticket)(AddressOf Me.attach_N_Tickets, AddressOf Me.detach_N_Tickets)
		Me._HISTORIALEs = New EntitySet(Of HISTORIALE)(AddressOf Me.attach_HISTORIALEs, AddressOf Me.detach_HISTORIALEs)
		Me._RECETAs = New EntitySet(Of RECETA)(AddressOf Me.attach_RECETAs, AddressOf Me.detach_RECETAs)
		Me._N_Partes_Asistencias = New EntitySet(Of N_Partes_Asistencia)(AddressOf Me.attach_N_Partes_Asistencias, AddressOf Me.detach_N_Partes_Asistencias)
		Me._EntregasCuentas = New EntitySet(Of EntregasCuenta)(AddressOf Me.attach_EntregasCuentas, AddressOf Me.detach_EntregasCuentas)
		Me._RECIBOs = New EntitySet(Of RECIBO)(AddressOf Me.attach_RECIBOs, AddressOf Me.detach_RECIBOs)
		Me._Bonos = New EntitySet(Of Bonos)(AddressOf Me.attach_Bonos, AddressOf Me.detach_Bonos)
		Me._ANALITICAS = New EntitySet(Of ANALITICAS)(AddressOf Me.attach_ANALITICAS, AddressOf Me.detach_ANALITICAS)
		Me._AUDIOMETRIAS = New EntitySet(Of AUDIOMETRIAS)(AddressOf Me.attach_AUDIOMETRIAS, AddressOf Me.detach_AUDIOMETRIAS)
		Me._DERIVACIONES = New EntitySet(Of DERIVACIONES)(AddressOf Me.attach_DERIVACIONES, AddressOf Me.detach_DERIVACIONES)
		Me._HISTORIALES_REVISIONES = New EntitySet(Of HISTORIALES_REVISIONES)(AddressOf Me.attach_HISTORIALES_REVISIONES, AddressOf Me.detach_HISTORIALES_REVISIONES)
		Me._IMAGENES = New EntitySet(Of IMAGENES)(AddressOf Me.attach_IMAGENES, AddressOf Me.detach_IMAGENES)
		Me._PRESUPUESTOS = New EntitySet(Of PRESUPUESTOS)(AddressOf Me.attach_PRESUPUESTOS, AddressOf Me.detach_PRESUPUESTOS)
		Me._CITAs = New EntitySet(Of CITA)(AddressOf Me.attach_CITAs, AddressOf Me.detach_CITAs)
		Me._Descartar_Pacientes_Duplicados = New EntitySet(Of Descartar_Pacientes_Duplicado)(AddressOf Me.attach_Descartar_Pacientes_Duplicados, AddressOf Me.detach_Descartar_Pacientes_Duplicados)
		Me._Descartar_Pacientes_Duplicados1 = New EntitySet(Of Descartar_Pacientes_Duplicado)(AddressOf Me.attach_Descartar_Pacientes_Duplicados1, AddressOf Me.detach_Descartar_Pacientes_Duplicados1)
		Me._EMPRESA = CType(Nothing, EntityRef(Of EMPRESA))
		Me._FORMASPAGO = CType(Nothing, EntityRef(Of FORMASPAGO))
		Me._MUTUA = CType(Nothing, EntityRef(Of MUTUA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", DbType:="VarChar(25)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me.OnNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRE = value
				Me.SendPropertyChanged("NOMBRE")
				Me.OnNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_APELLIDO1", DbType:="VarChar(15)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property APELLIDO1() As String
		Get
			Return Me._APELLIDO1
		End Get
		Set
			If (String.Equals(Me._APELLIDO1, value) = false) Then
				Me.OnAPELLIDO1Changing(value)
				Me.SendPropertyChanging
				Me._APELLIDO1 = value
				Me.SendPropertyChanged("APELLIDO1")
				Me.OnAPELLIDO1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_APELLIDO2", DbType:="VarChar(15)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property APELLIDO2() As String
		Get
			Return Me._APELLIDO2
		End Get
		Set
			If (String.Equals(Me._APELLIDO2, value) = false) Then
				Me.OnAPELLIDO2Changing(value)
				Me.SendPropertyChanging
				Me._APELLIDO2 = value
				Me.SendPropertyChanged("APELLIDO2")
				Me.OnAPELLIDO2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOMICILIO", DbType:="VarChar(150)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DOMICILIO() As String
		Get
			Return Me._DOMICILIO
		End Get
		Set
			If (String.Equals(Me._DOMICILIO, value) = false) Then
				Me.OnDOMICILIOChanging(value)
				Me.SendPropertyChanging
				Me._DOMICILIO = value
				Me.SendPropertyChanged("DOMICILIO")
				Me.OnDOMICILIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLFNO", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TLFNO() As String
		Get
			Return Me._TLFNO
		End Get
		Set
			If (String.Equals(Me._TLFNO, value) = false) Then
				Me.OnTLFNOChanging(value)
				Me.SendPropertyChanging
				Me._TLFNO = value
				Me.SendPropertyChanged("TLFNO")
				Me.OnTLFNOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOVIL", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MOVIL() As String
		Get
			Return Me._MOVIL
		End Get
		Set
			If (String.Equals(Me._MOVIL, value) = false) Then
				Me.OnMOVILChanging(value)
				Me.SendPropertyChanging
				Me._MOVIL = value
				Me.SendPropertyChanged("MOVIL")
				Me.OnMOVILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROFESION", DbType:="VarChar(30)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PROFESION() As String
		Get
			Return Me._PROFESION
		End Get
		Set
			If (String.Equals(Me._PROFESION, value) = false) Then
				Me.OnPROFESIONChanging(value)
				Me.SendPropertyChanging
				Me._PROFESION = value
				Me.SendPropertyChanged("PROFESION")
				Me.OnPROFESIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCALIDAD", DbType:="VarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LOCALIDAD() As String
		Get
			Return Me._LOCALIDAD
		End Get
		Set
			If (String.Equals(Me._LOCALIDAD, value) = false) Then
				Me.OnLOCALIDADChanging(value)
				Me.SendPropertyChanging
				Me._LOCALIDAD = value
				Me.SendPropertyChanged("LOCALIDAD")
				Me.OnLOCALIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="VarChar(5)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFEMPRESA", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFEMPRESA() As System.Nullable(Of Integer)
		Get
			Return Me._REFEMPRESA
		End Get
		Set
			If (Me._REFEMPRESA.Equals(value) = false) Then
				If Me._EMPRESA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFEMPRESAChanging(value)
				Me.SendPropertyChanging
				Me._REFEMPRESA = value
				Me.SendPropertyChanged("REFEMPRESA")
				Me.OnREFEMPRESAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNI", DbType:="VarChar(8)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DNI() As String
		Get
			Return Me._DNI
		End Get
		Set
			If (String.Equals(Me._DNI, value) = false) Then
				Me.OnDNIChanging(value)
				Me.SendPropertyChanging
				Me._DNI = value
				Me.SendPropertyChanged("DNI")
				Me.OnDNIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHAN", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FECHAN() As System.Nullable(Of Date)
		Get
			Return Me._FECHAN
		End Get
		Set
			If (Me._FECHAN.Equals(value) = false) Then
				Me.OnFECHANChanging(value)
				Me.SendPropertyChanging
				Me._FECHAN = value
				Me.SendPropertyChanged("FECHAN")
				Me.OnFECHANChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OBSERVACIONES", DbType:="VarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OBSERVACIONES() As String
		Get
			Return Me._OBSERVACIONES
		End Get
		Set
			If (String.Equals(Me._OBSERVACIONES, value) = false) Then
				Me.OnOBSERVACIONESChanging(value)
				Me.SendPropertyChanging
				Me._OBSERVACIONES = value
				Me.SendPropertyChanged("OBSERVACIONES")
				Me.OnOBSERVACIONESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCIA", DbType:="VarChar(300)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PROVINCIA() As String
		Get
			Return Me._PROVINCIA
		End Get
		Set
			If (String.Equals(Me._PROVINCIA, value) = false) Then
				Me.OnPROVINCIAChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCIA = value
				Me.SendPropertyChanged("PROVINCIA")
				Me.OnPROVINCIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NSS", DbType:="VarChar(12)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NSS() As String
		Get
			Return Me._NSS
		End Get
		Set
			If (String.Equals(Me._NSS, value) = false) Then
				Me.OnNSSChanging(value)
				Me.SendPropertyChanging
				Me._NSS = value
				Me.SendPropertyChanged("NSS")
				Me.OnNSSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PUESTO", DbType:="VarChar(30)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PUESTO() As String
		Get
			Return Me._PUESTO
		End Get
		Set
			If (String.Equals(Me._PUESTO, value) = false) Then
				Me.OnPUESTOChanging(value)
				Me.SendPropertyChanging
				Me._PUESTO = value
				Me.SendPropertyChanged("PUESTO")
				Me.OnPUESTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REGIMEN", DbType:="VarChar(1)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REGIMEN() As System.Nullable(Of Char)
		Get
			Return Me._REGIMEN
		End Get
		Set
			If (Me._REGIMEN.Equals(value) = false) Then
				Me.OnREGIMENChanging(value)
				Me.SendPropertyChanging
				Me._REGIMEN = value
				Me.SendPropertyChanged("REGIMEN")
				Me.OnREGIMENChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TARJETASANITARIA", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TARJETASANITARIA() As String
		Get
			Return Me._TARJETASANITARIA
		End Get
		Set
			If (String.Equals(Me._TARJETASANITARIA, value) = false) Then
				Me.OnTARJETASANITARIAChanging(value)
				Me.SendPropertyChanging
				Me._TARJETASANITARIA = value
				Me.SendPropertyChanged("TARJETASANITARIA")
				Me.OnTARJETASANITARIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMUTUA", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFMUTUA() As System.Nullable(Of Integer)
		Get
			Return Me._REFMUTUA
		End Get
		Set
			If (Me._REFMUTUA.Equals(value) = false) Then
				If Me._MUTUA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMUTUAChanging(value)
				Me.SendPropertyChanging
				Me._REFMUTUA = value
				Me.SendPropertyChanged("REFMUTUA")
				Me.OnREFMUTUAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CPACIENTE", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CPACIENTE() As Integer
		Get
			Return Me._CPACIENTE
		End Get
		Set
			If ((Me._CPACIENTE = value)  _
						= false) Then
				Me.OnCPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._CPACIENTE = value
				Me.SendPropertyChanged("CPACIENTE")
				Me.OnCPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEXO", DbType:="VarChar(1)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SEXO() As System.Nullable(Of Char)
		Get
			Return Me._SEXO
		End Get
		Set
			If (Me._SEXO.Equals(value) = false) Then
				Me.OnSEXOChanging(value)
				Me.SendPropertyChanging
				Me._SEXO = value
				Me.SendPropertyChanged("SEXO")
				Me.OnSEXOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHAALTA", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FECHAALTA() As System.Nullable(Of Date)
		Get
			Return Me._FECHAALTA
		End Get
		Set
			If (Me._FECHAALTA.Equals(value) = false) Then
				Me.OnFECHAALTAChanging(value)
				Me.SendPropertyChanging
				Me._FECHAALTA = value
				Me.SendPropertyChanged("FECHAALTA")
				Me.OnFECHAALTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TUTOR", DbType:="VarChar(90)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TUTOR() As String
		Get
			Return Me._TUTOR
		End Get
		Set
			If (String.Equals(Me._TUTOR, value) = false) Then
				Me.OnTUTORChanging(value)
				Me.SendPropertyChanging
				Me._TUTOR = value
				Me.SendPropertyChanged("TUTOR")
				Me.OnTUTORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PAGOBANCO", DbType:="VarChar(1)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PAGOBANCO() As System.Nullable(Of Char)
		Get
			Return Me._PAGOBANCO
		End Get
		Set
			If (Me._PAGOBANCO.Equals(value) = false) Then
				Me.OnPAGOBANCOChanging(value)
				Me.SendPropertyChanging
				Me._PAGOBANCO = value
				Me.SendPropertyChanged("PAGOBANCO")
				Me.OnPAGOBANCOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ENTIDAD", DbType:="VarChar(4)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ENTIDAD() As String
		Get
			Return Me._ENTIDAD
		End Get
		Set
			If (String.Equals(Me._ENTIDAD, value) = false) Then
				Me.OnENTIDADChanging(value)
				Me.SendPropertyChanging
				Me._ENTIDAD = value
				Me.SendPropertyChanged("ENTIDAD")
				Me.OnENTIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OFICINA", DbType:="VarChar(4)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OFICINA() As String
		Get
			Return Me._OFICINA
		End Get
		Set
			If (String.Equals(Me._OFICINA, value) = false) Then
				Me.OnOFICINAChanging(value)
				Me.SendPropertyChanging
				Me._OFICINA = value
				Me.SendPropertyChanged("OFICINA")
				Me.OnOFICINAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DC", DbType:="VarChar(2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DC() As String
		Get
			Return Me._DC
		End Get
		Set
			If (String.Equals(Me._DC, value) = false) Then
				Me.OnDCChanging(value)
				Me.SendPropertyChanging
				Me._DC = value
				Me.SendPropertyChanged("DC")
				Me.OnDCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TITULAR", DbType:="VarChar(90)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TITULAR() As String
		Get
			Return Me._TITULAR
		End Get
		Set
			If (String.Equals(Me._TITULAR, value) = false) Then
				Me.OnTITULARChanging(value)
				Me.SendPropertyChanging
				Me._TITULAR = value
				Me.SendPropertyChanged("TITULAR")
				Me.OnTITULARChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUENTA", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CUENTA() As String
		Get
			Return Me._CUENTA
		End Get
		Set
			If (String.Equals(Me._CUENTA, value) = false) Then
				Me.OnCUENTAChanging(value)
				Me.SendPropertyChanging
				Me._CUENTA = value
				Me.SendPropertyChanged("CUENTA")
				Me.OnCUENTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEFUNCION", DbType:="VarChar(1)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DEFUNCION() As System.Nullable(Of Char)
		Get
			Return Me._DEFUNCION
		End Get
		Set
			If (Me._DEFUNCION.Equals(value) = false) Then
				Me.OnDEFUNCIONChanging(value)
				Me.SendPropertyChanging
				Me._DEFUNCION = value
				Me.SendPropertyChanged("DEFUNCION")
				Me.OnDEFUNCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NIE", DbType:="VarChar(15)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NIE() As String
		Get
			Return Me._NIE
		End Get
		Set
			If (String.Equals(Me._NIE, value) = false) Then
				Me.OnNIEChanging(value)
				Me.SendPropertyChanging
				Me._NIE = value
				Me.SendPropertyChanged("NIE")
				Me.OnNIEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PASAPORTE", DbType:="VarChar(25)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PASAPORTE() As String
		Get
			Return Me._PASAPORTE
		End Get
		Set
			If (String.Equals(Me._PASAPORTE, value) = false) Then
				Me.OnPASAPORTEChanging(value)
				Me.SendPropertyChanging
				Me._PASAPORTE = value
				Me.SendPropertyChanged("PASAPORTE")
				Me.OnPASAPORTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPAIS", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFPAIS() As Integer
		Get
			Return Me._REFPAIS
		End Get
		Set
			If ((Me._REFPAIS = value)  _
						= false) Then
				Me.OnREFPAISChanging(value)
				Me.SendPropertyChanging
				Me._REFPAIS = value
				Me.SendPropertyChanged("REFPAIS")
				Me.OnREFPAISChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOTO", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FOTO() As System.Data.Linq.Binary
		Get
			Return Me._FOTO
		End Get
		Set
			If (Object.Equals(Me._FOTO, value) = false) Then
				Me.OnFOTOChanging(value)
				Me.SendPropertyChanging
				Me._FOTO = value
				Me.SendPropertyChanged("FOTO")
				Me.OnFOTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOTOGRAFIA", DbType:="VarChar(150)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FOTOGRAFIA() As String
		Get
			Return Me._FOTOGRAFIA
		End Get
		Set
			If (String.Equals(Me._FOTOGRAFIA, value) = false) Then
				Me.OnFOTOGRAFIAChanging(value)
				Me.SendPropertyChanging
				Me._FOTOGRAFIA = value
				Me.SendPropertyChanged("FOTOGRAFIA")
				Me.OnFOTOGRAFIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SOCIO", DbType:="VarChar(1)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SOCIO() As System.Nullable(Of Char)
		Get
			Return Me._SOCIO
		End Get
		Set
			If (Me._SOCIO.Equals(value) = false) Then
				Me.OnSOCIOChanging(value)
				Me.SendPropertyChanging
				Me._SOCIO = value
				Me.SendPropertyChanged("SOCIO")
				Me.OnSOCIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVO", DbType:="VarChar(1)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ACTIVO() As System.Nullable(Of Char)
		Get
			Return Me._ACTIVO
		End Get
		Set
			If (Me._ACTIVO.Equals(value) = false) Then
				Me.OnACTIVOChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVO = value
				Me.SendPropertyChanged("ACTIVO")
				Me.OnACTIVOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFFORMAPAGO", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFFORMAPAGO() As String
		Get
			Return Me._REFFORMAPAGO
		End Get
		Set
			If (String.Equals(Me._REFFORMAPAGO, value) = false) Then
				If Me._FORMASPAGO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFFORMAPAGOChanging(value)
				Me.SendPropertyChanging
				Me._REFFORMAPAGO = value
				Me.SendPropertyChanged("REFFORMAPAGO")
				Me.OnREFFORMAPAGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHABAJA", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FECHABAJA() As System.Nullable(Of Date)
		Get
			Return Me._FECHABAJA
		End Get
		Set
			If (Me._FECHABAJA.Equals(value) = false) Then
				Me.OnFECHABAJAChanging(value)
				Me.SendPropertyChanging
				Me._FECHABAJA = value
				Me.SendPropertyChanged("FECHABAJA")
				Me.OnFECHABAJAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONOCIO", DbType:="VarChar(250)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CONOCIO() As String
		Get
			Return Me._CONOCIO
		End Get
		Set
			If (String.Equals(Me._CONOCIO, value) = false) Then
				Me.OnCONOCIOChanging(value)
				Me.SendPropertyChanging
				Me._CONOCIO = value
				Me.SendPropertyChanged("CONOCIO")
				Me.OnCONOCIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WEB", DbType:="VarChar(250) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property WEB() As String
		Get
			Return Me._WEB
		End Get
		Set
			If (String.Equals(Me._WEB, value) = false) Then
				Me.OnWEBChanging(value)
				Me.SendPropertyChanging
				Me._WEB = value
				Me.SendPropertyChanged("WEB")
				Me.OnWEBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL", DbType:="VarChar(250) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EMAIL() As String
		Get
			Return Me._EMAIL
		End Get
		Set
			If (String.Equals(Me._EMAIL, value) = false) Then
				Me.OnEMAILChanging(value)
				Me.SendPropertyChanging
				Me._EMAIL = value
				Me.SendPropertyChanged("EMAIL")
				Me.OnEMAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGOPROPIO", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CODIGOPROPIO() As String
		Get
			Return Me._CODIGOPROPIO
		End Get
		Set
			If (String.Equals(Me._CODIGOPROPIO, value) = false) Then
				Me.OnCODIGOPROPIOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGOPROPIO = value
				Me.SendPropertyChanged("CODIGOPROPIO")
				Me.OnCODIGOPROPIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BENEFICIARIOCODIGOSOCIO", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BENEFICIARIOCODIGOSOCIO() As Integer
		Get
			Return Me._BENEFICIARIOCODIGOSOCIO
		End Get
		Set
			If ((Me._BENEFICIARIOCODIGOSOCIO = value)  _
						= false) Then
				Me.OnBENEFICIARIOCODIGOSOCIOChanging(value)
				Me.SendPropertyChanging
				Me._BENEFICIARIOCODIGOSOCIO = value
				Me.SendPropertyChanged("BENEFICIARIOCODIGOSOCIO")
				Me.OnBENEFICIARIOCODIGOSOCIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BENEFICIARIOPARENTESCO", DbType:="VarChar(150) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BENEFICIARIOPARENTESCO() As String
		Get
			Return Me._BENEFICIARIOPARENTESCO
		End Get
		Set
			If (String.Equals(Me._BENEFICIARIOPARENTESCO, value) = false) Then
				Me.OnBENEFICIARIOPARENTESCOChanging(value)
				Me.SendPropertyChanging
				Me._BENEFICIARIOPARENTESCO = value
				Me.SendPropertyChanged("BENEFICIARIOPARENTESCO")
				Me.OnBENEFICIARIOPARENTESCOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Eliminado", DbType:="Bit")>  _
	Public Property Eliminado() As System.Nullable(Of Boolean)
		Get
			Return Me._Eliminado
		End Get
		Set
			If (Me._Eliminado.Equals(value) = false) Then
				Me.OnEliminadoChanging(value)
				Me.SendPropertyChanging
				Me._Eliminado = value
				Me.SendPropertyChanged("Eliminado")
				Me.OnEliminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SOCIOVALIDOHASTA", DbType:="DATE", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SOCIOVALIDOHASTA() As System.Nullable(Of Date)
		Get
			Return Me._SOCIOVALIDOHASTA
		End Get
		Set
			If (Me._SOCIOVALIDOHASTA.Equals(value) = false) Then
				Me.OnSOCIOVALIDOHASTAChanging(value)
				Me.SendPropertyChanging
				Me._SOCIOVALIDOHASTA = value
				Me.SendPropertyChanged("SOCIOVALIDOHASTA")
				Me.OnSOCIOVALIDOHASTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_FACTURA", Storage:="_FACTURAs", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property FACTURAs() As EntitySet(Of FACTURA)
		Get
			Return Me._FACTURAs
		End Get
		Set
			Me._FACTURAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_ContactosPaciente", Storage:="_ContactosPacientes", ThisKey:="CPACIENTE", OtherKey:="CPaciente")>  _
	Public Property ContactosPacientes() As EntitySet(Of ContactosPaciente)
		Get
			Return Me._ContactosPacientes
		End Get
		Set
			Me._ContactosPacientes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_Asociado", Storage:="_Asociados", ThisKey:="CPACIENTE", OtherKey:="IDPacienteBeneficiario")>  _
	Public Property Asociados() As EntitySet(Of Asociado)
		Get
			Return Me._Asociados
		End Get
		Set
			Me._Asociados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_Asociado1", Storage:="_Asociados1", ThisKey:="CPACIENTE", OtherKey:="IDPacienteOrigen")>  _
	Public Property Asociados1() As EntitySet(Of Asociado)
		Get
			Return Me._Asociados1
		End Get
		Set
			Me._Asociados1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_PagosPaciente", Storage:="_PagosPacientes", ThisKey:="CPACIENTE", OtherKey:="IDPaciente")>  _
	Public Property PagosPacientes() As EntitySet(Of PagosPaciente)
		Get
			Return Me._PagosPacientes
		End Get
		Set
			Me._PagosPacientes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_d_Odontograma", Storage:="_d_Odontogramas", ThisKey:="CPACIENTE", OtherKey:="IDPaciente")>  _
	Public Property d_Odontogramas() As EntitySet(Of d_Odontograma)
		Get
			Return Me._d_Odontogramas
		End Get
		Set
			Me._d_Odontogramas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_FICHERO", Storage:="_FICHEROs", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property FICHEROs() As EntitySet(Of FICHERO)
		Get
			Return Me._FICHEROs
		End Get
		Set
			Me._FICHEROs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_LEMPRESA", Storage:="_LEMPRESAs", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property LEMPRESAs() As EntitySet(Of LEMPRESA)
		Get
			Return Me._LEMPRESAs
		End Get
		Set
			Me._LEMPRESAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_N_Factura", Storage:="_N_Facturas", ThisKey:="CPACIENTE", OtherKey:="ID_Cliente")>  _
	Public Property N_Facturas() As EntitySet(Of N_Factura)
		Get
			Return Me._N_Facturas
		End Get
		Set
			Me._N_Facturas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_Comunicacion", Storage:="_Comunicacions", ThisKey:="CPACIENTE", OtherKey:="ID_PacienteDestino")>  _
	Public Property Comunicacions() As EntitySet(Of Comunicacion)
		Get
			Return Me._Comunicacions
		End Get
		Set
			Me._Comunicacions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_N_Proceso", Storage:="_N_Procesos", ThisKey:="CPACIENTE", OtherKey:="ID_Paciente")>  _
	Public Property N_Procesos() As EntitySet(Of N_Proceso)
		Get
			Return Me._N_Procesos
		End Get
		Set
			Me._N_Procesos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_AntecedentesDiagnostico", Storage:="_AntecedentesDiagnosticos", ThisKey:="CPACIENTE", OtherKey:="CPACIENTE")>  _
	Public Property AntecedentesDiagnosticos() As EntitySet(Of AntecedentesDiagnostico)
		Get
			Return Me._AntecedentesDiagnosticos
		End Get
		Set
			Me._AntecedentesDiagnosticos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_COMPARATIVA", Storage:="_COMPARATIVAs", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property COMPARATIVAs() As EntitySet(Of COMPARATIVA)
		Get
			Return Me._COMPARATIVAs
		End Get
		Set
			Me._COMPARATIVAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_LMUTUA", Storage:="_LMUTUAs", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property LMUTUAs() As EntitySet(Of LMUTUA)
		Get
			Return Me._LMUTUAs
		End Get
		Set
			Me._LMUTUAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_LINEASALARMA", Storage:="_LINEASALARMAs", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property LINEASALARMAs() As EntitySet(Of LINEASALARMA)
		Get
			Return Me._LINEASALARMAs
		End Get
		Set
			Me._LINEASALARMAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_INFORME_MEDICO", Storage:="_INFORME_MEDICOs", ThisKey:="CPACIENTE", OtherKey:="RefPaciente")>  _
	Public Property INFORME_MEDICOs() As EntitySet(Of INFORME_MEDICO)
		Get
			Return Me._INFORME_MEDICOs
		End Get
		Set
			Me._INFORME_MEDICOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_INFORMACIONPRIMARIA", Storage:="_INFORMACIONPRIMARIAs", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property INFORMACIONPRIMARIAs() As EntitySet(Of INFORMACIONPRIMARIA)
		Get
			Return Me._INFORMACIONPRIMARIAs
		End Get
		Set
			Me._INFORMACIONPRIMARIAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_N_Ticket", Storage:="_N_Tickets", ThisKey:="CPACIENTE", OtherKey:="ID_Cliente")>  _
	Public Property N_Tickets() As EntitySet(Of N_Ticket)
		Get
			Return Me._N_Tickets
		End Get
		Set
			Me._N_Tickets.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_HISTORIALE", Storage:="_HISTORIALEs", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property HISTORIALEs() As EntitySet(Of HISTORIALE)
		Get
			Return Me._HISTORIALEs
		End Get
		Set
			Me._HISTORIALEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_RECETA", Storage:="_RECETAs", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property RECETAs() As EntitySet(Of RECETA)
		Get
			Return Me._RECETAs
		End Get
		Set
			Me._RECETAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_N_Partes_Asistencia", Storage:="_N_Partes_Asistencias", ThisKey:="CPACIENTE", OtherKey:="ID_Paciente")>  _
	Public Property N_Partes_Asistencias() As EntitySet(Of N_Partes_Asistencia)
		Get
			Return Me._N_Partes_Asistencias
		End Get
		Set
			Me._N_Partes_Asistencias.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_EntregasCuenta", Storage:="_EntregasCuentas", ThisKey:="CPACIENTE", OtherKey:="IDPaciente")>  _
	Public Property EntregasCuentas() As EntitySet(Of EntregasCuenta)
		Get
			Return Me._EntregasCuentas
		End Get
		Set
			Me._EntregasCuentas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_RECIBO", Storage:="_RECIBOs", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property RECIBOs() As EntitySet(Of RECIBO)
		Get
			Return Me._RECIBOs
		End Get
		Set
			Me._RECIBOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_Bonos", Storage:="_Bonos", ThisKey:="CPACIENTE", OtherKey:="cpaciente")>  _
	Public Property Bonos() As EntitySet(Of Bonos)
		Get
			Return Me._Bonos
		End Get
		Set
			Me._Bonos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_ANALITICAS", Storage:="_ANALITICAS", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property ANALITICAS() As EntitySet(Of ANALITICAS)
		Get
			Return Me._ANALITICAS
		End Get
		Set
			Me._ANALITICAS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_AUDIOMETRIAS", Storage:="_AUDIOMETRIAS", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property AUDIOMETRIAS() As EntitySet(Of AUDIOMETRIAS)
		Get
			Return Me._AUDIOMETRIAS
		End Get
		Set
			Me._AUDIOMETRIAS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_DERIVACIONES", Storage:="_DERIVACIONES", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property DERIVACIONES() As EntitySet(Of DERIVACIONES)
		Get
			Return Me._DERIVACIONES
		End Get
		Set
			Me._DERIVACIONES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_HISTORIALES_REVISIONES", Storage:="_HISTORIALES_REVISIONES", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property HISTORIALES_REVISIONES() As EntitySet(Of HISTORIALES_REVISIONES)
		Get
			Return Me._HISTORIALES_REVISIONES
		End Get
		Set
			Me._HISTORIALES_REVISIONES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_IMAGENES", Storage:="_IMAGENES", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property IMAGENES() As EntitySet(Of IMAGENES)
		Get
			Return Me._IMAGENES
		End Get
		Set
			Me._IMAGENES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_PRESUPUESTOS", Storage:="_PRESUPUESTOS", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property PRESUPUESTOS() As EntitySet(Of PRESUPUESTOS)
		Get
			Return Me._PRESUPUESTOS
		End Get
		Set
			Me._PRESUPUESTOS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_CITA", Storage:="_CITAs", ThisKey:="CPACIENTE", OtherKey:="REFPACIENTE")>  _
	Public Property CITAs() As EntitySet(Of CITA)
		Get
			Return Me._CITAs
		End Get
		Set
			Me._CITAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_Descartar_Pacientes_Duplicado", Storage:="_Descartar_Pacientes_Duplicados", ThisKey:="CPACIENTE", OtherKey:="Id_Paciente_Descartado")>  _
	Public Property Descartar_Pacientes_Duplicados() As EntitySet(Of Descartar_Pacientes_Duplicado)
		Get
			Return Me._Descartar_Pacientes_Duplicados
		End Get
		Set
			Me._Descartar_Pacientes_Duplicados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_Descartar_Pacientes_Duplicado1", Storage:="_Descartar_Pacientes_Duplicados1", ThisKey:="CPACIENTE", OtherKey:="Id_Paciente_Origen")>  _
	Public Property Descartar_Pacientes_Duplicados1() As EntitySet(Of Descartar_Pacientes_Duplicado)
		Get
			Return Me._Descartar_Pacientes_Duplicados1
		End Get
		Set
			Me._Descartar_Pacientes_Duplicados1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_PACIENTE", Storage:="_EMPRESA", ThisKey:="REFEMPRESA", OtherKey:="CEMPRESA", IsForeignKey:=true)>  _
	Public Property EMPRESA() As EMPRESA
		Get
			Return Me._EMPRESA.Entity
		End Get
		Set
			Dim previousValue As EMPRESA = Me._EMPRESA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EMPRESA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EMPRESA.Entity = Nothing
					previousValue.PACIENTEs.Remove(Me)
				End If
				Me._EMPRESA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PACIENTEs.Add(Me)
					Me._REFEMPRESA = value.CEMPRESA
				Else
					Me._REFEMPRESA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("EMPRESA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_PACIENTE", Storage:="_FORMASPAGO", ThisKey:="REFFORMAPAGO", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property FORMASPAGO() As FORMASPAGO
		Get
			Return Me._FORMASPAGO.Entity
		End Get
		Set
			Dim previousValue As FORMASPAGO = Me._FORMASPAGO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FORMASPAGO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FORMASPAGO.Entity = Nothing
					previousValue.PACIENTEs.Remove(Me)
				End If
				Me._FORMASPAGO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PACIENTEs.Add(Me)
					Me._REFFORMAPAGO = value.CODIGO
				Else
					Me._REFFORMAPAGO = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("FORMASPAGO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MUTUA_PACIENTE", Storage:="_MUTUA", ThisKey:="REFMUTUA", OtherKey:="CMUTUA", IsForeignKey:=true)>  _
	Public Property MUTUA() As MUTUA
		Get
			Return Me._MUTUA.Entity
		End Get
		Set
			Dim previousValue As MUTUA = Me._MUTUA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MUTUA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MUTUA.Entity = Nothing
					previousValue.PACIENTEs.Remove(Me)
				End If
				Me._MUTUA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PACIENTEs.Add(Me)
					Me._REFMUTUA = value.CMUTUA
				Else
					Me._REFMUTUA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MUTUA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FACTURAs(ByVal entity As FACTURA)
		Me.SendPropertyChanging
		entity.PACIENTE1 = Me
	End Sub
	
	Private Sub detach_FACTURAs(ByVal entity As FACTURA)
		Me.SendPropertyChanging
		entity.PACIENTE1 = Nothing
	End Sub
	
	Private Sub attach_ContactosPacientes(ByVal entity As ContactosPaciente)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_ContactosPacientes(ByVal entity As ContactosPaciente)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_Asociados(ByVal entity As Asociado)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_Asociados(ByVal entity As Asociado)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_Asociados1(ByVal entity As Asociado)
		Me.SendPropertyChanging
		entity.PACIENTE1 = Me
	End Sub
	
	Private Sub detach_Asociados1(ByVal entity As Asociado)
		Me.SendPropertyChanging
		entity.PACIENTE1 = Nothing
	End Sub
	
	Private Sub attach_PagosPacientes(ByVal entity As PagosPaciente)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_PagosPacientes(ByVal entity As PagosPaciente)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_d_Odontogramas(ByVal entity As d_Odontograma)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_d_Odontogramas(ByVal entity As d_Odontograma)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_FICHEROs(ByVal entity As FICHERO)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_FICHEROs(ByVal entity As FICHERO)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_LEMPRESAs(ByVal entity As LEMPRESA)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_LEMPRESAs(ByVal entity As LEMPRESA)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_N_Facturas(ByVal entity As N_Factura)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_N_Facturas(ByVal entity As N_Factura)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_Comunicacions(ByVal entity As Comunicacion)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_Comunicacions(ByVal entity As Comunicacion)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_N_Procesos(ByVal entity As N_Proceso)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_N_Procesos(ByVal entity As N_Proceso)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_AntecedentesDiagnosticos(ByVal entity As AntecedentesDiagnostico)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_AntecedentesDiagnosticos(ByVal entity As AntecedentesDiagnostico)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_COMPARATIVAs(ByVal entity As COMPARATIVA)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_COMPARATIVAs(ByVal entity As COMPARATIVA)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_LMUTUAs(ByVal entity As LMUTUA)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_LMUTUAs(ByVal entity As LMUTUA)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_LINEASALARMAs(ByVal entity As LINEASALARMA)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_LINEASALARMAs(ByVal entity As LINEASALARMA)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_INFORME_MEDICOs(ByVal entity As INFORME_MEDICO)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_INFORME_MEDICOs(ByVal entity As INFORME_MEDICO)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_INFORMACIONPRIMARIAs(ByVal entity As INFORMACIONPRIMARIA)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_INFORMACIONPRIMARIAs(ByVal entity As INFORMACIONPRIMARIA)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_N_Tickets(ByVal entity As N_Ticket)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_N_Tickets(ByVal entity As N_Ticket)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_HISTORIALEs(ByVal entity As HISTORIALE)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_HISTORIALEs(ByVal entity As HISTORIALE)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_RECETAs(ByVal entity As RECETA)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_RECETAs(ByVal entity As RECETA)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_N_Partes_Asistencias(ByVal entity As N_Partes_Asistencia)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_N_Partes_Asistencias(ByVal entity As N_Partes_Asistencia)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_EntregasCuentas(ByVal entity As EntregasCuenta)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_EntregasCuentas(ByVal entity As EntregasCuenta)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_RECIBOs(ByVal entity As RECIBO)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_RECIBOs(ByVal entity As RECIBO)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_Bonos(ByVal entity As Bonos)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_Bonos(ByVal entity As Bonos)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_ANALITICAS(ByVal entity As ANALITICAS)
		Me.SendPropertyChanging
		entity.PACIENTE1 = Me
	End Sub
	
	Private Sub detach_ANALITICAS(ByVal entity As ANALITICAS)
		Me.SendPropertyChanging
		entity.PACIENTE1 = Nothing
	End Sub
	
	Private Sub attach_AUDIOMETRIAS(ByVal entity As AUDIOMETRIAS)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_AUDIOMETRIAS(ByVal entity As AUDIOMETRIAS)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_DERIVACIONES(ByVal entity As DERIVACIONES)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_DERIVACIONES(ByVal entity As DERIVACIONES)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_HISTORIALES_REVISIONES(ByVal entity As HISTORIALES_REVISIONES)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_HISTORIALES_REVISIONES(ByVal entity As HISTORIALES_REVISIONES)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_IMAGENES(ByVal entity As IMAGENES)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_IMAGENES(ByVal entity As IMAGENES)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_PRESUPUESTOS(ByVal entity As PRESUPUESTOS)
		Me.SendPropertyChanging
		entity.PACIENTE1 = Me
	End Sub
	
	Private Sub detach_PRESUPUESTOS(ByVal entity As PRESUPUESTOS)
		Me.SendPropertyChanging
		entity.PACIENTE1 = Nothing
	End Sub
	
	Private Sub attach_CITAs(ByVal entity As CITA)
		Me.SendPropertyChanging
		entity.PACIENTE1 = Me
	End Sub
	
	Private Sub detach_CITAs(ByVal entity As CITA)
		Me.SendPropertyChanging
		entity.PACIENTE1 = Nothing
	End Sub
	
	Private Sub attach_Descartar_Pacientes_Duplicados(ByVal entity As Descartar_Pacientes_Duplicado)
		Me.SendPropertyChanging
		entity.PACIENTE = Me
	End Sub
	
	Private Sub detach_Descartar_Pacientes_Duplicados(ByVal entity As Descartar_Pacientes_Duplicado)
		Me.SendPropertyChanging
		entity.PACIENTE = Nothing
	End Sub
	
	Private Sub attach_Descartar_Pacientes_Duplicados1(ByVal entity As Descartar_Pacientes_Duplicado)
		Me.SendPropertyChanging
		entity.PACIENTE1 = Me
	End Sub
	
	Private Sub detach_Descartar_Pacientes_Duplicados1(ByVal entity As Descartar_Pacientes_Duplicado)
		Me.SendPropertyChanging
		entity.PACIENTE1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FORMASPAGO")>  _
Partial Public Class FORMASPAGO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As String
	
	Private _DESCRIPCION As String
	
	Private _PACIENTEs As EntitySet(Of PACIENTE)
	
	Private _FACTURAs As EntitySet(Of FACTURA)
	
	Private _PagosPacientes As EntitySet(Of PagosPaciente)
	
	Private _GASTOs As EntitySet(Of GASTO)
	
	Private _N_Facturas As EntitySet(Of N_Factura)
	
	Private _Liquidacion_Medicos As EntitySet(Of Liquidacion_Medico)
	
	Private _N_PedidosProveedors As EntitySet(Of N_PedidosProveedor)
	
	Private _N_Proveedors As EntitySet(Of N_Proveedor)
	
	Private _N_Tickets As EntitySet(Of N_Ticket)
	
	Private _EntregasCuentas As EntitySet(Of EntregasCuenta)
	
	Private _RECIBOs As EntitySet(Of RECIBO)
	
	Private _CITAs As EntitySet(Of CITA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As String)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PACIENTEs = New EntitySet(Of PACIENTE)(AddressOf Me.attach_PACIENTEs, AddressOf Me.detach_PACIENTEs)
		Me._FACTURAs = New EntitySet(Of FACTURA)(AddressOf Me.attach_FACTURAs, AddressOf Me.detach_FACTURAs)
		Me._PagosPacientes = New EntitySet(Of PagosPaciente)(AddressOf Me.attach_PagosPacientes, AddressOf Me.detach_PagosPacientes)
		Me._GASTOs = New EntitySet(Of GASTO)(AddressOf Me.attach_GASTOs, AddressOf Me.detach_GASTOs)
		Me._N_Facturas = New EntitySet(Of N_Factura)(AddressOf Me.attach_N_Facturas, AddressOf Me.detach_N_Facturas)
		Me._Liquidacion_Medicos = New EntitySet(Of Liquidacion_Medico)(AddressOf Me.attach_Liquidacion_Medicos, AddressOf Me.detach_Liquidacion_Medicos)
		Me._N_PedidosProveedors = New EntitySet(Of N_PedidosProveedor)(AddressOf Me.attach_N_PedidosProveedors, AddressOf Me.detach_N_PedidosProveedors)
		Me._N_Proveedors = New EntitySet(Of N_Proveedor)(AddressOf Me.attach_N_Proveedors, AddressOf Me.detach_N_Proveedors)
		Me._N_Tickets = New EntitySet(Of N_Ticket)(AddressOf Me.attach_N_Tickets, AddressOf Me.detach_N_Tickets)
		Me._EntregasCuentas = New EntitySet(Of EntregasCuenta)(AddressOf Me.attach_EntregasCuentas, AddressOf Me.detach_EntregasCuentas)
		Me._RECIBOs = New EntitySet(Of RECIBO)(AddressOf Me.attach_RECIBOs, AddressOf Me.detach_RECIBOs)
		Me._CITAs = New EntitySet(Of CITA)(AddressOf Me.attach_CITAs, AddressOf Me.detach_CITAs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODIGO() As String
		Get
			Return Me._CODIGO
		End Get
		Set
			If (String.Equals(Me._CODIGO, value) = false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(90) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_PACIENTE", Storage:="_PACIENTEs", ThisKey:="CODIGO", OtherKey:="REFFORMAPAGO")>  _
	Public Property PACIENTEs() As EntitySet(Of PACIENTE)
		Get
			Return Me._PACIENTEs
		End Get
		Set
			Me._PACIENTEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_FACTURA", Storage:="_FACTURAs", ThisKey:="CODIGO", OtherKey:="REFFORMAPAGO")>  _
	Public Property FACTURAs() As EntitySet(Of FACTURA)
		Get
			Return Me._FACTURAs
		End Get
		Set
			Me._FACTURAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_PagosPaciente", Storage:="_PagosPacientes", ThisKey:="CODIGO", OtherKey:="IDFormaPago")>  _
	Public Property PagosPacientes() As EntitySet(Of PagosPaciente)
		Get
			Return Me._PagosPacientes
		End Get
		Set
			Me._PagosPacientes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_GASTO", Storage:="_GASTOs", ThisKey:="CODIGO", OtherKey:="REFFORMAPAGO")>  _
	Public Property GASTOs() As EntitySet(Of GASTO)
		Get
			Return Me._GASTOs
		End Get
		Set
			Me._GASTOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_N_Factura", Storage:="_N_Facturas", ThisKey:="CODIGO", OtherKey:="ID_FormaPago")>  _
	Public Property N_Facturas() As EntitySet(Of N_Factura)
		Get
			Return Me._N_Facturas
		End Get
		Set
			Me._N_Facturas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_Liquidacion_Medico", Storage:="_Liquidacion_Medicos", ThisKey:="CODIGO", OtherKey:="ID_FormaPago")>  _
	Public Property Liquidacion_Medicos() As EntitySet(Of Liquidacion_Medico)
		Get
			Return Me._Liquidacion_Medicos
		End Get
		Set
			Me._Liquidacion_Medicos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_N_PedidosProveedor", Storage:="_N_PedidosProveedors", ThisKey:="CODIGO", OtherKey:="ID_FormaPago")>  _
	Public Property N_PedidosProveedors() As EntitySet(Of N_PedidosProveedor)
		Get
			Return Me._N_PedidosProveedors
		End Get
		Set
			Me._N_PedidosProveedors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_N_Proveedor", Storage:="_N_Proveedors", ThisKey:="CODIGO", OtherKey:="ID_FormaPago")>  _
	Public Property N_Proveedors() As EntitySet(Of N_Proveedor)
		Get
			Return Me._N_Proveedors
		End Get
		Set
			Me._N_Proveedors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_N_Ticket", Storage:="_N_Tickets", ThisKey:="CODIGO", OtherKey:="ID_FormaPago")>  _
	Public Property N_Tickets() As EntitySet(Of N_Ticket)
		Get
			Return Me._N_Tickets
		End Get
		Set
			Me._N_Tickets.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_EntregasCuenta", Storage:="_EntregasCuentas", ThisKey:="CODIGO", OtherKey:="IDFormaPago")>  _
	Public Property EntregasCuentas() As EntitySet(Of EntregasCuenta)
		Get
			Return Me._EntregasCuentas
		End Get
		Set
			Me._EntregasCuentas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_RECIBO", Storage:="_RECIBOs", ThisKey:="CODIGO", OtherKey:="REFFORMAPAGO")>  _
	Public Property RECIBOs() As EntitySet(Of RECIBO)
		Get
			Return Me._RECIBOs
		End Get
		Set
			Me._RECIBOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_CITA", Storage:="_CITAs", ThisKey:="CODIGO", OtherKey:="REFFORMAPAGO")>  _
	Public Property CITAs() As EntitySet(Of CITA)
		Get
			Return Me._CITAs
		End Get
		Set
			Me._CITAs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PACIENTEs(ByVal entity As PACIENTE)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Me
	End Sub
	
	Private Sub detach_PACIENTEs(ByVal entity As PACIENTE)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Nothing
	End Sub
	
	Private Sub attach_FACTURAs(ByVal entity As FACTURA)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Me
	End Sub
	
	Private Sub detach_FACTURAs(ByVal entity As FACTURA)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Nothing
	End Sub
	
	Private Sub attach_PagosPacientes(ByVal entity As PagosPaciente)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Me
	End Sub
	
	Private Sub detach_PagosPacientes(ByVal entity As PagosPaciente)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Nothing
	End Sub
	
	Private Sub attach_GASTOs(ByVal entity As GASTO)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Me
	End Sub
	
	Private Sub detach_GASTOs(ByVal entity As GASTO)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Nothing
	End Sub
	
	Private Sub attach_N_Facturas(ByVal entity As N_Factura)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Me
	End Sub
	
	Private Sub detach_N_Facturas(ByVal entity As N_Factura)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Nothing
	End Sub
	
	Private Sub attach_Liquidacion_Medicos(ByVal entity As Liquidacion_Medico)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Me
	End Sub
	
	Private Sub detach_Liquidacion_Medicos(ByVal entity As Liquidacion_Medico)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Nothing
	End Sub
	
	Private Sub attach_N_PedidosProveedors(ByVal entity As N_PedidosProveedor)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Me
	End Sub
	
	Private Sub detach_N_PedidosProveedors(ByVal entity As N_PedidosProveedor)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Nothing
	End Sub
	
	Private Sub attach_N_Proveedors(ByVal entity As N_Proveedor)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Me
	End Sub
	
	Private Sub detach_N_Proveedors(ByVal entity As N_Proveedor)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Nothing
	End Sub
	
	Private Sub attach_N_Tickets(ByVal entity As N_Ticket)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Me
	End Sub
	
	Private Sub detach_N_Tickets(ByVal entity As N_Ticket)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Nothing
	End Sub
	
	Private Sub attach_EntregasCuentas(ByVal entity As EntregasCuenta)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Me
	End Sub
	
	Private Sub detach_EntregasCuentas(ByVal entity As EntregasCuenta)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Nothing
	End Sub
	
	Private Sub attach_RECIBOs(ByVal entity As RECIBO)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Me
	End Sub
	
	Private Sub detach_RECIBOs(ByVal entity As RECIBO)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Nothing
	End Sub
	
	Private Sub attach_CITAs(ByVal entity As CITA)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Me
	End Sub
	
	Private Sub detach_CITAs(ByVal entity As CITA)
		Me.SendPropertyChanging
		entity.FORMASPAGO = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EMPRESAS")>  _
Partial Public Class EMPRESA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NOMBRE As String
	
	Private _DIRECCION As String
	
	Private _POBLACION As String
	
	Private _PROVINCIA As String
	
	Private _CP As String
	
	Private _TLFNO1 As String
	
	Private _TLFNO2 As String
	
	Private _FAX As String
	
	Private _MAIL As String
	
	Private _WEB As String
	
	Private _PERSONACON As String
	
	Private _NOTAS As String
	
	Private _CNAE As String
	
	Private _ACTIVIDAD As String
	
	Private _CEMPRESA As Integer
	
	Private _REFMUTUA As System.Nullable(Of Integer)
	
	Private _CIF As String
	
	Private _NSS As String
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _ENTIDAD As String
	
	Private _OFICINA As String
	
	Private _DC As String
	
	Private _CUENTA As String
	
	Private _TITULAR As String
	
	Private _Eliminado As System.Nullable(Of Boolean)
	
	Private _PACIENTEs As EntitySet(Of PACIENTE)
	
	Private _FACTURAs As EntitySet(Of FACTURA)
	
	Private _LEMPRESAs As EntitySet(Of LEMPRESA)
	
	Private _N_Partes As EntitySet(Of N_Parte)
	
	Private _N_Procesos As EntitySet(Of N_Proceso)
	
	Private _N_Partes_Asistencias As EntitySet(Of N_Partes_Asistencia)
	
	Private _RECIBOs As EntitySet(Of RECIBO)
	
	Private _PRESUPUESTOS As EntitySet(Of PRESUPUESTOS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREChanged()
    End Sub
    Partial Private Sub OnDIRECCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDIRECCIONChanged()
    End Sub
    Partial Private Sub OnPOBLACIONChanging(value As String)
    End Sub
    Partial Private Sub OnPOBLACIONChanged()
    End Sub
    Partial Private Sub OnPROVINCIAChanging(value As String)
    End Sub
    Partial Private Sub OnPROVINCIAChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnTLFNO1Changing(value As String)
    End Sub
    Partial Private Sub OnTLFNO1Changed()
    End Sub
    Partial Private Sub OnTLFNO2Changing(value As String)
    End Sub
    Partial Private Sub OnTLFNO2Changed()
    End Sub
    Partial Private Sub OnFAXChanging(value As String)
    End Sub
    Partial Private Sub OnFAXChanged()
    End Sub
    Partial Private Sub OnMAILChanging(value As String)
    End Sub
    Partial Private Sub OnMAILChanged()
    End Sub
    Partial Private Sub OnWEBChanging(value As String)
    End Sub
    Partial Private Sub OnWEBChanged()
    End Sub
    Partial Private Sub OnPERSONACONChanging(value As String)
    End Sub
    Partial Private Sub OnPERSONACONChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    Partial Private Sub OnCNAEChanging(value As String)
    End Sub
    Partial Private Sub OnCNAEChanged()
    End Sub
    Partial Private Sub OnACTIVIDADChanging(value As String)
    End Sub
    Partial Private Sub OnACTIVIDADChanged()
    End Sub
    Partial Private Sub OnCEMPRESAChanging(value As Integer)
    End Sub
    Partial Private Sub OnCEMPRESAChanged()
    End Sub
    Partial Private Sub OnREFMUTUAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFMUTUAChanged()
    End Sub
    Partial Private Sub OnCIFChanging(value As String)
    End Sub
    Partial Private Sub OnCIFChanged()
    End Sub
    Partial Private Sub OnNSSChanging(value As String)
    End Sub
    Partial Private Sub OnNSSChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnENTIDADChanging(value As String)
    End Sub
    Partial Private Sub OnENTIDADChanged()
    End Sub
    Partial Private Sub OnOFICINAChanging(value As String)
    End Sub
    Partial Private Sub OnOFICINAChanged()
    End Sub
    Partial Private Sub OnDCChanging(value As String)
    End Sub
    Partial Private Sub OnDCChanged()
    End Sub
    Partial Private Sub OnCUENTAChanging(value As String)
    End Sub
    Partial Private Sub OnCUENTAChanged()
    End Sub
    Partial Private Sub OnTITULARChanging(value As String)
    End Sub
    Partial Private Sub OnTITULARChanged()
    End Sub
    Partial Private Sub OnEliminadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEliminadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PACIENTEs = New EntitySet(Of PACIENTE)(AddressOf Me.attach_PACIENTEs, AddressOf Me.detach_PACIENTEs)
		Me._FACTURAs = New EntitySet(Of FACTURA)(AddressOf Me.attach_FACTURAs, AddressOf Me.detach_FACTURAs)
		Me._LEMPRESAs = New EntitySet(Of LEMPRESA)(AddressOf Me.attach_LEMPRESAs, AddressOf Me.detach_LEMPRESAs)
		Me._N_Partes = New EntitySet(Of N_Parte)(AddressOf Me.attach_N_Partes, AddressOf Me.detach_N_Partes)
		Me._N_Procesos = New EntitySet(Of N_Proceso)(AddressOf Me.attach_N_Procesos, AddressOf Me.detach_N_Procesos)
		Me._N_Partes_Asistencias = New EntitySet(Of N_Partes_Asistencia)(AddressOf Me.attach_N_Partes_Asistencias, AddressOf Me.detach_N_Partes_Asistencias)
		Me._RECIBOs = New EntitySet(Of RECIBO)(AddressOf Me.attach_RECIBOs, AddressOf Me.detach_RECIBOs)
		Me._PRESUPUESTOS = New EntitySet(Of PRESUPUESTOS)(AddressOf Me.attach_PRESUPUESTOS, AddressOf Me.detach_PRESUPUESTOS)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", DbType:="VarChar(40)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me.OnNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRE = value
				Me.SendPropertyChanged("NOMBRE")
				Me.OnNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIRECCION", DbType:="VarChar(150)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DIRECCION() As String
		Get
			Return Me._DIRECCION
		End Get
		Set
			If (String.Equals(Me._DIRECCION, value) = false) Then
				Me.OnDIRECCIONChanging(value)
				Me.SendPropertyChanging
				Me._DIRECCION = value
				Me.SendPropertyChanged("DIRECCION")
				Me.OnDIRECCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POBLACION", DbType:="VarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property POBLACION() As String
		Get
			Return Me._POBLACION
		End Get
		Set
			If (String.Equals(Me._POBLACION, value) = false) Then
				Me.OnPOBLACIONChanging(value)
				Me.SendPropertyChanging
				Me._POBLACION = value
				Me.SendPropertyChanged("POBLACION")
				Me.OnPOBLACIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCIA", DbType:="VarChar(20)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PROVINCIA() As String
		Get
			Return Me._PROVINCIA
		End Get
		Set
			If (String.Equals(Me._PROVINCIA, value) = false) Then
				Me.OnPROVINCIAChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCIA = value
				Me.SendPropertyChanged("PROVINCIA")
				Me.OnPROVINCIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="VarChar(5)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLFNO1", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TLFNO1() As String
		Get
			Return Me._TLFNO1
		End Get
		Set
			If (String.Equals(Me._TLFNO1, value) = false) Then
				Me.OnTLFNO1Changing(value)
				Me.SendPropertyChanging
				Me._TLFNO1 = value
				Me.SendPropertyChanged("TLFNO1")
				Me.OnTLFNO1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLFNO2", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TLFNO2() As String
		Get
			Return Me._TLFNO2
		End Get
		Set
			If (String.Equals(Me._TLFNO2, value) = false) Then
				Me.OnTLFNO2Changing(value)
				Me.SendPropertyChanging
				Me._TLFNO2 = value
				Me.SendPropertyChanged("TLFNO2")
				Me.OnTLFNO2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAX", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FAX() As String
		Get
			Return Me._FAX
		End Get
		Set
			If (String.Equals(Me._FAX, value) = false) Then
				Me.OnFAXChanging(value)
				Me.SendPropertyChanging
				Me._FAX = value
				Me.SendPropertyChanged("FAX")
				Me.OnFAXChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAIL", DbType:="VarChar(40)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MAIL() As String
		Get
			Return Me._MAIL
		End Get
		Set
			If (String.Equals(Me._MAIL, value) = false) Then
				Me.OnMAILChanging(value)
				Me.SendPropertyChanging
				Me._MAIL = value
				Me.SendPropertyChanged("MAIL")
				Me.OnMAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WEB", DbType:="VarChar(40)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property WEB() As String
		Get
			Return Me._WEB
		End Get
		Set
			If (String.Equals(Me._WEB, value) = false) Then
				Me.OnWEBChanging(value)
				Me.SendPropertyChanging
				Me._WEB = value
				Me.SendPropertyChanged("WEB")
				Me.OnWEBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERSONACON", DbType:="VarChar(40)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PERSONACON() As String
		Get
			Return Me._PERSONACON
		End Get
		Set
			If (String.Equals(Me._PERSONACON, value) = false) Then
				Me.OnPERSONACONChanging(value)
				Me.SendPropertyChanging
				Me._PERSONACON = value
				Me.SendPropertyChanged("PERSONACON")
				Me.OnPERSONACONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="VarChar(150)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CNAE", DbType:="VarChar(5)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CNAE() As String
		Get
			Return Me._CNAE
		End Get
		Set
			If (String.Equals(Me._CNAE, value) = false) Then
				Me.OnCNAEChanging(value)
				Me.SendPropertyChanging
				Me._CNAE = value
				Me.SendPropertyChanged("CNAE")
				Me.OnCNAEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVIDAD", DbType:="VarChar(30)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ACTIVIDAD() As String
		Get
			Return Me._ACTIVIDAD
		End Get
		Set
			If (String.Equals(Me._ACTIVIDAD, value) = false) Then
				Me.OnACTIVIDADChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVIDAD = value
				Me.SendPropertyChanged("ACTIVIDAD")
				Me.OnACTIVIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CEMPRESA", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CEMPRESA() As Integer
		Get
			Return Me._CEMPRESA
		End Get
		Set
			If ((Me._CEMPRESA = value)  _
						= false) Then
				Me.OnCEMPRESAChanging(value)
				Me.SendPropertyChanging
				Me._CEMPRESA = value
				Me.SendPropertyChanged("CEMPRESA")
				Me.OnCEMPRESAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMUTUA", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFMUTUA() As System.Nullable(Of Integer)
		Get
			Return Me._REFMUTUA
		End Get
		Set
			If (Me._REFMUTUA.Equals(value) = false) Then
				Me.OnREFMUTUAChanging(value)
				Me.SendPropertyChanging
				Me._REFMUTUA = value
				Me.SendPropertyChanged("REFMUTUA")
				Me.OnREFMUTUAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIF", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CIF() As String
		Get
			Return Me._CIF
		End Get
		Set
			If (String.Equals(Me._CIF, value) = false) Then
				Me.OnCIFChanging(value)
				Me.SendPropertyChanging
				Me._CIF = value
				Me.SendPropertyChanged("CIF")
				Me.OnCIFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NSS", DbType:="VarChar(15)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NSS() As String
		Get
			Return Me._NSS
		End Get
		Set
			If (String.Equals(Me._NSS, value) = false) Then
				Me.OnNSSChanging(value)
				Me.SendPropertyChanging
				Me._NSS = value
				Me.SendPropertyChanged("NSS")
				Me.OnNSSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ENTIDAD", DbType:="VarChar(4)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ENTIDAD() As String
		Get
			Return Me._ENTIDAD
		End Get
		Set
			If (String.Equals(Me._ENTIDAD, value) = false) Then
				Me.OnENTIDADChanging(value)
				Me.SendPropertyChanging
				Me._ENTIDAD = value
				Me.SendPropertyChanged("ENTIDAD")
				Me.OnENTIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OFICINA", DbType:="VarChar(4)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OFICINA() As String
		Get
			Return Me._OFICINA
		End Get
		Set
			If (String.Equals(Me._OFICINA, value) = false) Then
				Me.OnOFICINAChanging(value)
				Me.SendPropertyChanging
				Me._OFICINA = value
				Me.SendPropertyChanged("OFICINA")
				Me.OnOFICINAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DC", DbType:="VarChar(2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DC() As String
		Get
			Return Me._DC
		End Get
		Set
			If (String.Equals(Me._DC, value) = false) Then
				Me.OnDCChanging(value)
				Me.SendPropertyChanging
				Me._DC = value
				Me.SendPropertyChanged("DC")
				Me.OnDCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUENTA", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CUENTA() As String
		Get
			Return Me._CUENTA
		End Get
		Set
			If (String.Equals(Me._CUENTA, value) = false) Then
				Me.OnCUENTAChanging(value)
				Me.SendPropertyChanging
				Me._CUENTA = value
				Me.SendPropertyChanged("CUENTA")
				Me.OnCUENTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TITULAR", DbType:="VarChar(40)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TITULAR() As String
		Get
			Return Me._TITULAR
		End Get
		Set
			If (String.Equals(Me._TITULAR, value) = false) Then
				Me.OnTITULARChanging(value)
				Me.SendPropertyChanging
				Me._TITULAR = value
				Me.SendPropertyChanged("TITULAR")
				Me.OnTITULARChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Eliminado", DbType:="Bit")>  _
	Public Property Eliminado() As System.Nullable(Of Boolean)
		Get
			Return Me._Eliminado
		End Get
		Set
			If (Me._Eliminado.Equals(value) = false) Then
				Me.OnEliminadoChanging(value)
				Me.SendPropertyChanging
				Me._Eliminado = value
				Me.SendPropertyChanged("Eliminado")
				Me.OnEliminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_PACIENTE", Storage:="_PACIENTEs", ThisKey:="CEMPRESA", OtherKey:="REFEMPRESA")>  _
	Public Property PACIENTEs() As EntitySet(Of PACIENTE)
		Get
			Return Me._PACIENTEs
		End Get
		Set
			Me._PACIENTEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_FACTURA", Storage:="_FACTURAs", ThisKey:="CEMPRESA", OtherKey:="REFEMPRESA")>  _
	Public Property FACTURAs() As EntitySet(Of FACTURA)
		Get
			Return Me._FACTURAs
		End Get
		Set
			Me._FACTURAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_LEMPRESA", Storage:="_LEMPRESAs", ThisKey:="CEMPRESA", OtherKey:="REFEMPRESA")>  _
	Public Property LEMPRESAs() As EntitySet(Of LEMPRESA)
		Get
			Return Me._LEMPRESAs
		End Get
		Set
			Me._LEMPRESAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_N_Parte", Storage:="_N_Partes", ThisKey:="CEMPRESA", OtherKey:="ID_Empresa")>  _
	Public Property N_Partes() As EntitySet(Of N_Parte)
		Get
			Return Me._N_Partes
		End Get
		Set
			Me._N_Partes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_N_Proceso", Storage:="_N_Procesos", ThisKey:="CEMPRESA", OtherKey:="ID_Empresa")>  _
	Public Property N_Procesos() As EntitySet(Of N_Proceso)
		Get
			Return Me._N_Procesos
		End Get
		Set
			Me._N_Procesos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_N_Partes_Asistencia", Storage:="_N_Partes_Asistencias", ThisKey:="CEMPRESA", OtherKey:="ID_Empresa")>  _
	Public Property N_Partes_Asistencias() As EntitySet(Of N_Partes_Asistencia)
		Get
			Return Me._N_Partes_Asistencias
		End Get
		Set
			Me._N_Partes_Asistencias.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_RECIBO", Storage:="_RECIBOs", ThisKey:="CEMPRESA", OtherKey:="REFEMPRESA")>  _
	Public Property RECIBOs() As EntitySet(Of RECIBO)
		Get
			Return Me._RECIBOs
		End Get
		Set
			Me._RECIBOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_PRESUPUESTOS", Storage:="_PRESUPUESTOS", ThisKey:="CEMPRESA", OtherKey:="REFEMPRESA")>  _
	Public Property PRESUPUESTOS() As EntitySet(Of PRESUPUESTOS)
		Get
			Return Me._PRESUPUESTOS
		End Get
		Set
			Me._PRESUPUESTOS.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PACIENTEs(ByVal entity As PACIENTE)
		Me.SendPropertyChanging
		entity.EMPRESA = Me
	End Sub
	
	Private Sub detach_PACIENTEs(ByVal entity As PACIENTE)
		Me.SendPropertyChanging
		entity.EMPRESA = Nothing
	End Sub
	
	Private Sub attach_FACTURAs(ByVal entity As FACTURA)
		Me.SendPropertyChanging
		entity.EMPRESA1 = Me
	End Sub
	
	Private Sub detach_FACTURAs(ByVal entity As FACTURA)
		Me.SendPropertyChanging
		entity.EMPRESA1 = Nothing
	End Sub
	
	Private Sub attach_LEMPRESAs(ByVal entity As LEMPRESA)
		Me.SendPropertyChanging
		entity.EMPRESA = Me
	End Sub
	
	Private Sub detach_LEMPRESAs(ByVal entity As LEMPRESA)
		Me.SendPropertyChanging
		entity.EMPRESA = Nothing
	End Sub
	
	Private Sub attach_N_Partes(ByVal entity As N_Parte)
		Me.SendPropertyChanging
		entity.EMPRESA = Me
	End Sub
	
	Private Sub detach_N_Partes(ByVal entity As N_Parte)
		Me.SendPropertyChanging
		entity.EMPRESA = Nothing
	End Sub
	
	Private Sub attach_N_Procesos(ByVal entity As N_Proceso)
		Me.SendPropertyChanging
		entity.EMPRESA = Me
	End Sub
	
	Private Sub detach_N_Procesos(ByVal entity As N_Proceso)
		Me.SendPropertyChanging
		entity.EMPRESA = Nothing
	End Sub
	
	Private Sub attach_N_Partes_Asistencias(ByVal entity As N_Partes_Asistencia)
		Me.SendPropertyChanging
		entity.EMPRESA = Me
	End Sub
	
	Private Sub detach_N_Partes_Asistencias(ByVal entity As N_Partes_Asistencia)
		Me.SendPropertyChanging
		entity.EMPRESA = Nothing
	End Sub
	
	Private Sub attach_RECIBOs(ByVal entity As RECIBO)
		Me.SendPropertyChanging
		entity.EMPRESA = Me
	End Sub
	
	Private Sub detach_RECIBOs(ByVal entity As RECIBO)
		Me.SendPropertyChanging
		entity.EMPRESA = Nothing
	End Sub
	
	Private Sub attach_PRESUPUESTOS(ByVal entity As PRESUPUESTOS)
		Me.SendPropertyChanging
		entity.EMPRESA1 = Me
	End Sub
	
	Private Sub detach_PRESUPUESTOS(ByVal entity As PRESUPUESTOS)
		Me.SendPropertyChanging
		entity.EMPRESA1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FACTURAS")>  _
Partial Public Class FACTURA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDFACTURA As Integer
	
	Private _NUMEROFACTURA As Integer
	
	Private _REFPACIENTE As System.Nullable(Of Integer)
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _HORA As System.Nullable(Of Date)
	
	Private _HISTORIAL As System.Nullable(Of Integer)
	
	Private _REFEMPRESA As System.Nullable(Of Integer)
	
	Private _REFMUTUA As System.Nullable(Of Integer)
	
	Private _FACCIDENTE As System.Nullable(Of Date)
	
	Private _FBAJA As System.Nullable(Of Date)
	
	Private _FALTA As System.Nullable(Of Date)
	
	Private _FEMISION As System.Nullable(Of Date)
	
	Private _TOTAL As System.Nullable(Of Decimal)
	
	Private _IRPF As System.Nullable(Of Decimal)
	
	Private _DIAGNOSTICO As String
	
	Private _PAGADA As String
	
	Private _MUTUA As String
	
	Private _RECIBO As String
	
	Private _DIRECCION As String
	
	Private _LOCALIDAD As String
	
	Private _PROVINCIA As String
	
	Private _CP As String
	
	Private _REFRECIBO As System.Nullable(Of Integer)
	
	Private _PACIENTE As String
	
	Private _REFCITA As System.Nullable(Of Integer)
	
	Private _FECHACOBRO As System.Nullable(Of Date)
	
	Private _PORCENTAJEIRPF As Single
	
	Private _REFFORMAPAGO As String
	
	Private _DNI As String
	
	Private _EMPRESA As String
	
	Private _FACTURAR As String
	
	Private _NUMERO As String
	
	Private _REFSERIE As String
	
	Private _TIPOIVA As System.Nullable(Of Single)
	
	Private _ID_Proceso As System.Nullable(Of Long)
	
	Private _N19 As String
	
	Private _Descuento As System.Nullable(Of Double)
	
	Private _FECHAENVIO As System.Nullable(Of Date)
	
	Private _Eliminado As System.Nullable(Of Boolean)
	
	Private _PagadoConCredito As System.Nullable(Of Boolean)
	
	Private _IDEntregaCuenta As System.Nullable(Of Long)
	
	Private _LINEASFACTURAs As EntitySet(Of LINEASFACTURA)
	
	Private _Bonos As EntitySet(Of Bonos)
	
	Private _FORMASPAGO As EntityRef(Of FORMASPAGO)
	
	Private _EMPRESA1 As EntityRef(Of EMPRESA)
	
	Private _PACIENTE1 As EntityRef(Of PACIENTE)
	
	Private _SERIES As EntityRef(Of SERIES)
	
	Private _N_Proceso As EntityRef(Of N_Proceso)
	
	Private _MUTUA1 As EntityRef(Of MUTUA)
	
	Private _EntregasCuenta As EntityRef(Of EntregasCuenta)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDFACTURAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDFACTURAChanged()
    End Sub
    Partial Private Sub OnNUMEROFACTURAChanging(value As Integer)
    End Sub
    Partial Private Sub OnNUMEROFACTURAChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnHORAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHORAChanged()
    End Sub
    Partial Private Sub OnHISTORIALChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnHISTORIALChanged()
    End Sub
    Partial Private Sub OnREFEMPRESAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFEMPRESAChanged()
    End Sub
    Partial Private Sub OnREFMUTUAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFMUTUAChanged()
    End Sub
    Partial Private Sub OnFACCIDENTEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFACCIDENTEChanged()
    End Sub
    Partial Private Sub OnFBAJAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFBAJAChanged()
    End Sub
    Partial Private Sub OnFALTAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFALTAChanged()
    End Sub
    Partial Private Sub OnFEMISIONChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFEMISIONChanged()
    End Sub
    Partial Private Sub OnTOTALChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTOTALChanged()
    End Sub
    Partial Private Sub OnIRPFChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnIRPFChanged()
    End Sub
    Partial Private Sub OnDIAGNOSTICOChanging(value As String)
    End Sub
    Partial Private Sub OnDIAGNOSTICOChanged()
    End Sub
    Partial Private Sub OnPAGADAChanging(value As String)
    End Sub
    Partial Private Sub OnPAGADAChanged()
    End Sub
    Partial Private Sub OnMUTUAChanging(value As String)
    End Sub
    Partial Private Sub OnMUTUAChanged()
    End Sub
    Partial Private Sub OnRECIBOChanging(value As String)
    End Sub
    Partial Private Sub OnRECIBOChanged()
    End Sub
    Partial Private Sub OnDIRECCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDIRECCIONChanged()
    End Sub
    Partial Private Sub OnLOCALIDADChanging(value As String)
    End Sub
    Partial Private Sub OnLOCALIDADChanged()
    End Sub
    Partial Private Sub OnPROVINCIAChanging(value As String)
    End Sub
    Partial Private Sub OnPROVINCIAChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnREFRECIBOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFRECIBOChanged()
    End Sub
    Partial Private Sub OnPACIENTEChanging(value As String)
    End Sub
    Partial Private Sub OnPACIENTEChanged()
    End Sub
    Partial Private Sub OnREFCITAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFCITAChanged()
    End Sub
    Partial Private Sub OnFECHACOBROChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHACOBROChanged()
    End Sub
    Partial Private Sub OnPORCENTAJEIRPFChanging(value As Single)
    End Sub
    Partial Private Sub OnPORCENTAJEIRPFChanged()
    End Sub
    Partial Private Sub OnREFFORMAPAGOChanging(value As String)
    End Sub
    Partial Private Sub OnREFFORMAPAGOChanged()
    End Sub
    Partial Private Sub OnDNIChanging(value As String)
    End Sub
    Partial Private Sub OnDNIChanged()
    End Sub
    Partial Private Sub OnEMPRESAChanging(value As String)
    End Sub
    Partial Private Sub OnEMPRESAChanged()
    End Sub
    Partial Private Sub OnFACTURARChanging(value As String)
    End Sub
    Partial Private Sub OnFACTURARChanged()
    End Sub
    Partial Private Sub OnNUMEROChanging(value As String)
    End Sub
    Partial Private Sub OnNUMEROChanged()
    End Sub
    Partial Private Sub OnREFSERIEChanging(value As String)
    End Sub
    Partial Private Sub OnREFSERIEChanged()
    End Sub
    Partial Private Sub OnTIPOIVAChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnTIPOIVAChanged()
    End Sub
    Partial Private Sub OnID_ProcesoChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnID_ProcesoChanged()
    End Sub
    Partial Private Sub OnN19Changing(value As String)
    End Sub
    Partial Private Sub OnN19Changed()
    End Sub
    Partial Private Sub OnDescuentoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuentoChanged()
    End Sub
    Partial Private Sub OnFECHAENVIOChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAENVIOChanged()
    End Sub
    Partial Private Sub OnEliminadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEliminadoChanged()
    End Sub
    Partial Private Sub OnPagadoConCreditoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPagadoConCreditoChanged()
    End Sub
    Partial Private Sub OnIDEntregaCuentaChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnIDEntregaCuentaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LINEASFACTURAs = New EntitySet(Of LINEASFACTURA)(AddressOf Me.attach_LINEASFACTURAs, AddressOf Me.detach_LINEASFACTURAs)
		Me._Bonos = New EntitySet(Of Bonos)(AddressOf Me.attach_Bonos, AddressOf Me.detach_Bonos)
		Me._FORMASPAGO = CType(Nothing, EntityRef(Of FORMASPAGO))
		Me._EMPRESA1 = CType(Nothing, EntityRef(Of EMPRESA))
		Me._PACIENTE1 = CType(Nothing, EntityRef(Of PACIENTE))
		Me._SERIES = CType(Nothing, EntityRef(Of SERIES))
		Me._N_Proceso = CType(Nothing, EntityRef(Of N_Proceso))
		Me._MUTUA1 = CType(Nothing, EntityRef(Of MUTUA))
		Me._EntregasCuenta = CType(Nothing, EntityRef(Of EntregasCuenta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDFACTURA", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IDFACTURA() As Integer
		Get
			Return Me._IDFACTURA
		End Get
		Set
			If ((Me._IDFACTURA = value)  _
						= false) Then
				Me.OnIDFACTURAChanging(value)
				Me.SendPropertyChanging
				Me._IDFACTURA = value
				Me.SendPropertyChanged("IDFACTURA")
				Me.OnIDFACTURAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUMEROFACTURA", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NUMEROFACTURA() As Integer
		Get
			Return Me._NUMEROFACTURA
		End Get
		Set
			If ((Me._NUMEROFACTURA = value)  _
						= false) Then
				Me.OnNUMEROFACTURAChanging(value)
				Me.SendPropertyChanging
				Me._NUMEROFACTURA = value
				Me.SendPropertyChanged("NUMEROFACTURA")
				Me.OnNUMEROFACTURAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFPACIENTE() As System.Nullable(Of Integer)
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If (Me._REFPACIENTE.Equals(value) = false) Then
				If Me._PACIENTE1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HORA", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HORA() As System.Nullable(Of Date)
		Get
			Return Me._HORA
		End Get
		Set
			If (Me._HORA.Equals(value) = false) Then
				Me.OnHORAChanging(value)
				Me.SendPropertyChanging
				Me._HORA = value
				Me.SendPropertyChanged("HORA")
				Me.OnHORAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HISTORIAL", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HISTORIAL() As System.Nullable(Of Integer)
		Get
			Return Me._HISTORIAL
		End Get
		Set
			If (Me._HISTORIAL.Equals(value) = false) Then
				Me.OnHISTORIALChanging(value)
				Me.SendPropertyChanging
				Me._HISTORIAL = value
				Me.SendPropertyChanged("HISTORIAL")
				Me.OnHISTORIALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFEMPRESA", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFEMPRESA() As System.Nullable(Of Integer)
		Get
			Return Me._REFEMPRESA
		End Get
		Set
			If (Me._REFEMPRESA.Equals(value) = false) Then
				If Me._EMPRESA1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFEMPRESAChanging(value)
				Me.SendPropertyChanging
				Me._REFEMPRESA = value
				Me.SendPropertyChanged("REFEMPRESA")
				Me.OnREFEMPRESAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMUTUA", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFMUTUA() As System.Nullable(Of Integer)
		Get
			Return Me._REFMUTUA
		End Get
		Set
			If (Me._REFMUTUA.Equals(value) = false) Then
				If Me._MUTUA1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMUTUAChanging(value)
				Me.SendPropertyChanging
				Me._REFMUTUA = value
				Me.SendPropertyChanged("REFMUTUA")
				Me.OnREFMUTUAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FACCIDENTE", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FACCIDENTE() As System.Nullable(Of Date)
		Get
			Return Me._FACCIDENTE
		End Get
		Set
			If (Me._FACCIDENTE.Equals(value) = false) Then
				Me.OnFACCIDENTEChanging(value)
				Me.SendPropertyChanging
				Me._FACCIDENTE = value
				Me.SendPropertyChanged("FACCIDENTE")
				Me.OnFACCIDENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FBAJA", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FBAJA() As System.Nullable(Of Date)
		Get
			Return Me._FBAJA
		End Get
		Set
			If (Me._FBAJA.Equals(value) = false) Then
				Me.OnFBAJAChanging(value)
				Me.SendPropertyChanging
				Me._FBAJA = value
				Me.SendPropertyChanged("FBAJA")
				Me.OnFBAJAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FALTA", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FALTA() As System.Nullable(Of Date)
		Get
			Return Me._FALTA
		End Get
		Set
			If (Me._FALTA.Equals(value) = false) Then
				Me.OnFALTAChanging(value)
				Me.SendPropertyChanging
				Me._FALTA = value
				Me.SendPropertyChanged("FALTA")
				Me.OnFALTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FEMISION", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FEMISION() As System.Nullable(Of Date)
		Get
			Return Me._FEMISION
		End Get
		Set
			If (Me._FEMISION.Equals(value) = false) Then
				Me.OnFEMISIONChanging(value)
				Me.SendPropertyChanging
				Me._FEMISION = value
				Me.SendPropertyChanged("FEMISION")
				Me.OnFEMISIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TOTAL", DbType:="Decimal(18,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TOTAL() As System.Nullable(Of Decimal)
		Get
			Return Me._TOTAL
		End Get
		Set
			If (Me._TOTAL.Equals(value) = false) Then
				Me.OnTOTALChanging(value)
				Me.SendPropertyChanging
				Me._TOTAL = value
				Me.SendPropertyChanged("TOTAL")
				Me.OnTOTALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IRPF", DbType:="Decimal(18,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IRPF() As System.Nullable(Of Decimal)
		Get
			Return Me._IRPF
		End Get
		Set
			If (Me._IRPF.Equals(value) = false) Then
				Me.OnIRPFChanging(value)
				Me.SendPropertyChanging
				Me._IRPF = value
				Me.SendPropertyChanged("IRPF")
				Me.OnIRPFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIAGNOSTICO", DbType:="VarChar(60)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DIAGNOSTICO() As String
		Get
			Return Me._DIAGNOSTICO
		End Get
		Set
			If (String.Equals(Me._DIAGNOSTICO, value) = false) Then
				Me.OnDIAGNOSTICOChanging(value)
				Me.SendPropertyChanging
				Me._DIAGNOSTICO = value
				Me.SendPropertyChanged("DIAGNOSTICO")
				Me.OnDIAGNOSTICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PAGADA", DbType:="VarChar(1) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PAGADA() As String
		Get
			Return Me._PAGADA
		End Get
		Set
			If (String.Equals(Me._PAGADA, value) = false) Then
				Me.OnPAGADAChanging(value)
				Me.SendPropertyChanging
				Me._PAGADA = value
				Me.SendPropertyChanged("PAGADA")
				Me.OnPAGADAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MUTUA", DbType:="VarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MUTUA() As String
		Get
			Return Me._MUTUA
		End Get
		Set
			If (String.Equals(Me._MUTUA, value) = false) Then
				Me.OnMUTUAChanging(value)
				Me.SendPropertyChanging
				Me._MUTUA = value
				Me.SendPropertyChanged("MUTUA")
				Me.OnMUTUAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RECIBO", DbType:="VarChar(1) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RECIBO() As String
		Get
			Return Me._RECIBO
		End Get
		Set
			If (String.Equals(Me._RECIBO, value) = false) Then
				Me.OnRECIBOChanging(value)
				Me.SendPropertyChanging
				Me._RECIBO = value
				Me.SendPropertyChanged("RECIBO")
				Me.OnRECIBOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIRECCION", DbType:="VarChar(150)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DIRECCION() As String
		Get
			Return Me._DIRECCION
		End Get
		Set
			If (String.Equals(Me._DIRECCION, value) = false) Then
				Me.OnDIRECCIONChanging(value)
				Me.SendPropertyChanging
				Me._DIRECCION = value
				Me.SendPropertyChanged("DIRECCION")
				Me.OnDIRECCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCALIDAD", DbType:="VarChar(35)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LOCALIDAD() As String
		Get
			Return Me._LOCALIDAD
		End Get
		Set
			If (String.Equals(Me._LOCALIDAD, value) = false) Then
				Me.OnLOCALIDADChanging(value)
				Me.SendPropertyChanging
				Me._LOCALIDAD = value
				Me.SendPropertyChanged("LOCALIDAD")
				Me.OnLOCALIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCIA", DbType:="VarChar(35)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PROVINCIA() As String
		Get
			Return Me._PROVINCIA
		End Get
		Set
			If (String.Equals(Me._PROVINCIA, value) = false) Then
				Me.OnPROVINCIAChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCIA = value
				Me.SendPropertyChanged("PROVINCIA")
				Me.OnPROVINCIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="VarChar(6)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFRECIBO", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFRECIBO() As System.Nullable(Of Integer)
		Get
			Return Me._REFRECIBO
		End Get
		Set
			If (Me._REFRECIBO.Equals(value) = false) Then
				Me.OnREFRECIBOChanging(value)
				Me.SendPropertyChanging
				Me._REFRECIBO = value
				Me.SendPropertyChanged("REFRECIBO")
				Me.OnREFRECIBOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PACIENTE", DbType:="VarChar(90)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PACIENTE() As String
		Get
			Return Me._PACIENTE
		End Get
		Set
			If (String.Equals(Me._PACIENTE, value) = false) Then
				Me.OnPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._PACIENTE = value
				Me.SendPropertyChanged("PACIENTE")
				Me.OnPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFCITA", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFCITA() As System.Nullable(Of Integer)
		Get
			Return Me._REFCITA
		End Get
		Set
			If (Me._REFCITA.Equals(value) = false) Then
				Me.OnREFCITAChanging(value)
				Me.SendPropertyChanging
				Me._REFCITA = value
				Me.SendPropertyChanged("REFCITA")
				Me.OnREFCITAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHACOBRO", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FECHACOBRO() As System.Nullable(Of Date)
		Get
			Return Me._FECHACOBRO
		End Get
		Set
			If (Me._FECHACOBRO.Equals(value) = false) Then
				Me.OnFECHACOBROChanging(value)
				Me.SendPropertyChanging
				Me._FECHACOBRO = value
				Me.SendPropertyChanged("FECHACOBRO")
				Me.OnFECHACOBROChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PORCENTAJEIRPF", DbType:="Real NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PORCENTAJEIRPF() As Single
		Get
			Return Me._PORCENTAJEIRPF
		End Get
		Set
			If ((Me._PORCENTAJEIRPF = value)  _
						= false) Then
				Me.OnPORCENTAJEIRPFChanging(value)
				Me.SendPropertyChanging
				Me._PORCENTAJEIRPF = value
				Me.SendPropertyChanged("PORCENTAJEIRPF")
				Me.OnPORCENTAJEIRPFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFFORMAPAGO", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFFORMAPAGO() As String
		Get
			Return Me._REFFORMAPAGO
		End Get
		Set
			If (String.Equals(Me._REFFORMAPAGO, value) = false) Then
				If Me._FORMASPAGO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFFORMAPAGOChanging(value)
				Me.SendPropertyChanging
				Me._REFFORMAPAGO = value
				Me.SendPropertyChanged("REFFORMAPAGO")
				Me.OnREFFORMAPAGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNI", DbType:="VarChar(30)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DNI() As String
		Get
			Return Me._DNI
		End Get
		Set
			If (String.Equals(Me._DNI, value) = false) Then
				Me.OnDNIChanging(value)
				Me.SendPropertyChanging
				Me._DNI = value
				Me.SendPropertyChanged("DNI")
				Me.OnDNIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMPRESA", DbType:="VarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EMPRESA() As String
		Get
			Return Me._EMPRESA
		End Get
		Set
			If (String.Equals(Me._EMPRESA, value) = false) Then
				Me.OnEMPRESAChanging(value)
				Me.SendPropertyChanging
				Me._EMPRESA = value
				Me.SendPropertyChanged("EMPRESA")
				Me.OnEMPRESAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FACTURAR", DbType:="VarChar(1) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FACTURAR() As String
		Get
			Return Me._FACTURAR
		End Get
		Set
			If (String.Equals(Me._FACTURAR, value) = false) Then
				Me.OnFACTURARChanging(value)
				Me.SendPropertyChanging
				Me._FACTURAR = value
				Me.SendPropertyChanged("FACTURAR")
				Me.OnFACTURARChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUMERO", DbType:="VarChar(12)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NUMERO() As String
		Get
			Return Me._NUMERO
		End Get
		Set
			If (String.Equals(Me._NUMERO, value) = false) Then
				Me.OnNUMEROChanging(value)
				Me.SendPropertyChanging
				Me._NUMERO = value
				Me.SendPropertyChanged("NUMERO")
				Me.OnNUMEROChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFSERIE", DbType:="VarChar(6)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFSERIE() As String
		Get
			Return Me._REFSERIE
		End Get
		Set
			If (String.Equals(Me._REFSERIE, value) = false) Then
				If Me._SERIES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFSERIEChanging(value)
				Me.SendPropertyChanging
				Me._REFSERIE = value
				Me.SendPropertyChanged("REFSERIE")
				Me.OnREFSERIEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TIPOIVA", DbType:="Real", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TIPOIVA() As System.Nullable(Of Single)
		Get
			Return Me._TIPOIVA
		End Get
		Set
			If (Me._TIPOIVA.Equals(value) = false) Then
				Me.OnTIPOIVAChanging(value)
				Me.SendPropertyChanging
				Me._TIPOIVA = value
				Me.SendPropertyChanged("TIPOIVA")
				Me.OnTIPOIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proceso", DbType:="BigInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Proceso() As System.Nullable(Of Long)
		Get
			Return Me._ID_Proceso
		End Get
		Set
			If (Me._ID_Proceso.Equals(value) = false) Then
				If Me._N_Proceso.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProcesoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proceso = value
				Me.SendPropertyChanged("ID_Proceso")
				Me.OnID_ProcesoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_N19", DbType:="NVarChar(1)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property N19() As String
		Get
			Return Me._N19
		End Get
		Set
			If (String.Equals(Me._N19, value) = false) Then
				Me.OnN19Changing(value)
				Me.SendPropertyChanging
				Me._N19 = value
				Me.SendPropertyChanged("N19")
				Me.OnN19Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descuento() As System.Nullable(Of Double)
		Get
			Return Me._Descuento
		End Get
		Set
			If (Me._Descuento.Equals(value) = false) Then
				Me.OnDescuentoChanging(value)
				Me.SendPropertyChanging
				Me._Descuento = value
				Me.SendPropertyChanged("Descuento")
				Me.OnDescuentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHAENVIO", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FECHAENVIO() As System.Nullable(Of Date)
		Get
			Return Me._FECHAENVIO
		End Get
		Set
			If (Me._FECHAENVIO.Equals(value) = false) Then
				Me.OnFECHAENVIOChanging(value)
				Me.SendPropertyChanging
				Me._FECHAENVIO = value
				Me.SendPropertyChanged("FECHAENVIO")
				Me.OnFECHAENVIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Eliminado", DbType:="Bit")>  _
	Public Property Eliminado() As System.Nullable(Of Boolean)
		Get
			Return Me._Eliminado
		End Get
		Set
			If (Me._Eliminado.Equals(value) = false) Then
				Me.OnEliminadoChanging(value)
				Me.SendPropertyChanging
				Me._Eliminado = value
				Me.SendPropertyChanged("Eliminado")
				Me.OnEliminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PagadoConCredito", DbType:="Bit")>  _
	Public Property PagadoConCredito() As System.Nullable(Of Boolean)
		Get
			Return Me._PagadoConCredito
		End Get
		Set
			If (Me._PagadoConCredito.Equals(value) = false) Then
				Me.OnPagadoConCreditoChanging(value)
				Me.SendPropertyChanging
				Me._PagadoConCredito = value
				Me.SendPropertyChanged("PagadoConCredito")
				Me.OnPagadoConCreditoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDEntregaCuenta", DbType:="BigInt")>  _
	Public Property IDEntregaCuenta() As System.Nullable(Of Long)
		Get
			Return Me._IDEntregaCuenta
		End Get
		Set
			If (Me._IDEntregaCuenta.Equals(value) = false) Then
				If Me._EntregasCuenta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDEntregaCuentaChanging(value)
				Me.SendPropertyChanging
				Me._IDEntregaCuenta = value
				Me.SendPropertyChanged("IDEntregaCuenta")
				Me.OnIDEntregaCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FACTURA_LINEASFACTURA", Storage:="_LINEASFACTURAs", ThisKey:="IDFACTURA", OtherKey:="REFFACTURA")>  _
	Public Property LINEASFACTURAs() As EntitySet(Of LINEASFACTURA)
		Get
			Return Me._LINEASFACTURAs
		End Get
		Set
			Me._LINEASFACTURAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FACTURA_Bonos", Storage:="_Bonos", ThisKey:="IDFACTURA", OtherKey:="idfactura")>  _
	Public Property Bonos() As EntitySet(Of Bonos)
		Get
			Return Me._Bonos
		End Get
		Set
			Me._Bonos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_FACTURA", Storage:="_FORMASPAGO", ThisKey:="REFFORMAPAGO", OtherKey:="CODIGO", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property FORMASPAGO() As FORMASPAGO
		Get
			Return Me._FORMASPAGO.Entity
		End Get
		Set
			Dim previousValue As FORMASPAGO = Me._FORMASPAGO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FORMASPAGO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FORMASPAGO.Entity = Nothing
					previousValue.FACTURAs.Remove(Me)
				End If
				Me._FORMASPAGO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FACTURAs.Add(Me)
					Me._REFFORMAPAGO = value.CODIGO
				Else
					Me._REFFORMAPAGO = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("FORMASPAGO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_FACTURA", Storage:="_EMPRESA1", ThisKey:="REFEMPRESA", OtherKey:="CEMPRESA", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property EMPRESA1() As EMPRESA
		Get
			Return Me._EMPRESA1.Entity
		End Get
		Set
			Dim previousValue As EMPRESA = Me._EMPRESA1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EMPRESA1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EMPRESA1.Entity = Nothing
					previousValue.FACTURAs.Remove(Me)
				End If
				Me._EMPRESA1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FACTURAs.Add(Me)
					Me._REFEMPRESA = value.CEMPRESA
				Else
					Me._REFEMPRESA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("EMPRESA1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_FACTURA", Storage:="_PACIENTE1", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property PACIENTE1() As PACIENTE
		Get
			Return Me._PACIENTE1.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE1.Entity = Nothing
					previousValue.FACTURAs.Remove(Me)
				End If
				Me._PACIENTE1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FACTURAs.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SERIES_FACTURA", Storage:="_SERIES", ThisKey:="REFSERIE", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property SERIES() As SERIES
		Get
			Return Me._SERIES.Entity
		End Get
		Set
			Dim previousValue As SERIES = Me._SERIES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SERIES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SERIES.Entity = Nothing
					previousValue.FACTURAs.Remove(Me)
				End If
				Me._SERIES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FACTURAs.Add(Me)
					Me._REFSERIE = value.CODIGO
				Else
					Me._REFSERIE = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("SERIES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Proceso_FACTURA", Storage:="_N_Proceso", ThisKey:="ID_Proceso", OtherKey:="ID_Proceso", IsForeignKey:=true)>  _
	Public Property N_Proceso() As N_Proceso
		Get
			Return Me._N_Proceso.Entity
		End Get
		Set
			Dim previousValue As N_Proceso = Me._N_Proceso.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_Proceso.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_Proceso.Entity = Nothing
					previousValue.FACTURAs.Remove(Me)
				End If
				Me._N_Proceso.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FACTURAs.Add(Me)
					Me._ID_Proceso = value.ID_Proceso
				Else
					Me._ID_Proceso = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("N_Proceso")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MUTUA_FACTURA", Storage:="_MUTUA1", ThisKey:="REFMUTUA", OtherKey:="CMUTUA", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property MUTUA1() As MUTUA
		Get
			Return Me._MUTUA1.Entity
		End Get
		Set
			Dim previousValue As MUTUA = Me._MUTUA1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MUTUA1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MUTUA1.Entity = Nothing
					previousValue.FACTURAs.Remove(Me)
				End If
				Me._MUTUA1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FACTURAs.Add(Me)
					Me._REFMUTUA = value.CMUTUA
				Else
					Me._REFMUTUA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MUTUA1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EntregasCuenta_FACTURA", Storage:="_EntregasCuenta", ThisKey:="IDEntregaCuenta", OtherKey:="IDEntregaCuenta", IsForeignKey:=true)>  _
	Public Property EntregasCuenta() As EntregasCuenta
		Get
			Return Me._EntregasCuenta.Entity
		End Get
		Set
			Dim previousValue As EntregasCuenta = Me._EntregasCuenta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EntregasCuenta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EntregasCuenta.Entity = Nothing
					previousValue.FACTURAs.Remove(Me)
				End If
				Me._EntregasCuenta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FACTURAs.Add(Me)
					Me._IDEntregaCuenta = value.IDEntregaCuenta
				Else
					Me._IDEntregaCuenta = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("EntregasCuenta")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LINEASFACTURAs(ByVal entity As LINEASFACTURA)
		Me.SendPropertyChanging
		entity.FACTURA = Me
	End Sub
	
	Private Sub detach_LINEASFACTURAs(ByVal entity As LINEASFACTURA)
		Me.SendPropertyChanging
		entity.FACTURA = Nothing
	End Sub
	
	Private Sub attach_Bonos(ByVal entity As Bonos)
		Me.SendPropertyChanging
		entity.FACTURA = Me
	End Sub
	
	Private Sub detach_Bonos(ByVal entity As Bonos)
		Me.SendPropertyChanging
		entity.FACTURA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ContactosPacientes")>  _
Partial Public Class ContactosPaciente
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdContacto As Integer
	
	Private _CPaciente As Integer
	
	Private _Nombre As String
	
	Private _Apellidos As String
	
	Private _Direccion As String
	
	Private _Localidad As String
	
	Private _CP As String
	
	Private _Pais As String
	
	Private _Telefono As String
	
	Private _Movil As String
	
	Private _Fax As String
	
	Private _Email As String
	
	Private _Parentesco As String
	
	Private _Notas As String
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdContactoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdContactoChanged()
    End Sub
    Partial Private Sub OnCPacienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnCPacienteChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnApellidosChanging(value As String)
    End Sub
    Partial Private Sub OnApellidosChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnLocalidadChanging(value As String)
    End Sub
    Partial Private Sub OnLocalidadChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnPaisChanging(value As String)
    End Sub
    Partial Private Sub OnPaisChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnMovilChanging(value As String)
    End Sub
    Partial Private Sub OnMovilChanged()
    End Sub
    Partial Private Sub OnFaxChanging(value As String)
    End Sub
    Partial Private Sub OnFaxChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnParentescoChanging(value As String)
    End Sub
    Partial Private Sub OnParentescoChanged()
    End Sub
    Partial Private Sub OnNotasChanging(value As String)
    End Sub
    Partial Private Sub OnNotasChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdContacto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdContacto() As Integer
		Get
			Return Me._IdContacto
		End Get
		Set
			If ((Me._IdContacto = value)  _
						= false) Then
				Me.OnIdContactoChanging(value)
				Me.SendPropertyChanging
				Me._IdContacto = value
				Me.SendPropertyChanged("IdContacto")
				Me.OnIdContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CPaciente", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CPaciente() As Integer
		Get
			Return Me._CPaciente
		End Get
		Set
			If ((Me._CPaciente = value)  _
						= false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCPacienteChanging(value)
				Me.SendPropertyChanging
				Me._CPaciente = value
				Me.SendPropertyChanged("CPaciente")
				Me.OnCPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Apellidos", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Apellidos() As String
		Get
			Return Me._Apellidos
		End Get
		Set
			If (String.Equals(Me._Apellidos, value) = false) Then
				Me.OnApellidosChanging(value)
				Me.SendPropertyChanging
				Me._Apellidos = value
				Me.SendPropertyChanged("Apellidos")
				Me.OnApellidosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="VarChar(150) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Localidad", DbType:="VarChar(150) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Localidad() As String
		Get
			Return Me._Localidad
		End Get
		Set
			If (String.Equals(Me._Localidad, value) = false) Then
				Me.OnLocalidadChanging(value)
				Me.SendPropertyChanging
				Me._Localidad = value
				Me.SendPropertyChanged("Localidad")
				Me.OnLocalidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pais", DbType:="VarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pais() As String
		Get
			Return Me._Pais
		End Get
		Set
			If (String.Equals(Me._Pais, value) = false) Then
				Me.OnPaisChanging(value)
				Me.SendPropertyChanging
				Me._Pais = value
				Me.SendPropertyChanged("Pais")
				Me.OnPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Movil", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Movil() As String
		Get
			Return Me._Movil
		End Get
		Set
			If (String.Equals(Me._Movil, value) = false) Then
				Me.OnMovilChanging(value)
				Me.SendPropertyChanging
				Me._Movil = value
				Me.SendPropertyChanged("Movil")
				Me.OnMovilChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fax() As String
		Get
			Return Me._Fax
		End Get
		Set
			If (String.Equals(Me._Fax, value) = false) Then
				Me.OnFaxChanging(value)
				Me.SendPropertyChanging
				Me._Fax = value
				Me.SendPropertyChanged("Fax")
				Me.OnFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Parentesco", DbType:="VarChar(150) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Parentesco() As String
		Get
			Return Me._Parentesco
		End Get
		Set
			If (String.Equals(Me._Parentesco, value) = false) Then
				Me.OnParentescoChanging(value)
				Me.SendPropertyChanging
				Me._Parentesco = value
				Me.SendPropertyChanged("Parentesco")
				Me.OnParentescoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notas", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Notas() As String
		Get
			Return Me._Notas
		End Get
		Set
			If (String.Equals(Me._Notas, value) = false) Then
				Me.OnNotasChanging(value)
				Me.SendPropertyChanging
				Me._Notas = value
				Me.SendPropertyChanged("Notas")
				Me.OnNotasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_ContactosPaciente", Storage:="_PACIENTE", ThisKey:="CPaciente", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.ContactosPacientes.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ContactosPacientes.Add(Me)
					Me._CPaciente = value.CPACIENTE
				Else
					Me._CPaciente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parentescos")>  _
Partial Public Class Parentesco
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdParentesco As Integer
	
	Private _Descripcion As String
	
	Private _Asociados As EntitySet(Of Asociado)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdParentescoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdParentescoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Asociados = New EntitySet(Of Asociado)(AddressOf Me.attach_Asociados, AddressOf Me.detach_Asociados)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdParentesco", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdParentesco() As Integer
		Get
			Return Me._IdParentesco
		End Get
		Set
			If ((Me._IdParentesco = value)  _
						= false) Then
				Me.OnIdParentescoChanging(value)
				Me.SendPropertyChanging
				Me._IdParentesco = value
				Me.SendPropertyChanged("IdParentesco")
				Me.OnIdParentescoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(150) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parentesco_Asociado", Storage:="_Asociados", ThisKey:="IdParentesco", OtherKey:="IDParentesco")>  _
	Public Property Asociados() As EntitySet(Of Asociado)
		Get
			Return Me._Asociados
		End Get
		Set
			Me._Asociados.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Asociados(ByVal entity As Asociado)
		Me.SendPropertyChanging
		entity.Parentesco = Me
	End Sub
	
	Private Sub detach_Asociados(ByVal entity As Asociado)
		Me.SendPropertyChanging
		entity.Parentesco = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Asociados")>  _
Partial Public Class Asociado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDPacienteBeneficiario As Integer
	
	Private _IDPacienteOrigen As Integer
	
	Private _IDParentesco As System.Nullable(Of Integer)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
	Private _PACIENTE1 As EntityRef(Of PACIENTE)
	
	Private _Parentesco As EntityRef(Of Parentesco)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDPacienteBeneficiarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDPacienteBeneficiarioChanged()
    End Sub
    Partial Private Sub OnIDPacienteOrigenChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDPacienteOrigenChanged()
    End Sub
    Partial Private Sub OnIDParentescoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDParentescoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		Me._PACIENTE1 = CType(Nothing, EntityRef(Of PACIENTE))
		Me._Parentesco = CType(Nothing, EntityRef(Of Parentesco))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPacienteBeneficiario", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IDPacienteBeneficiario() As Integer
		Get
			Return Me._IDPacienteBeneficiario
		End Get
		Set
			If ((Me._IDPacienteBeneficiario = value)  _
						= false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDPacienteBeneficiarioChanging(value)
				Me.SendPropertyChanging
				Me._IDPacienteBeneficiario = value
				Me.SendPropertyChanged("IDPacienteBeneficiario")
				Me.OnIDPacienteBeneficiarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPacienteOrigen", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IDPacienteOrigen() As Integer
		Get
			Return Me._IDPacienteOrigen
		End Get
		Set
			If ((Me._IDPacienteOrigen = value)  _
						= false) Then
				If Me._PACIENTE1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDPacienteOrigenChanging(value)
				Me.SendPropertyChanging
				Me._IDPacienteOrigen = value
				Me.SendPropertyChanged("IDPacienteOrigen")
				Me.OnIDPacienteOrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDParentesco", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IDParentesco() As System.Nullable(Of Integer)
		Get
			Return Me._IDParentesco
		End Get
		Set
			If (Me._IDParentesco.Equals(value) = false) Then
				If Me._Parentesco.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDParentescoChanging(value)
				Me.SendPropertyChanging
				Me._IDParentesco = value
				Me.SendPropertyChanged("IDParentesco")
				Me.OnIDParentescoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_Asociado", Storage:="_PACIENTE", ThisKey:="IDPacienteBeneficiario", OtherKey:="CPACIENTE", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.Asociados.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Asociados.Add(Me)
					Me._IDPacienteBeneficiario = value.CPACIENTE
				Else
					Me._IDPacienteBeneficiario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_Asociado1", Storage:="_PACIENTE1", ThisKey:="IDPacienteOrigen", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE1() As PACIENTE
		Get
			Return Me._PACIENTE1.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE1.Entity = Nothing
					previousValue.Asociados1.Remove(Me)
				End If
				Me._PACIENTE1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Asociados1.Add(Me)
					Me._IDPacienteOrigen = value.CPACIENTE
				Else
					Me._IDPacienteOrigen = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PACIENTE1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parentesco_Asociado", Storage:="_Parentesco", ThisKey:="IDParentesco", OtherKey:="IdParentesco", IsForeignKey:=true)>  _
	Public Property Parentesco() As Parentesco
		Get
			Return Me._Parentesco.Entity
		End Get
		Set
			Dim previousValue As Parentesco = Me._Parentesco.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parentesco.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parentesco.Entity = Nothing
					previousValue.Asociados.Remove(Me)
				End If
				Me._Parentesco.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Asociados.Add(Me)
					Me._IDParentesco = value.IdParentesco
				Else
					Me._IDParentesco = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Parentesco")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BANCOS")>  _
Partial Public Class BANCO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NOMBRE As String
	
	Private _DIRECCION As String
	
	Private _LOCALIDAD As String
	
	Private _PROVINCIA As String
	
	Private _CP As String
	
	Private _TLFNO1 As String
	
	Private _TLFNO2 As String
	
	Private _FAX As String
	
	Private _ENTIDAD As String
	
	Private _OFICINA As String
	
	Private _NOTAS As String
	
	Private _EMAIL As String
	
	Private _WEB As String
	
	Private _ID As String
	
	Private _IdBanco As Integer
	
	Private _N_Proveedors As EntitySet(Of N_Proveedor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREChanged()
    End Sub
    Partial Private Sub OnDIRECCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDIRECCIONChanged()
    End Sub
    Partial Private Sub OnLOCALIDADChanging(value As String)
    End Sub
    Partial Private Sub OnLOCALIDADChanged()
    End Sub
    Partial Private Sub OnPROVINCIAChanging(value As String)
    End Sub
    Partial Private Sub OnPROVINCIAChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnTLFNO1Changing(value As String)
    End Sub
    Partial Private Sub OnTLFNO1Changed()
    End Sub
    Partial Private Sub OnTLFNO2Changing(value As String)
    End Sub
    Partial Private Sub OnTLFNO2Changed()
    End Sub
    Partial Private Sub OnFAXChanging(value As String)
    End Sub
    Partial Private Sub OnFAXChanged()
    End Sub
    Partial Private Sub OnENTIDADChanging(value As String)
    End Sub
    Partial Private Sub OnENTIDADChanged()
    End Sub
    Partial Private Sub OnOFICINAChanging(value As String)
    End Sub
    Partial Private Sub OnOFICINAChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    Partial Private Sub OnEMAILChanging(value As String)
    End Sub
    Partial Private Sub OnEMAILChanged()
    End Sub
    Partial Private Sub OnWEBChanging(value As String)
    End Sub
    Partial Private Sub OnWEBChanged()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnIdBancoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBancoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_Proveedors = New EntitySet(Of N_Proveedor)(AddressOf Me.attach_N_Proveedors, AddressOf Me.detach_N_Proveedors)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", DbType:="VarChar(60)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me.OnNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRE = value
				Me.SendPropertyChanged("NOMBRE")
				Me.OnNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIRECCION", DbType:="VarChar(150)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DIRECCION() As String
		Get
			Return Me._DIRECCION
		End Get
		Set
			If (String.Equals(Me._DIRECCION, value) = false) Then
				Me.OnDIRECCIONChanging(value)
				Me.SendPropertyChanging
				Me._DIRECCION = value
				Me.SendPropertyChanged("DIRECCION")
				Me.OnDIRECCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCALIDAD", DbType:="VarChar(60)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LOCALIDAD() As String
		Get
			Return Me._LOCALIDAD
		End Get
		Set
			If (String.Equals(Me._LOCALIDAD, value) = false) Then
				Me.OnLOCALIDADChanging(value)
				Me.SendPropertyChanging
				Me._LOCALIDAD = value
				Me.SendPropertyChanged("LOCALIDAD")
				Me.OnLOCALIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCIA", DbType:="VarChar(60)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PROVINCIA() As String
		Get
			Return Me._PROVINCIA
		End Get
		Set
			If (String.Equals(Me._PROVINCIA, value) = false) Then
				Me.OnPROVINCIAChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCIA = value
				Me.SendPropertyChanged("PROVINCIA")
				Me.OnPROVINCIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="VarChar(6)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLFNO1", DbType:="VarChar(12)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TLFNO1() As String
		Get
			Return Me._TLFNO1
		End Get
		Set
			If (String.Equals(Me._TLFNO1, value) = false) Then
				Me.OnTLFNO1Changing(value)
				Me.SendPropertyChanging
				Me._TLFNO1 = value
				Me.SendPropertyChanged("TLFNO1")
				Me.OnTLFNO1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLFNO2", DbType:="VarChar(12)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TLFNO2() As String
		Get
			Return Me._TLFNO2
		End Get
		Set
			If (String.Equals(Me._TLFNO2, value) = false) Then
				Me.OnTLFNO2Changing(value)
				Me.SendPropertyChanging
				Me._TLFNO2 = value
				Me.SendPropertyChanged("TLFNO2")
				Me.OnTLFNO2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAX", DbType:="VarChar(12)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FAX() As String
		Get
			Return Me._FAX
		End Get
		Set
			If (String.Equals(Me._FAX, value) = false) Then
				Me.OnFAXChanging(value)
				Me.SendPropertyChanging
				Me._FAX = value
				Me.SendPropertyChanged("FAX")
				Me.OnFAXChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ENTIDAD", DbType:="VarChar(4) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ENTIDAD() As String
		Get
			Return Me._ENTIDAD
		End Get
		Set
			If (String.Equals(Me._ENTIDAD, value) = false) Then
				Me.OnENTIDADChanging(value)
				Me.SendPropertyChanging
				Me._ENTIDAD = value
				Me.SendPropertyChanged("ENTIDAD")
				Me.OnENTIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OFICINA", DbType:="VarChar(4) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OFICINA() As String
		Get
			Return Me._OFICINA
		End Get
		Set
			If (String.Equals(Me._OFICINA, value) = false) Then
				Me.OnOFICINAChanging(value)
				Me.SendPropertyChanging
				Me._OFICINA = value
				Me.SendPropertyChanged("OFICINA")
				Me.OnOFICINAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL", DbType:="VarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EMAIL() As String
		Get
			Return Me._EMAIL
		End Get
		Set
			If (String.Equals(Me._EMAIL, value) = false) Then
				Me.OnEMAILChanging(value)
				Me.SendPropertyChanging
				Me._EMAIL = value
				Me.SendPropertyChanged("EMAIL")
				Me.OnEMAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WEB", DbType:="VarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property WEB() As String
		Get
			Return Me._WEB
		End Get
		Set
			If (String.Equals(Me._WEB, value) = false) Then
				Me.OnWEBChanging(value)
				Me.SendPropertyChanging
				Me._WEB = value
				Me.SendPropertyChanged("WEB")
				Me.OnWEBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="VarChar(8)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBanco", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdBanco() As Integer
		Get
			Return Me._IdBanco
		End Get
		Set
			If ((Me._IdBanco = value)  _
						= false) Then
				Me.OnIdBancoChanging(value)
				Me.SendPropertyChanging
				Me._IdBanco = value
				Me.SendPropertyChanged("IdBanco")
				Me.OnIdBancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BANCO_N_Proveedor", Storage:="_N_Proveedors", ThisKey:="IdBanco", OtherKey:="ID_Banco")>  _
	Public Property N_Proveedors() As EntitySet(Of N_Proveedor)
		Get
			Return Me._N_Proveedors
		End Get
		Set
			Me._N_Proveedors.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_N_Proveedors(ByVal entity As N_Proveedor)
		Me.SendPropertyChanging
		entity.BANCO = Me
	End Sub
	
	Private Sub detach_N_Proveedors(ByVal entity As N_Proveedor)
		Me.SendPropertyChanging
		entity.BANCO = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_Articulos")>  _
Partial Public Class N_Articulo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Articulo As Long
	
	Private _Codigo As String
	
	Private _CodigoEAN As String
	
	Private _ID_TipoArticulo As Integer
	
	Private _Equivalente As String
	
	Private _CodigoCorto As System.Nullable(Of Integer)
	
	Private _ID_Familia As System.Nullable(Of Integer)
	
	Private _DescripcionGeneral As String
	
	Private _DescripcionEtiquetas As String
	
	Private _DescripcionTickets As String
	
	Private _DescripcionLarga As String
	
	Private _ID_TipoIVA As System.Nullable(Of Integer)
	
	Private _ID_ProveedorHabitual As System.Nullable(Of Integer)
	
	Private _Referencia As String
	
	Private _ID_Fabricante As System.Nullable(Of Integer)
	
	Private _PrecioCompra As System.Nullable(Of Double)
	
	Private _Descuento1 As System.Nullable(Of Double)
	
	Private _Descuento2 As System.Nullable(Of Double)
	
	Private _Descuento3 As String
	
	Private _FechaAltaArticulo As System.Nullable(Of Date)
	
	Private _MaximoDescuentoAplicable As System.Nullable(Of Double)
	
	Private _ID_Tallaje As System.Nullable(Of Integer)
	
	Private _UbicacionEnAlmacen As String
	
	Private _UnidadesLinea As System.Nullable(Of Integer)
	
	Private _UnidadesPorPalets As System.Nullable(Of Integer)
	
	Private _Dimensiones As String
	
	Private _NoPermitirUtilzarArticulo As System.Nullable(Of Boolean)
	
	Private _NoImprimirArticuloListado As System.Nullable(Of Boolean)
	
	Private _DesactivarMensajesParaEsteArticulo As System.Nullable(Of Boolean)
	
	Private _ID_ArticuloConcatenado As System.Nullable(Of Integer)
	
	Private _ReferenciaDelProveedor As String
	
	Private _ImportePortesPorUnid As System.Nullable(Of Double)
	
	Private _NumeroCuentaVentas As String
	
	Private _NumeroCuentaCompras As String
	
	Private _Imagen As System.Data.Linq.Binary
	
	Private _FechaUltimaModif As System.Nullable(Of Date)
	
	Private _PesoArticulo As System.Nullable(Of Double)
	
	Private _GarantiaArticulo As String
	
	Private _MensajeEmergente As String
	
	Private _EsArticuloCompuesto As System.Nullable(Of Boolean)
	
	Private _EsEstocable As System.Nullable(Of Boolean)
	
	Private _PrecioVentaRecomendado As Double
	
	Private _Favorito As System.Nullable(Of Integer)
	
	Private _N_Articulos_ConsolidacionStocks As EntitySet(Of N_Articulos_ConsolidacionStock)
	
	Private _N_TipoIVA As EntityRef(Of N_TipoIVA)
	
	Private _N_Proveedor As EntityRef(Of N_Proveedor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ArticuloChanging(value As Long)
    End Sub
    Partial Private Sub OnID_ArticuloChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnCodigoEANChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoEANChanged()
    End Sub
    Partial Private Sub OnID_TipoArticuloChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_TipoArticuloChanged()
    End Sub
    Partial Private Sub OnEquivalenteChanging(value As String)
    End Sub
    Partial Private Sub OnEquivalenteChanged()
    End Sub
    Partial Private Sub OnCodigoCortoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCodigoCortoChanged()
    End Sub
    Partial Private Sub OnID_FamiliaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_FamiliaChanged()
    End Sub
    Partial Private Sub OnDescripcionGeneralChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionGeneralChanged()
    End Sub
    Partial Private Sub OnDescripcionEtiquetasChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionEtiquetasChanged()
    End Sub
    Partial Private Sub OnDescripcionTicketsChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionTicketsChanged()
    End Sub
    Partial Private Sub OnDescripcionLargaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionLargaChanged()
    End Sub
    Partial Private Sub OnID_TipoIVAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_TipoIVAChanged()
    End Sub
    Partial Private Sub OnID_ProveedorHabitualChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ProveedorHabitualChanged()
    End Sub
    Partial Private Sub OnReferenciaChanging(value As String)
    End Sub
    Partial Private Sub OnReferenciaChanged()
    End Sub
    Partial Private Sub OnID_FabricanteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_FabricanteChanged()
    End Sub
    Partial Private Sub OnPrecioCompraChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPrecioCompraChanged()
    End Sub
    Partial Private Sub OnDescuento1Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuento1Changed()
    End Sub
    Partial Private Sub OnDescuento2Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuento2Changed()
    End Sub
    Partial Private Sub OnDescuento3Changing(value As String)
    End Sub
    Partial Private Sub OnDescuento3Changed()
    End Sub
    Partial Private Sub OnFechaAltaArticuloChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAltaArticuloChanged()
    End Sub
    Partial Private Sub OnMaximoDescuentoAplicableChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnMaximoDescuentoAplicableChanged()
    End Sub
    Partial Private Sub OnID_TallajeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_TallajeChanged()
    End Sub
    Partial Private Sub OnUbicacionEnAlmacenChanging(value As String)
    End Sub
    Partial Private Sub OnUbicacionEnAlmacenChanged()
    End Sub
    Partial Private Sub OnUnidadesLineaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUnidadesLineaChanged()
    End Sub
    Partial Private Sub OnUnidadesPorPaletsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUnidadesPorPaletsChanged()
    End Sub
    Partial Private Sub OnDimensionesChanging(value As String)
    End Sub
    Partial Private Sub OnDimensionesChanged()
    End Sub
    Partial Private Sub OnNoPermitirUtilzarArticuloChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNoPermitirUtilzarArticuloChanged()
    End Sub
    Partial Private Sub OnNoImprimirArticuloListadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNoImprimirArticuloListadoChanged()
    End Sub
    Partial Private Sub OnDesactivarMensajesParaEsteArticuloChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDesactivarMensajesParaEsteArticuloChanged()
    End Sub
    Partial Private Sub OnID_ArticuloConcatenadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ArticuloConcatenadoChanged()
    End Sub
    Partial Private Sub OnReferenciaDelProveedorChanging(value As String)
    End Sub
    Partial Private Sub OnReferenciaDelProveedorChanged()
    End Sub
    Partial Private Sub OnImportePortesPorUnidChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnImportePortesPorUnidChanged()
    End Sub
    Partial Private Sub OnNumeroCuentaVentasChanging(value As String)
    End Sub
    Partial Private Sub OnNumeroCuentaVentasChanged()
    End Sub
    Partial Private Sub OnNumeroCuentaComprasChanging(value As String)
    End Sub
    Partial Private Sub OnNumeroCuentaComprasChanged()
    End Sub
    Partial Private Sub OnImagenChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImagenChanged()
    End Sub
    Partial Private Sub OnFechaUltimaModifChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaUltimaModifChanged()
    End Sub
    Partial Private Sub OnPesoArticuloChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPesoArticuloChanged()
    End Sub
    Partial Private Sub OnGarantiaArticuloChanging(value As String)
    End Sub
    Partial Private Sub OnGarantiaArticuloChanged()
    End Sub
    Partial Private Sub OnMensajeEmergenteChanging(value As String)
    End Sub
    Partial Private Sub OnMensajeEmergenteChanged()
    End Sub
    Partial Private Sub OnEsArticuloCompuestoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEsArticuloCompuestoChanged()
    End Sub
    Partial Private Sub OnEsEstocableChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEsEstocableChanged()
    End Sub
    Partial Private Sub OnPrecioVentaRecomendadoChanging(value As Double)
    End Sub
    Partial Private Sub OnPrecioVentaRecomendadoChanged()
    End Sub
    Partial Private Sub OnFavoritoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFavoritoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_Articulos_ConsolidacionStocks = New EntitySet(Of N_Articulos_ConsolidacionStock)(AddressOf Me.attach_N_Articulos_ConsolidacionStocks, AddressOf Me.detach_N_Articulos_ConsolidacionStocks)
		Me._N_TipoIVA = CType(Nothing, EntityRef(Of N_TipoIVA))
		Me._N_Proveedor = CType(Nothing, EntityRef(Of N_Proveedor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Articulo", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Articulo() As Long
		Get
			Return Me._ID_Articulo
		End Get
		Set
			If ((Me._ID_Articulo = value)  _
						= false) Then
				Me.OnID_ArticuloChanging(value)
				Me.SendPropertyChanging
				Me._ID_Articulo = value
				Me.SendPropertyChanged("ID_Articulo")
				Me.OnID_ArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(13) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoEAN", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CodigoEAN() As String
		Get
			Return Me._CodigoEAN
		End Get
		Set
			If (String.Equals(Me._CodigoEAN, value) = false) Then
				Me.OnCodigoEANChanging(value)
				Me.SendPropertyChanging
				Me._CodigoEAN = value
				Me.SendPropertyChanged("CodigoEAN")
				Me.OnCodigoEANChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoArticulo", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_TipoArticulo() As Integer
		Get
			Return Me._ID_TipoArticulo
		End Get
		Set
			If ((Me._ID_TipoArticulo = value)  _
						= false) Then
				Me.OnID_TipoArticuloChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoArticulo = value
				Me.SendPropertyChanged("ID_TipoArticulo")
				Me.OnID_TipoArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Equivalente", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Equivalente() As String
		Get
			Return Me._Equivalente
		End Get
		Set
			If (String.Equals(Me._Equivalente, value) = false) Then
				Me.OnEquivalenteChanging(value)
				Me.SendPropertyChanging
				Me._Equivalente = value
				Me.SendPropertyChanged("Equivalente")
				Me.OnEquivalenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoCorto", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CodigoCorto() As System.Nullable(Of Integer)
		Get
			Return Me._CodigoCorto
		End Get
		Set
			If (Me._CodigoCorto.Equals(value) = false) Then
				Me.OnCodigoCortoChanging(value)
				Me.SendPropertyChanging
				Me._CodigoCorto = value
				Me.SendPropertyChanged("CodigoCorto")
				Me.OnCodigoCortoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Familia", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Familia() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Familia
		End Get
		Set
			If (Me._ID_Familia.Equals(value) = false) Then
				Me.OnID_FamiliaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Familia = value
				Me.SendPropertyChanged("ID_Familia")
				Me.OnID_FamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionGeneral", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DescripcionGeneral() As String
		Get
			Return Me._DescripcionGeneral
		End Get
		Set
			If (String.Equals(Me._DescripcionGeneral, value) = false) Then
				Me.OnDescripcionGeneralChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionGeneral = value
				Me.SendPropertyChanged("DescripcionGeneral")
				Me.OnDescripcionGeneralChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionEtiquetas", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DescripcionEtiquetas() As String
		Get
			Return Me._DescripcionEtiquetas
		End Get
		Set
			If (String.Equals(Me._DescripcionEtiquetas, value) = false) Then
				Me.OnDescripcionEtiquetasChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionEtiquetas = value
				Me.SendPropertyChanged("DescripcionEtiquetas")
				Me.OnDescripcionEtiquetasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionTickets", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DescripcionTickets() As String
		Get
			Return Me._DescripcionTickets
		End Get
		Set
			If (String.Equals(Me._DescripcionTickets, value) = false) Then
				Me.OnDescripcionTicketsChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionTickets = value
				Me.SendPropertyChanged("DescripcionTickets")
				Me.OnDescripcionTicketsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionLarga", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DescripcionLarga() As String
		Get
			Return Me._DescripcionLarga
		End Get
		Set
			If (String.Equals(Me._DescripcionLarga, value) = false) Then
				Me.OnDescripcionLargaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionLarga = value
				Me.SendPropertyChanged("DescripcionLarga")
				Me.OnDescripcionLargaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoIVA", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_TipoIVA() As System.Nullable(Of Integer)
		Get
			Return Me._ID_TipoIVA
		End Get
		Set
			If (Me._ID_TipoIVA.Equals(value) = false) Then
				If Me._N_TipoIVA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_TipoIVAChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoIVA = value
				Me.SendPropertyChanged("ID_TipoIVA")
				Me.OnID_TipoIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ProveedorHabitual", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ProveedorHabitual() As System.Nullable(Of Integer)
		Get
			Return Me._ID_ProveedorHabitual
		End Get
		Set
			If (Me._ID_ProveedorHabitual.Equals(value) = false) Then
				If Me._N_Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProveedorHabitualChanging(value)
				Me.SendPropertyChanging
				Me._ID_ProveedorHabitual = value
				Me.SendPropertyChanged("ID_ProveedorHabitual")
				Me.OnID_ProveedorHabitualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Referencia", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Referencia() As String
		Get
			Return Me._Referencia
		End Get
		Set
			If (String.Equals(Me._Referencia, value) = false) Then
				Me.OnReferenciaChanging(value)
				Me.SendPropertyChanging
				Me._Referencia = value
				Me.SendPropertyChanged("Referencia")
				Me.OnReferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Fabricante", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Fabricante() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Fabricante
		End Get
		Set
			If (Me._ID_Fabricante.Equals(value) = false) Then
				Me.OnID_FabricanteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Fabricante = value
				Me.SendPropertyChanged("ID_Fabricante")
				Me.OnID_FabricanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrecioCompra", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PrecioCompra() As System.Nullable(Of Double)
		Get
			Return Me._PrecioCompra
		End Get
		Set
			If (Me._PrecioCompra.Equals(value) = false) Then
				Me.OnPrecioCompraChanging(value)
				Me.SendPropertyChanging
				Me._PrecioCompra = value
				Me.SendPropertyChanged("PrecioCompra")
				Me.OnPrecioCompraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento1", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descuento1() As System.Nullable(Of Double)
		Get
			Return Me._Descuento1
		End Get
		Set
			If (Me._Descuento1.Equals(value) = false) Then
				Me.OnDescuento1Changing(value)
				Me.SendPropertyChanging
				Me._Descuento1 = value
				Me.SendPropertyChanged("Descuento1")
				Me.OnDescuento1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento2", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descuento2() As System.Nullable(Of Double)
		Get
			Return Me._Descuento2
		End Get
		Set
			If (Me._Descuento2.Equals(value) = false) Then
				Me.OnDescuento2Changing(value)
				Me.SendPropertyChanging
				Me._Descuento2 = value
				Me.SendPropertyChanged("Descuento2")
				Me.OnDescuento2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento3", DbType:="NChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descuento3() As String
		Get
			Return Me._Descuento3
		End Get
		Set
			If (String.Equals(Me._Descuento3, value) = false) Then
				Me.OnDescuento3Changing(value)
				Me.SendPropertyChanging
				Me._Descuento3 = value
				Me.SendPropertyChanged("Descuento3")
				Me.OnDescuento3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAltaArticulo", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAltaArticulo() As System.Nullable(Of Date)
		Get
			Return Me._FechaAltaArticulo
		End Get
		Set
			If (Me._FechaAltaArticulo.Equals(value) = false) Then
				Me.OnFechaAltaArticuloChanging(value)
				Me.SendPropertyChanging
				Me._FechaAltaArticulo = value
				Me.SendPropertyChanged("FechaAltaArticulo")
				Me.OnFechaAltaArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaximoDescuentoAplicable", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MaximoDescuentoAplicable() As System.Nullable(Of Double)
		Get
			Return Me._MaximoDescuentoAplicable
		End Get
		Set
			If (Me._MaximoDescuentoAplicable.Equals(value) = false) Then
				Me.OnMaximoDescuentoAplicableChanging(value)
				Me.SendPropertyChanging
				Me._MaximoDescuentoAplicable = value
				Me.SendPropertyChanged("MaximoDescuentoAplicable")
				Me.OnMaximoDescuentoAplicableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Tallaje", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Tallaje() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Tallaje
		End Get
		Set
			If (Me._ID_Tallaje.Equals(value) = false) Then
				Me.OnID_TallajeChanging(value)
				Me.SendPropertyChanging
				Me._ID_Tallaje = value
				Me.SendPropertyChanged("ID_Tallaje")
				Me.OnID_TallajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UbicacionEnAlmacen", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UbicacionEnAlmacen() As String
		Get
			Return Me._UbicacionEnAlmacen
		End Get
		Set
			If (String.Equals(Me._UbicacionEnAlmacen, value) = false) Then
				Me.OnUbicacionEnAlmacenChanging(value)
				Me.SendPropertyChanging
				Me._UbicacionEnAlmacen = value
				Me.SendPropertyChanged("UbicacionEnAlmacen")
				Me.OnUbicacionEnAlmacenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnidadesLinea", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UnidadesLinea() As System.Nullable(Of Integer)
		Get
			Return Me._UnidadesLinea
		End Get
		Set
			If (Me._UnidadesLinea.Equals(value) = false) Then
				Me.OnUnidadesLineaChanging(value)
				Me.SendPropertyChanging
				Me._UnidadesLinea = value
				Me.SendPropertyChanged("UnidadesLinea")
				Me.OnUnidadesLineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnidadesPorPalets", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UnidadesPorPalets() As System.Nullable(Of Integer)
		Get
			Return Me._UnidadesPorPalets
		End Get
		Set
			If (Me._UnidadesPorPalets.Equals(value) = false) Then
				Me.OnUnidadesPorPaletsChanging(value)
				Me.SendPropertyChanging
				Me._UnidadesPorPalets = value
				Me.SendPropertyChanged("UnidadesPorPalets")
				Me.OnUnidadesPorPaletsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dimensiones", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Dimensiones() As String
		Get
			Return Me._Dimensiones
		End Get
		Set
			If (String.Equals(Me._Dimensiones, value) = false) Then
				Me.OnDimensionesChanging(value)
				Me.SendPropertyChanging
				Me._Dimensiones = value
				Me.SendPropertyChanged("Dimensiones")
				Me.OnDimensionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoPermitirUtilzarArticulo", DbType:="Bit", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NoPermitirUtilzarArticulo() As System.Nullable(Of Boolean)
		Get
			Return Me._NoPermitirUtilzarArticulo
		End Get
		Set
			If (Me._NoPermitirUtilzarArticulo.Equals(value) = false) Then
				Me.OnNoPermitirUtilzarArticuloChanging(value)
				Me.SendPropertyChanging
				Me._NoPermitirUtilzarArticulo = value
				Me.SendPropertyChanged("NoPermitirUtilzarArticulo")
				Me.OnNoPermitirUtilzarArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoImprimirArticuloListado", DbType:="Bit", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NoImprimirArticuloListado() As System.Nullable(Of Boolean)
		Get
			Return Me._NoImprimirArticuloListado
		End Get
		Set
			If (Me._NoImprimirArticuloListado.Equals(value) = false) Then
				Me.OnNoImprimirArticuloListadoChanging(value)
				Me.SendPropertyChanging
				Me._NoImprimirArticuloListado = value
				Me.SendPropertyChanged("NoImprimirArticuloListado")
				Me.OnNoImprimirArticuloListadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DesactivarMensajesParaEsteArticulo", DbType:="Bit", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DesactivarMensajesParaEsteArticulo() As System.Nullable(Of Boolean)
		Get
			Return Me._DesactivarMensajesParaEsteArticulo
		End Get
		Set
			If (Me._DesactivarMensajesParaEsteArticulo.Equals(value) = false) Then
				Me.OnDesactivarMensajesParaEsteArticuloChanging(value)
				Me.SendPropertyChanging
				Me._DesactivarMensajesParaEsteArticulo = value
				Me.SendPropertyChanged("DesactivarMensajesParaEsteArticulo")
				Me.OnDesactivarMensajesParaEsteArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ArticuloConcatenado", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_ArticuloConcatenado() As System.Nullable(Of Integer)
		Get
			Return Me._ID_ArticuloConcatenado
		End Get
		Set
			If (Me._ID_ArticuloConcatenado.Equals(value) = false) Then
				Me.OnID_ArticuloConcatenadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_ArticuloConcatenado = value
				Me.SendPropertyChanged("ID_ArticuloConcatenado")
				Me.OnID_ArticuloConcatenadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReferenciaDelProveedor", DbType:="NChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ReferenciaDelProveedor() As String
		Get
			Return Me._ReferenciaDelProveedor
		End Get
		Set
			If (String.Equals(Me._ReferenciaDelProveedor, value) = false) Then
				Me.OnReferenciaDelProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ReferenciaDelProveedor = value
				Me.SendPropertyChanged("ReferenciaDelProveedor")
				Me.OnReferenciaDelProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImportePortesPorUnid", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImportePortesPorUnid() As System.Nullable(Of Double)
		Get
			Return Me._ImportePortesPorUnid
		End Get
		Set
			If (Me._ImportePortesPorUnid.Equals(value) = false) Then
				Me.OnImportePortesPorUnidChanging(value)
				Me.SendPropertyChanging
				Me._ImportePortesPorUnid = value
				Me.SendPropertyChanged("ImportePortesPorUnid")
				Me.OnImportePortesPorUnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeroCuentaVentas", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumeroCuentaVentas() As String
		Get
			Return Me._NumeroCuentaVentas
		End Get
		Set
			If (String.Equals(Me._NumeroCuentaVentas, value) = false) Then
				Me.OnNumeroCuentaVentasChanging(value)
				Me.SendPropertyChanging
				Me._NumeroCuentaVentas = value
				Me.SendPropertyChanged("NumeroCuentaVentas")
				Me.OnNumeroCuentaVentasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeroCuentaCompras", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NumeroCuentaCompras() As String
		Get
			Return Me._NumeroCuentaCompras
		End Get
		Set
			If (String.Equals(Me._NumeroCuentaCompras, value) = false) Then
				Me.OnNumeroCuentaComprasChanging(value)
				Me.SendPropertyChanging
				Me._NumeroCuentaCompras = value
				Me.SendPropertyChanged("NumeroCuentaCompras")
				Me.OnNumeroCuentaComprasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Imagen", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Imagen() As System.Data.Linq.Binary
		Get
			Return Me._Imagen
		End Get
		Set
			If (Object.Equals(Me._Imagen, value) = false) Then
				Me.OnImagenChanging(value)
				Me.SendPropertyChanging
				Me._Imagen = value
				Me.SendPropertyChanged("Imagen")
				Me.OnImagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaUltimaModif", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaUltimaModif() As System.Nullable(Of Date)
		Get
			Return Me._FechaUltimaModif
		End Get
		Set
			If (Me._FechaUltimaModif.Equals(value) = false) Then
				Me.OnFechaUltimaModifChanging(value)
				Me.SendPropertyChanging
				Me._FechaUltimaModif = value
				Me.SendPropertyChanged("FechaUltimaModif")
				Me.OnFechaUltimaModifChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PesoArticulo", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PesoArticulo() As System.Nullable(Of Double)
		Get
			Return Me._PesoArticulo
		End Get
		Set
			If (Me._PesoArticulo.Equals(value) = false) Then
				Me.OnPesoArticuloChanging(value)
				Me.SendPropertyChanging
				Me._PesoArticulo = value
				Me.SendPropertyChanged("PesoArticulo")
				Me.OnPesoArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GarantiaArticulo", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property GarantiaArticulo() As String
		Get
			Return Me._GarantiaArticulo
		End Get
		Set
			If (String.Equals(Me._GarantiaArticulo, value) = false) Then
				Me.OnGarantiaArticuloChanging(value)
				Me.SendPropertyChanging
				Me._GarantiaArticulo = value
				Me.SendPropertyChanged("GarantiaArticulo")
				Me.OnGarantiaArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MensajeEmergente", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MensajeEmergente() As String
		Get
			Return Me._MensajeEmergente
		End Get
		Set
			If (String.Equals(Me._MensajeEmergente, value) = false) Then
				Me.OnMensajeEmergenteChanging(value)
				Me.SendPropertyChanging
				Me._MensajeEmergente = value
				Me.SendPropertyChanged("MensajeEmergente")
				Me.OnMensajeEmergenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EsArticuloCompuesto", DbType:="Bit", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EsArticuloCompuesto() As System.Nullable(Of Boolean)
		Get
			Return Me._EsArticuloCompuesto
		End Get
		Set
			If (Me._EsArticuloCompuesto.Equals(value) = false) Then
				Me.OnEsArticuloCompuestoChanging(value)
				Me.SendPropertyChanging
				Me._EsArticuloCompuesto = value
				Me.SendPropertyChanged("EsArticuloCompuesto")
				Me.OnEsArticuloCompuestoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EsEstocable", DbType:="Bit", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EsEstocable() As System.Nullable(Of Boolean)
		Get
			Return Me._EsEstocable
		End Get
		Set
			If (Me._EsEstocable.Equals(value) = false) Then
				Me.OnEsEstocableChanging(value)
				Me.SendPropertyChanging
				Me._EsEstocable = value
				Me.SendPropertyChanged("EsEstocable")
				Me.OnEsEstocableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrecioVentaRecomendado", DbType:="Float NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PrecioVentaRecomendado() As Double
		Get
			Return Me._PrecioVentaRecomendado
		End Get
		Set
			If ((Me._PrecioVentaRecomendado = value)  _
						= false) Then
				Me.OnPrecioVentaRecomendadoChanging(value)
				Me.SendPropertyChanging
				Me._PrecioVentaRecomendado = value
				Me.SendPropertyChanged("PrecioVentaRecomendado")
				Me.OnPrecioVentaRecomendadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Favorito", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Favorito() As System.Nullable(Of Integer)
		Get
			Return Me._Favorito
		End Get
		Set
			If (Me._Favorito.Equals(value) = false) Then
				Me.OnFavoritoChanging(value)
				Me.SendPropertyChanging
				Me._Favorito = value
				Me.SendPropertyChanged("Favorito")
				Me.OnFavoritoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Articulo_N_Articulos_ConsolidacionStock", Storage:="_N_Articulos_ConsolidacionStocks", ThisKey:="ID_Articulo", OtherKey:="ID_Articulo")>  _
	Public Property N_Articulos_ConsolidacionStocks() As EntitySet(Of N_Articulos_ConsolidacionStock)
		Get
			Return Me._N_Articulos_ConsolidacionStocks
		End Get
		Set
			Me._N_Articulos_ConsolidacionStocks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_TipoIVA_N_Articulo", Storage:="_N_TipoIVA", ThisKey:="ID_TipoIVA", OtherKey:="ID_TipoIVA", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property N_TipoIVA() As N_TipoIVA
		Get
			Return Me._N_TipoIVA.Entity
		End Get
		Set
			Dim previousValue As N_TipoIVA = Me._N_TipoIVA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_TipoIVA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_TipoIVA.Entity = Nothing
					previousValue.N_Articulos.Remove(Me)
				End If
				Me._N_TipoIVA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Articulos.Add(Me)
					Me._ID_TipoIVA = value.ID_TipoIVA
				Else
					Me._ID_TipoIVA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("N_TipoIVA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Proveedor_N_Articulo", Storage:="_N_Proveedor", ThisKey:="ID_ProveedorHabitual", OtherKey:="ID_Proveedor", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property N_Proveedor() As N_Proveedor
		Get
			Return Me._N_Proveedor.Entity
		End Get
		Set
			Dim previousValue As N_Proveedor = Me._N_Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_Proveedor.Entity = Nothing
					previousValue.N_Articulos.Remove(Me)
				End If
				Me._N_Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Articulos.Add(Me)
					Me._ID_ProveedorHabitual = value.ID_Proveedor
				Else
					Me._ID_ProveedorHabitual = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("N_Proveedor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_N_Articulos_ConsolidacionStocks(ByVal entity As N_Articulos_ConsolidacionStock)
		Me.SendPropertyChanging
		entity.N_Articulo = Me
	End Sub
	
	Private Sub detach_N_Articulos_ConsolidacionStocks(ByVal entity As N_Articulos_ConsolidacionStock)
		Me.SendPropertyChanging
		entity.N_Articulo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PagosPaciente")>  _
Partial Public Class PagosPaciente
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDEntrega As Long
	
	Private _IDPaciente As System.Nullable(Of Integer)
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _Importe As System.Nullable(Of Double)
	
	Private _IDFormaPago As String
	
	Private _Notas As String
	
	Private _IDUsuario As System.Nullable(Of Integer)
	
	Private _Automatico As Boolean
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
	Private _FORMASPAGO As EntityRef(Of FORMASPAGO)
	
	Private _USUARIO As EntityRef(Of USUARIO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDEntregaChanging(value As Long)
    End Sub
    Partial Private Sub OnIDEntregaChanged()
    End Sub
    Partial Private Sub OnIDPacienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDPacienteChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    Partial Private Sub OnIDFormaPagoChanging(value As String)
    End Sub
    Partial Private Sub OnIDFormaPagoChanged()
    End Sub
    Partial Private Sub OnNotasChanging(value As String)
    End Sub
    Partial Private Sub OnNotasChanged()
    End Sub
    Partial Private Sub OnIDUsuarioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDUsuarioChanged()
    End Sub
    Partial Private Sub OnAutomaticoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAutomaticoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		Me._FORMASPAGO = CType(Nothing, EntityRef(Of FORMASPAGO))
		Me._USUARIO = CType(Nothing, EntityRef(Of USUARIO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDEntrega", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDEntrega() As Long
		Get
			Return Me._IDEntrega
		End Get
		Set
			If ((Me._IDEntrega = value)  _
						= false) Then
				Me.OnIDEntregaChanging(value)
				Me.SendPropertyChanging
				Me._IDEntrega = value
				Me.SendPropertyChanged("IDEntrega")
				Me.OnIDEntregaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPaciente", DbType:="Int")>  _
	Public Property IDPaciente() As System.Nullable(Of Integer)
		Get
			Return Me._IDPaciente
		End Get
		Set
			If (Me._IDPaciente.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDPacienteChanging(value)
				Me.SendPropertyChanging
				Me._IDPaciente = value
				Me.SendPropertyChanged("IDPaciente")
				Me.OnIDPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="DateTime")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Float")>  _
	Public Property Importe() As System.Nullable(Of Double)
		Get
			Return Me._Importe
		End Get
		Set
			If (Me._Importe.Equals(value) = false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDFormaPago", DbType:="VarChar(10)")>  _
	Public Property IDFormaPago() As String
		Get
			Return Me._IDFormaPago
		End Get
		Set
			If (String.Equals(Me._IDFormaPago, value) = false) Then
				If Me._FORMASPAGO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDFormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._IDFormaPago = value
				Me.SendPropertyChanged("IDFormaPago")
				Me.OnIDFormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notas", DbType:="NVarChar(MAX)")>  _
	Public Property Notas() As String
		Get
			Return Me._Notas
		End Get
		Set
			If (String.Equals(Me._Notas, value) = false) Then
				Me.OnNotasChanging(value)
				Me.SendPropertyChanging
				Me._Notas = value
				Me.SendPropertyChanged("Notas")
				Me.OnNotasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDUsuario", DbType:="Int")>  _
	Public Property IDUsuario() As System.Nullable(Of Integer)
		Get
			Return Me._IDUsuario
		End Get
		Set
			If (Me._IDUsuario.Equals(value) = false) Then
				If Me._USUARIO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._IDUsuario = value
				Me.SendPropertyChanged("IDUsuario")
				Me.OnIDUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Automatico")>  _
	Public Property Automatico() As Boolean
		Get
			Return Me._Automatico
		End Get
		Set
			If ((Me._Automatico = value)  _
						= false) Then
				Me.OnAutomaticoChanging(value)
				Me.SendPropertyChanging
				Me._Automatico = value
				Me.SendPropertyChanged("Automatico")
				Me.OnAutomaticoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_PagosPaciente", Storage:="_PACIENTE", ThisKey:="IDPaciente", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.PagosPacientes.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PagosPacientes.Add(Me)
					Me._IDPaciente = value.CPACIENTE
				Else
					Me._IDPaciente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_PagosPaciente", Storage:="_FORMASPAGO", ThisKey:="IDFormaPago", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property FORMASPAGO() As FORMASPAGO
		Get
			Return Me._FORMASPAGO.Entity
		End Get
		Set
			Dim previousValue As FORMASPAGO = Me._FORMASPAGO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FORMASPAGO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FORMASPAGO.Entity = Nothing
					previousValue.PagosPacientes.Remove(Me)
				End If
				Me._FORMASPAGO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PagosPacientes.Add(Me)
					Me._IDFormaPago = value.CODIGO
				Else
					Me._IDFormaPago = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("FORMASPAGO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIO_PagosPaciente", Storage:="_USUARIO", ThisKey:="IDUsuario", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property USUARIO() As USUARIO
		Get
			Return Me._USUARIO.Entity
		End Get
		Set
			Dim previousValue As USUARIO = Me._USUARIO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._USUARIO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._USUARIO.Entity = Nothing
					previousValue.PagosPacientes.Remove(Me)
				End If
				Me._USUARIO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PagosPacientes.Add(Me)
					Me._IDUsuario = value.CODIGO
				Else
					Me._IDUsuario = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("USUARIO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ROLES")>  _
Partial Public Class ROLE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ROLE As Integer
	
	Private _Nombre As String
	
	Private _Fixed As Boolean
	
	Private _ROLESUSUARIOs As EntitySet(Of ROLESUSUARIO)
	
	Private _ROLESPERMISOs As EntitySet(Of ROLESPERMISO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ROLEChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ROLEChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnFixedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFixedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROLESUSUARIOs = New EntitySet(Of ROLESUSUARIO)(AddressOf Me.attach_ROLESUSUARIOs, AddressOf Me.detach_ROLESUSUARIOs)
		Me._ROLESPERMISOs = New EntitySet(Of ROLESPERMISO)(AddressOf Me.attach_ROLESPERMISOs, AddressOf Me.detach_ROLESPERMISOs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ROLE", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_ROLE() As Integer
		Get
			Return Me._ID_ROLE
		End Get
		Set
			If ((Me._ID_ROLE = value)  _
						= false) Then
				Me.OnID_ROLEChanging(value)
				Me.SendPropertyChanging
				Me._ID_ROLE = value
				Me.SendPropertyChanged("ID_ROLE")
				Me.OnID_ROLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fixed", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fixed() As Boolean
		Get
			Return Me._Fixed
		End Get
		Set
			If ((Me._Fixed = value)  _
						= false) Then
				Me.OnFixedChanging(value)
				Me.SendPropertyChanging
				Me._Fixed = value
				Me.SendPropertyChanged("Fixed")
				Me.OnFixedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROLE_ROLESUSUARIO", Storage:="_ROLESUSUARIOs", ThisKey:="ID_ROLE", OtherKey:="ID_ROLES")>  _
	Public Property ROLESUSUARIOs() As EntitySet(Of ROLESUSUARIO)
		Get
			Return Me._ROLESUSUARIOs
		End Get
		Set
			Me._ROLESUSUARIOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROLE_ROLESPERMISO", Storage:="_ROLESPERMISOs", ThisKey:="ID_ROLE", OtherKey:="ID_ROLES")>  _
	Public Property ROLESPERMISOs() As EntitySet(Of ROLESPERMISO)
		Get
			Return Me._ROLESPERMISOs
		End Get
		Set
			Me._ROLESPERMISOs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ROLESUSUARIOs(ByVal entity As ROLESUSUARIO)
		Me.SendPropertyChanging
		entity.ROLE = Me
	End Sub
	
	Private Sub detach_ROLESUSUARIOs(ByVal entity As ROLESUSUARIO)
		Me.SendPropertyChanging
		entity.ROLE = Nothing
	End Sub
	
	Private Sub attach_ROLESPERMISOs(ByVal entity As ROLESPERMISO)
		Me.SendPropertyChanging
		entity.ROLE = Me
	End Sub
	
	Private Sub detach_ROLESPERMISOs(ByVal entity As ROLESPERMISO)
		Me.SendPropertyChanging
		entity.ROLE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ROLESITEMS")>  _
Partial Public Class ROLESITEM
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ROLESITEM As Integer
	
	Private _Nombre As String
	
	Private _ROLESPERMISOs As EntitySet(Of ROLESPERMISO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ROLESITEMChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ROLESITEMChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROLESPERMISOs = New EntitySet(Of ROLESPERMISO)(AddressOf Me.attach_ROLESPERMISOs, AddressOf Me.detach_ROLESPERMISOs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ROLESITEM", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_ROLESITEM() As Integer
		Get
			Return Me._ID_ROLESITEM
		End Get
		Set
			If ((Me._ID_ROLESITEM = value)  _
						= false) Then
				Me.OnID_ROLESITEMChanging(value)
				Me.SendPropertyChanging
				Me._ID_ROLESITEM = value
				Me.SendPropertyChanged("ID_ROLESITEM")
				Me.OnID_ROLESITEMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROLESITEM_ROLESPERMISO", Storage:="_ROLESPERMISOs", ThisKey:="ID_ROLESITEM", OtherKey:="ID_ROLESITEM")>  _
	Public Property ROLESPERMISOs() As EntitySet(Of ROLESPERMISO)
		Get
			Return Me._ROLESPERMISOs
		End Get
		Set
			Me._ROLESPERMISOs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ROLESPERMISOs(ByVal entity As ROLESPERMISO)
		Me.SendPropertyChanging
		entity.ROLESITEM = Me
	End Sub
	
	Private Sub detach_ROLESPERMISOs(ByVal entity As ROLESPERMISO)
		Me.SendPropertyChanging
		entity.ROLESITEM = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ROLESUSUARIOS")>  _
Partial Public Class ROLESUSUARIO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ROLES As Integer
	
	Private _ID_USUARIO As Integer
	
	Private _Nota As String
	
	Private _ROLE As EntityRef(Of ROLE)
	
	Private _USUARIO As EntityRef(Of USUARIO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ROLESChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ROLESChanged()
    End Sub
    Partial Private Sub OnID_USUARIOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_USUARIOChanged()
    End Sub
    Partial Private Sub OnNotaChanging(value As String)
    End Sub
    Partial Private Sub OnNotaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROLE = CType(Nothing, EntityRef(Of ROLE))
		Me._USUARIO = CType(Nothing, EntityRef(Of USUARIO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ROLES", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_ROLES() As Integer
		Get
			Return Me._ID_ROLES
		End Get
		Set
			If ((Me._ID_ROLES = value)  _
						= false) Then
				If Me._ROLE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ROLESChanging(value)
				Me.SendPropertyChanging
				Me._ID_ROLES = value
				Me.SendPropertyChanged("ID_ROLES")
				Me.OnID_ROLESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_USUARIO", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_USUARIO() As Integer
		Get
			Return Me._ID_USUARIO
		End Get
		Set
			If ((Me._ID_USUARIO = value)  _
						= false) Then
				If Me._USUARIO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_USUARIOChanging(value)
				Me.SendPropertyChanging
				Me._ID_USUARIO = value
				Me.SendPropertyChanged("ID_USUARIO")
				Me.OnID_USUARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nota", DbType:="NChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nota() As String
		Get
			Return Me._Nota
		End Get
		Set
			If (String.Equals(Me._Nota, value) = false) Then
				Me.OnNotaChanging(value)
				Me.SendPropertyChanging
				Me._Nota = value
				Me.SendPropertyChanged("Nota")
				Me.OnNotaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROLE_ROLESUSUARIO", Storage:="_ROLE", ThisKey:="ID_ROLES", OtherKey:="ID_ROLE", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property ROLE() As ROLE
		Get
			Return Me._ROLE.Entity
		End Get
		Set
			Dim previousValue As ROLE = Me._ROLE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROLE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROLE.Entity = Nothing
					previousValue.ROLESUSUARIOs.Remove(Me)
				End If
				Me._ROLE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROLESUSUARIOs.Add(Me)
					Me._ID_ROLES = value.ID_ROLE
				Else
					Me._ID_ROLES = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROLE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIO_ROLESUSUARIO", Storage:="_USUARIO", ThisKey:="ID_USUARIO", OtherKey:="CODIGO", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property USUARIO() As USUARIO
		Get
			Return Me._USUARIO.Entity
		End Get
		Set
			Dim previousValue As USUARIO = Me._USUARIO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._USUARIO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._USUARIO.Entity = Nothing
					previousValue.ROLESUSUARIOs.Remove(Me)
				End If
				Me._USUARIO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROLESUSUARIOs.Add(Me)
					Me._ID_USUARIO = value.CODIGO
				Else
					Me._ID_USUARIO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("USUARIO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ROLESPERMISOS")>  _
Partial Public Class ROLESPERMISO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ROLES As Integer
	
	Private _ID_PERMISO As Integer
	
	Private _ID_ROLESITEM As Integer
	
	Private _Notas As String
	
	Private _ROLE As EntityRef(Of ROLE)
	
	Private _ROLESITEM As EntityRef(Of ROLESITEM)
	
	Private _PERMISO As EntityRef(Of PERMISO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ROLESChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ROLESChanged()
    End Sub
    Partial Private Sub OnID_PERMISOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PERMISOChanged()
    End Sub
    Partial Private Sub OnID_ROLESITEMChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ROLESITEMChanged()
    End Sub
    Partial Private Sub OnNotasChanging(value As String)
    End Sub
    Partial Private Sub OnNotasChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROLE = CType(Nothing, EntityRef(Of ROLE))
		Me._ROLESITEM = CType(Nothing, EntityRef(Of ROLESITEM))
		Me._PERMISO = CType(Nothing, EntityRef(Of PERMISO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ROLES", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_ROLES() As Integer
		Get
			Return Me._ID_ROLES
		End Get
		Set
			If ((Me._ID_ROLES = value)  _
						= false) Then
				If Me._ROLE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ROLESChanging(value)
				Me.SendPropertyChanging
				Me._ID_ROLES = value
				Me.SendPropertyChanged("ID_ROLES")
				Me.OnID_ROLESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PERMISO", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_PERMISO() As Integer
		Get
			Return Me._ID_PERMISO
		End Get
		Set
			If ((Me._ID_PERMISO = value)  _
						= false) Then
				If Me._PERMISO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PERMISOChanging(value)
				Me.SendPropertyChanging
				Me._ID_PERMISO = value
				Me.SendPropertyChanged("ID_PERMISO")
				Me.OnID_PERMISOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ROLESITEM", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_ROLESITEM() As Integer
		Get
			Return Me._ID_ROLESITEM
		End Get
		Set
			If ((Me._ID_ROLESITEM = value)  _
						= false) Then
				If Me._ROLESITEM.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ROLESITEMChanging(value)
				Me.SendPropertyChanging
				Me._ID_ROLESITEM = value
				Me.SendPropertyChanged("ID_ROLESITEM")
				Me.OnID_ROLESITEMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notas", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Notas() As String
		Get
			Return Me._Notas
		End Get
		Set
			If (String.Equals(Me._Notas, value) = false) Then
				Me.OnNotasChanging(value)
				Me.SendPropertyChanging
				Me._Notas = value
				Me.SendPropertyChanged("Notas")
				Me.OnNotasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROLE_ROLESPERMISO", Storage:="_ROLE", ThisKey:="ID_ROLES", OtherKey:="ID_ROLE", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property ROLE() As ROLE
		Get
			Return Me._ROLE.Entity
		End Get
		Set
			Dim previousValue As ROLE = Me._ROLE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROLE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROLE.Entity = Nothing
					previousValue.ROLESPERMISOs.Remove(Me)
				End If
				Me._ROLE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROLESPERMISOs.Add(Me)
					Me._ID_ROLES = value.ID_ROLE
				Else
					Me._ID_ROLES = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROLE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ROLESITEM_ROLESPERMISO", Storage:="_ROLESITEM", ThisKey:="ID_ROLESITEM", OtherKey:="ID_ROLESITEM", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property ROLESITEM() As ROLESITEM
		Get
			Return Me._ROLESITEM.Entity
		End Get
		Set
			Dim previousValue As ROLESITEM = Me._ROLESITEM.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ROLESITEM.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ROLESITEM.Entity = Nothing
					previousValue.ROLESPERMISOs.Remove(Me)
				End If
				Me._ROLESITEM.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROLESPERMISOs.Add(Me)
					Me._ID_ROLESITEM = value.ID_ROLESITEM
				Else
					Me._ID_ROLESITEM = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ROLESITEM")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERMISO_ROLESPERMISO", Storage:="_PERMISO", ThisKey:="ID_PERMISO", OtherKey:="CODIGO", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property PERMISO() As PERMISO
		Get
			Return Me._PERMISO.Entity
		End Get
		Set
			Dim previousValue As PERMISO = Me._PERMISO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PERMISO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PERMISO.Entity = Nothing
					previousValue.ROLESPERMISOs.Remove(Me)
				End If
				Me._PERMISO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ROLESPERMISOs.Add(Me)
					Me._ID_PERMISO = value.CODIGO
				Else
					Me._ID_PERMISO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PERMISO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PERMISOS")>  _
Partial Public Class PERMISO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As Integer
	
	Private _PERMISO As String
	
	Private _ROLESPERMISOs As EntitySet(Of ROLESPERMISO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As Integer)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnPERMISOChanging(value As String)
    End Sub
    Partial Private Sub OnPERMISOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ROLESPERMISOs = New EntitySet(Of ROLESPERMISO)(AddressOf Me.attach_ROLESPERMISOs, AddressOf Me.detach_ROLESPERMISOs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CODIGO() As Integer
		Get
			Return Me._CODIGO
		End Get
		Set
			If ((Me._CODIGO = value)  _
						= false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERMISO", DbType:="Char(12)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PERMISO() As String
		Get
			Return Me._PERMISO
		End Get
		Set
			If (String.Equals(Me._PERMISO, value) = false) Then
				Me.OnPERMISOChanging(value)
				Me.SendPropertyChanging
				Me._PERMISO = value
				Me.SendPropertyChanged("PERMISO")
				Me.OnPERMISOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERMISO_ROLESPERMISO", Storage:="_ROLESPERMISOs", ThisKey:="CODIGO", OtherKey:="ID_PERMISO")>  _
	Public Property ROLESPERMISOs() As EntitySet(Of ROLESPERMISO)
		Get
			Return Me._ROLESPERMISOs
		End Get
		Set
			Me._ROLESPERMISOs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ROLESPERMISOs(ByVal entity As ROLESPERMISO)
		Me.SendPropertyChanging
		entity.PERMISO = Me
	End Sub
	
	Private Sub detach_ROLESPERMISOs(ByVal entity As ROLESPERMISO)
		Me.SendPropertyChanging
		entity.PERMISO = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ReportesPersonalizados")>  _
Partial Public Class ReportesPersonalizado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDReporte As Integer
	
	Private _Descripcion As String
	
	Private _ID_Gabinete As System.Nullable(Of Integer)
	
	Private _Seccion As System.Nullable(Of Integer)
	
	Private _FileName As String
	
	Private _FechaAnnadido As System.Nullable(Of Date)
	
	Private _DataSourceName As String
	
	Private _PorDefecto As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDReporteChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDReporteChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnID_GabineteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_GabineteChanged()
    End Sub
    Partial Private Sub OnSeccionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSeccionChanged()
    End Sub
    Partial Private Sub OnFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnFileNameChanged()
    End Sub
    Partial Private Sub OnFechaAnnadidoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAnnadidoChanged()
    End Sub
    Partial Private Sub OnDataSourceNameChanging(value As String)
    End Sub
    Partial Private Sub OnDataSourceNameChanged()
    End Sub
    Partial Private Sub OnPorDefectoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPorDefectoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDReporte", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDReporte() As Integer
		Get
			Return Me._IDReporte
		End Get
		Set
			If ((Me._IDReporte = value)  _
						= false) Then
				Me.OnIDReporteChanging(value)
				Me.SendPropertyChanging
				Me._IDReporte = value
				Me.SendPropertyChanged("IDReporte")
				Me.OnIDReporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Gabinete", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Gabinete() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Gabinete
		End Get
		Set
			If (Me._ID_Gabinete.Equals(value) = false) Then
				Me.OnID_GabineteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Gabinete = value
				Me.SendPropertyChanged("ID_Gabinete")
				Me.OnID_GabineteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Seccion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Seccion() As System.Nullable(Of Integer)
		Get
			Return Me._Seccion
		End Get
		Set
			If (Me._Seccion.Equals(value) = false) Then
				Me.OnSeccionChanging(value)
				Me.SendPropertyChanging
				Me._Seccion = value
				Me.SendPropertyChanged("Seccion")
				Me.OnSeccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileName", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FileName() As String
		Get
			Return Me._FileName
		End Get
		Set
			If (String.Equals(Me._FileName, value) = false) Then
				Me.OnFileNameChanging(value)
				Me.SendPropertyChanging
				Me._FileName = value
				Me.SendPropertyChanged("FileName")
				Me.OnFileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAnnadido", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaAnnadido() As System.Nullable(Of Date)
		Get
			Return Me._FechaAnnadido
		End Get
		Set
			If (Me._FechaAnnadido.Equals(value) = false) Then
				Me.OnFechaAnnadidoChanging(value)
				Me.SendPropertyChanging
				Me._FechaAnnadido = value
				Me.SendPropertyChanged("FechaAnnadido")
				Me.OnFechaAnnadidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataSourceName", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DataSourceName() As String
		Get
			Return Me._DataSourceName
		End Get
		Set
			If (String.Equals(Me._DataSourceName, value) = false) Then
				Me.OnDataSourceNameChanging(value)
				Me.SendPropertyChanging
				Me._DataSourceName = value
				Me.SendPropertyChanged("DataSourceName")
				Me.OnDataSourceNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PorDefecto", DbType:="Bit", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PorDefecto() As System.Nullable(Of Boolean)
		Get
			Return Me._PorDefecto
		End Get
		Set
			If (Me._PorDefecto.Equals(value) = false) Then
				Me.OnPorDefectoChanging(value)
				Me.SendPropertyChanging
				Me._PorDefecto = value
				Me.SendPropertyChanged("PorDefecto")
				Me.OnPorDefectoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SERIES")>  _
Partial Public Class SERIES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As String
	
	Private _CONTADOR As Integer
	
	Private _FACTURAs As EntitySet(Of FACTURA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As String)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnCONTADORChanging(value As Integer)
    End Sub
    Partial Private Sub OnCONTADORChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FACTURAs = New EntitySet(Of FACTURA)(AddressOf Me.attach_FACTURAs, AddressOf Me.detach_FACTURAs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", DbType:="VarChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODIGO() As String
		Get
			Return Me._CODIGO
		End Get
		Set
			If (String.Equals(Me._CODIGO, value) = false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTADOR", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CONTADOR() As Integer
		Get
			Return Me._CONTADOR
		End Get
		Set
			If ((Me._CONTADOR = value)  _
						= false) Then
				Me.OnCONTADORChanging(value)
				Me.SendPropertyChanging
				Me._CONTADOR = value
				Me.SendPropertyChanged("CONTADOR")
				Me.OnCONTADORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SERIES_FACTURA", Storage:="_FACTURAs", ThisKey:="CODIGO", OtherKey:="REFSERIE")>  _
	Public Property FACTURAs() As EntitySet(Of FACTURA)
		Get
			Return Me._FACTURAs
		End Get
		Set
			Me._FACTURAs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FACTURAs(ByVal entity As FACTURA)
		Me.SendPropertyChanging
		entity.SERIES = Me
	End Sub
	
	Private Sub detach_FACTURAs(ByVal entity As FACTURA)
		Me.SendPropertyChanging
		entity.SERIES = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.d_Acciones")>  _
Partial Public Class d_Accione
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDOdontograma As System.Nullable(Of Integer)
	
	Private _FechaEjecucion As System.Nullable(Of Date)
	
	Private _IDMedico As System.Nullable(Of Integer)
	
	Private _DescripcionGenerada As String
	
	Private _IDGabinete As System.Nullable(Of Integer)
	
	Private _IDTratamiento As String
	
	Private _Cuadrantes As String
	
	Private _PiezasInvolucradas As String
	
	Private _Urgente As System.Nullable(Of Integer)
	
	Private _IDAccion As Long
	
	Private _d_PresupuestoLineas As EntitySet(Of d_PresupuestoLinea)
	
	Private _d_Odontograma As EntityRef(Of d_Odontograma)
	
	Private _CONCEPTOSFRA As EntityRef(Of CONCEPTOSFRA)
	
	Private _MEDICO As EntityRef(Of MEDICO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDOdontogramaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDOdontogramaChanged()
    End Sub
    Partial Private Sub OnFechaEjecucionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaEjecucionChanged()
    End Sub
    Partial Private Sub OnIDMedicoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDMedicoChanged()
    End Sub
    Partial Private Sub OnDescripcionGeneradaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionGeneradaChanged()
    End Sub
    Partial Private Sub OnIDGabineteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDGabineteChanged()
    End Sub
    Partial Private Sub OnIDTratamientoChanging(value As String)
    End Sub
    Partial Private Sub OnIDTratamientoChanged()
    End Sub
    Partial Private Sub OnCuadrantesChanging(value As String)
    End Sub
    Partial Private Sub OnCuadrantesChanged()
    End Sub
    Partial Private Sub OnPiezasInvolucradasChanging(value As String)
    End Sub
    Partial Private Sub OnPiezasInvolucradasChanged()
    End Sub
    Partial Private Sub OnUrgenteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUrgenteChanged()
    End Sub
    Partial Private Sub OnIDAccionChanging(value As Long)
    End Sub
    Partial Private Sub OnIDAccionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._d_PresupuestoLineas = New EntitySet(Of d_PresupuestoLinea)(AddressOf Me.attach_d_PresupuestoLineas, AddressOf Me.detach_d_PresupuestoLineas)
		Me._d_Odontograma = CType(Nothing, EntityRef(Of d_Odontograma))
		Me._CONCEPTOSFRA = CType(Nothing, EntityRef(Of CONCEPTOSFRA))
		Me._MEDICO = CType(Nothing, EntityRef(Of MEDICO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDOdontograma", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IDOdontograma() As System.Nullable(Of Integer)
		Get
			Return Me._IDOdontograma
		End Get
		Set
			If (Me._IDOdontograma.Equals(value) = false) Then
				If Me._d_Odontograma.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDOdontogramaChanging(value)
				Me.SendPropertyChanging
				Me._IDOdontograma = value
				Me.SendPropertyChanged("IDOdontograma")
				Me.OnIDOdontogramaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaEjecucion", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaEjecucion() As System.Nullable(Of Date)
		Get
			Return Me._FechaEjecucion
		End Get
		Set
			If (Me._FechaEjecucion.Equals(value) = false) Then
				Me.OnFechaEjecucionChanging(value)
				Me.SendPropertyChanging
				Me._FechaEjecucion = value
				Me.SendPropertyChanged("FechaEjecucion")
				Me.OnFechaEjecucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDMedico", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IDMedico() As System.Nullable(Of Integer)
		Get
			Return Me._IDMedico
		End Get
		Set
			If (Me._IDMedico.Equals(value) = false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDMedicoChanging(value)
				Me.SendPropertyChanging
				Me._IDMedico = value
				Me.SendPropertyChanged("IDMedico")
				Me.OnIDMedicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionGenerada", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DescripcionGenerada() As String
		Get
			Return Me._DescripcionGenerada
		End Get
		Set
			If (String.Equals(Me._DescripcionGenerada, value) = false) Then
				Me.OnDescripcionGeneradaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionGenerada = value
				Me.SendPropertyChanged("DescripcionGenerada")
				Me.OnDescripcionGeneradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDGabinete", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IDGabinete() As System.Nullable(Of Integer)
		Get
			Return Me._IDGabinete
		End Get
		Set
			If (Me._IDGabinete.Equals(value) = false) Then
				Me.OnIDGabineteChanging(value)
				Me.SendPropertyChanging
				Me._IDGabinete = value
				Me.SendPropertyChanged("IDGabinete")
				Me.OnIDGabineteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDTratamiento", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IDTratamiento() As String
		Get
			Return Me._IDTratamiento
		End Get
		Set
			If (String.Equals(Me._IDTratamiento, value) = false) Then
				If Me._CONCEPTOSFRA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDTratamientoChanging(value)
				Me.SendPropertyChanging
				Me._IDTratamiento = value
				Me.SendPropertyChanged("IDTratamiento")
				Me.OnIDTratamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cuadrantes", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cuadrantes() As String
		Get
			Return Me._Cuadrantes
		End Get
		Set
			If (String.Equals(Me._Cuadrantes, value) = false) Then
				Me.OnCuadrantesChanging(value)
				Me.SendPropertyChanging
				Me._Cuadrantes = value
				Me.SendPropertyChanged("Cuadrantes")
				Me.OnCuadrantesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PiezasInvolucradas", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PiezasInvolucradas() As String
		Get
			Return Me._PiezasInvolucradas
		End Get
		Set
			If (String.Equals(Me._PiezasInvolucradas, value) = false) Then
				Me.OnPiezasInvolucradasChanging(value)
				Me.SendPropertyChanging
				Me._PiezasInvolucradas = value
				Me.SendPropertyChanged("PiezasInvolucradas")
				Me.OnPiezasInvolucradasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Urgente", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Urgente() As System.Nullable(Of Integer)
		Get
			Return Me._Urgente
		End Get
		Set
			If (Me._Urgente.Equals(value) = false) Then
				Me.OnUrgenteChanging(value)
				Me.SendPropertyChanging
				Me._Urgente = value
				Me.SendPropertyChanged("Urgente")
				Me.OnUrgenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDAccion", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDAccion() As Long
		Get
			Return Me._IDAccion
		End Get
		Set
			If ((Me._IDAccion = value)  _
						= false) Then
				Me.OnIDAccionChanging(value)
				Me.SendPropertyChanging
				Me._IDAccion = value
				Me.SendPropertyChanged("IDAccion")
				Me.OnIDAccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="d_Accione_d_PresupuestoLinea", Storage:="_d_PresupuestoLineas", ThisKey:="IDAccion", OtherKey:="IDAccionOrigen")>  _
	Public Property d_PresupuestoLineas() As EntitySet(Of d_PresupuestoLinea)
		Get
			Return Me._d_PresupuestoLineas
		End Get
		Set
			Me._d_PresupuestoLineas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="d_Odontograma_d_Accione", Storage:="_d_Odontograma", ThisKey:="IDOdontograma", OtherKey:="IDOdontograma", IsForeignKey:=true)>  _
	Public Property d_Odontograma() As d_Odontograma
		Get
			Return Me._d_Odontograma.Entity
		End Get
		Set
			Dim previousValue As d_Odontograma = Me._d_Odontograma.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._d_Odontograma.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._d_Odontograma.Entity = Nothing
					previousValue.d_Acciones.Remove(Me)
				End If
				Me._d_Odontograma.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.d_Acciones.Add(Me)
					Me._IDOdontograma = value.IDOdontograma
				Else
					Me._IDOdontograma = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("d_Odontograma")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_d_Accione", Storage:="_CONCEPTOSFRA", ThisKey:="IDTratamiento", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property CONCEPTOSFRA() As CONCEPTOSFRA
		Get
			Return Me._CONCEPTOSFRA.Entity
		End Get
		Set
			Dim previousValue As CONCEPTOSFRA = Me._CONCEPTOSFRA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONCEPTOSFRA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONCEPTOSFRA.Entity = Nothing
					previousValue.d_Acciones.Remove(Me)
				End If
				Me._CONCEPTOSFRA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.d_Acciones.Add(Me)
					Me._IDTratamiento = value.CODIGO
				Else
					Me._IDTratamiento = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("CONCEPTOSFRA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_d_Accione", Storage:="_MEDICO", ThisKey:="IDMedico", OtherKey:="CMEDICO", IsForeignKey:=true)>  _
	Public Property MEDICO() As MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.d_Acciones.Remove(Me)
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.d_Acciones.Add(Me)
					Me._IDMedico = value.CMEDICO
				Else
					Me._IDMedico = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MEDICO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_d_PresupuestoLineas(ByVal entity As d_PresupuestoLinea)
		Me.SendPropertyChanging
		entity.d_Accione = Me
	End Sub
	
	Private Sub detach_d_PresupuestoLineas(ByVal entity As d_PresupuestoLinea)
		Me.SendPropertyChanging
		entity.d_Accione = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.d_Colores")>  _
Partial Public Class d_Colore
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDColor As Integer
	
	Private _clPendiente As Integer
	
	Private _clPrimeravista As Integer
	
	Private _clPresupuesto As Integer
	
	Private _clRealizado As Integer
	
	Private _clUrgente As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDColorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDColorChanged()
    End Sub
    Partial Private Sub OnclPendienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnclPendienteChanged()
    End Sub
    Partial Private Sub OnclPrimeravistaChanging(value As Integer)
    End Sub
    Partial Private Sub OnclPrimeravistaChanged()
    End Sub
    Partial Private Sub OnclPresupuestoChanging(value As Integer)
    End Sub
    Partial Private Sub OnclPresupuestoChanged()
    End Sub
    Partial Private Sub OnclRealizadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnclRealizadoChanged()
    End Sub
    Partial Private Sub OnclUrgenteChanging(value As Integer)
    End Sub
    Partial Private Sub OnclUrgenteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDColor", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IDColor() As Integer
		Get
			Return Me._IDColor
		End Get
		Set
			If ((Me._IDColor = value)  _
						= false) Then
				Me.OnIDColorChanging(value)
				Me.SendPropertyChanging
				Me._IDColor = value
				Me.SendPropertyChanged("IDColor")
				Me.OnIDColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clPendiente", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property clPendiente() As Integer
		Get
			Return Me._clPendiente
		End Get
		Set
			If ((Me._clPendiente = value)  _
						= false) Then
				Me.OnclPendienteChanging(value)
				Me.SendPropertyChanging
				Me._clPendiente = value
				Me.SendPropertyChanged("clPendiente")
				Me.OnclPendienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clPrimeravista", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property clPrimeravista() As Integer
		Get
			Return Me._clPrimeravista
		End Get
		Set
			If ((Me._clPrimeravista = value)  _
						= false) Then
				Me.OnclPrimeravistaChanging(value)
				Me.SendPropertyChanging
				Me._clPrimeravista = value
				Me.SendPropertyChanged("clPrimeravista")
				Me.OnclPrimeravistaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clPresupuesto", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property clPresupuesto() As Integer
		Get
			Return Me._clPresupuesto
		End Get
		Set
			If ((Me._clPresupuesto = value)  _
						= false) Then
				Me.OnclPresupuestoChanging(value)
				Me.SendPropertyChanging
				Me._clPresupuesto = value
				Me.SendPropertyChanged("clPresupuesto")
				Me.OnclPresupuestoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clRealizado", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property clRealizado() As Integer
		Get
			Return Me._clRealizado
		End Get
		Set
			If ((Me._clRealizado = value)  _
						= false) Then
				Me.OnclRealizadoChanging(value)
				Me.SendPropertyChanging
				Me._clRealizado = value
				Me.SendPropertyChanged("clRealizado")
				Me.OnclRealizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clUrgente", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property clUrgente() As Integer
		Get
			Return Me._clUrgente
		End Get
		Set
			If ((Me._clUrgente = value)  _
						= false) Then
				Me.OnclUrgenteChanging(value)
				Me.SendPropertyChanging
				Me._clUrgente = value
				Me.SendPropertyChanged("clUrgente")
				Me.OnclUrgenteChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.d_ConceptosFra_Imagenes")>  _
Partial Public Class d_ConceptosFra_Imagene
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CodigoCfra As String
	
	Private _Cuadrante As Char
	
	Private _IDImagen As Integer
	
	Private _Pintar As Boolean
	
	Private _d_Imagene As EntityRef(Of d_Imagene)
	
	Private _CONCEPTOSFRA As EntityRef(Of CONCEPTOSFRA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodigoCfraChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoCfraChanged()
    End Sub
    Partial Private Sub OnCuadranteChanging(value As Char)
    End Sub
    Partial Private Sub OnCuadranteChanged()
    End Sub
    Partial Private Sub OnIDImagenChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDImagenChanged()
    End Sub
    Partial Private Sub OnPintarChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPintarChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._d_Imagene = CType(Nothing, EntityRef(Of d_Imagene))
		Me._CONCEPTOSFRA = CType(Nothing, EntityRef(Of CONCEPTOSFRA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoCfra", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CodigoCfra() As String
		Get
			Return Me._CodigoCfra
		End Get
		Set
			If (String.Equals(Me._CodigoCfra, value) = false) Then
				If Me._CONCEPTOSFRA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCodigoCfraChanging(value)
				Me.SendPropertyChanging
				Me._CodigoCfra = value
				Me.SendPropertyChanged("CodigoCfra")
				Me.OnCodigoCfraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cuadrante", DbType:="Char(1) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Cuadrante() As Char
		Get
			Return Me._Cuadrante
		End Get
		Set
			If ((Me._Cuadrante = value)  _
						= false) Then
				Me.OnCuadranteChanging(value)
				Me.SendPropertyChanging
				Me._Cuadrante = value
				Me.SendPropertyChanged("Cuadrante")
				Me.OnCuadranteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDImagen", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IDImagen() As Integer
		Get
			Return Me._IDImagen
		End Get
		Set
			If ((Me._IDImagen = value)  _
						= false) Then
				If Me._d_Imagene.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDImagenChanging(value)
				Me.SendPropertyChanging
				Me._IDImagen = value
				Me.SendPropertyChanged("IDImagen")
				Me.OnIDImagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pintar", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pintar() As Boolean
		Get
			Return Me._Pintar
		End Get
		Set
			If ((Me._Pintar = value)  _
						= false) Then
				Me.OnPintarChanging(value)
				Me.SendPropertyChanging
				Me._Pintar = value
				Me.SendPropertyChanged("Pintar")
				Me.OnPintarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="d_Imagene_d_ConceptosFra_Imagene", Storage:="_d_Imagene", ThisKey:="IDImagen", OtherKey:="IDImagen", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property d_Imagene() As d_Imagene
		Get
			Return Me._d_Imagene.Entity
		End Get
		Set
			Dim previousValue As d_Imagene = Me._d_Imagene.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._d_Imagene.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._d_Imagene.Entity = Nothing
					previousValue.d_ConceptosFra_Imagenes.Remove(Me)
				End If
				Me._d_Imagene.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.d_ConceptosFra_Imagenes.Add(Me)
					Me._IDImagen = value.IDImagen
				Else
					Me._IDImagen = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("d_Imagene")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_d_ConceptosFra_Imagene", Storage:="_CONCEPTOSFRA", ThisKey:="CodigoCfra", OtherKey:="CODIGO", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property CONCEPTOSFRA() As CONCEPTOSFRA
		Get
			Return Me._CONCEPTOSFRA.Entity
		End Get
		Set
			Dim previousValue As CONCEPTOSFRA = Me._CONCEPTOSFRA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONCEPTOSFRA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONCEPTOSFRA.Entity = Nothing
					previousValue.d_ConceptosFra_Imagenes.Remove(Me)
				End If
				Me._CONCEPTOSFRA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.d_ConceptosFra_Imagenes.Add(Me)
					Me._CodigoCfra = value.CODIGO
				Else
					Me._CodigoCfra = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("CONCEPTOSFRA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.d_Dientes")>  _
Partial Public Class d_Diente
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDDiente As Integer
	
	Private _Nombre As String
	
	Private _PosicionOriginal As System.Nullable(Of Integer)
	
	Private _Planos As String
	
	Private _TipoDenticion As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDDienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDDienteChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnPosicionOriginalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPosicionOriginalChanged()
    End Sub
    Partial Private Sub OnPlanosChanging(value As String)
    End Sub
    Partial Private Sub OnPlanosChanged()
    End Sub
    Partial Private Sub OnTipoDenticionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTipoDenticionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDDiente", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IDDiente() As Integer
		Get
			Return Me._IDDiente
		End Get
		Set
			If ((Me._IDDiente = value)  _
						= false) Then
				Me.OnIDDienteChanging(value)
				Me.SendPropertyChanging
				Me._IDDiente = value
				Me.SendPropertyChanged("IDDiente")
				Me.OnIDDienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PosicionOriginal", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PosicionOriginal() As System.Nullable(Of Integer)
		Get
			Return Me._PosicionOriginal
		End Get
		Set
			If (Me._PosicionOriginal.Equals(value) = false) Then
				Me.OnPosicionOriginalChanging(value)
				Me.SendPropertyChanging
				Me._PosicionOriginal = value
				Me.SendPropertyChanged("PosicionOriginal")
				Me.OnPosicionOriginalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Planos", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Planos() As String
		Get
			Return Me._Planos
		End Get
		Set
			If (String.Equals(Me._Planos, value) = false) Then
				Me.OnPlanosChanging(value)
				Me.SendPropertyChanging
				Me._Planos = value
				Me.SendPropertyChanged("Planos")
				Me.OnPlanosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoDenticion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TipoDenticion() As System.Nullable(Of Integer)
		Get
			Return Me._TipoDenticion
		End Get
		Set
			If (Me._TipoDenticion.Equals(value) = false) Then
				Me.OnTipoDenticionChanging(value)
				Me.SendPropertyChanging
				Me._TipoDenticion = value
				Me.SendPropertyChanged("TipoDenticion")
				Me.OnTipoDenticionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.d_Imagenes")>  _
Partial Public Class d_Imagene
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDImagen As Integer
	
	Private _Imagen As System.Data.Linq.Binary
	
	Private _Descripcion As String
	
	Private _Crdt As Date
	
	Private _d_ConceptosFra_Imagenes As EntitySet(Of d_ConceptosFra_Imagene)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDImagenChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDImagenChanged()
    End Sub
    Partial Private Sub OnImagenChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImagenChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnCrdtChanging(value As Date)
    End Sub
    Partial Private Sub OnCrdtChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._d_ConceptosFra_Imagenes = New EntitySet(Of d_ConceptosFra_Imagene)(AddressOf Me.attach_d_ConceptosFra_Imagenes, AddressOf Me.detach_d_ConceptosFra_Imagenes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDImagen", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDImagen() As Integer
		Get
			Return Me._IDImagen
		End Get
		Set
			If ((Me._IDImagen = value)  _
						= false) Then
				Me.OnIDImagenChanging(value)
				Me.SendPropertyChanging
				Me._IDImagen = value
				Me.SendPropertyChanged("IDImagen")
				Me.OnIDImagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Imagen", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Imagen() As System.Data.Linq.Binary
		Get
			Return Me._Imagen
		End Get
		Set
			If (Object.Equals(Me._Imagen, value) = false) Then
				Me.OnImagenChanging(value)
				Me.SendPropertyChanging
				Me._Imagen = value
				Me.SendPropertyChanged("Imagen")
				Me.OnImagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(150) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Crdt", DbType:="DateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Crdt() As Date
		Get
			Return Me._Crdt
		End Get
		Set
			If ((Me._Crdt = value)  _
						= false) Then
				Me.OnCrdtChanging(value)
				Me.SendPropertyChanging
				Me._Crdt = value
				Me.SendPropertyChanged("Crdt")
				Me.OnCrdtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="d_Imagene_d_ConceptosFra_Imagene", Storage:="_d_ConceptosFra_Imagenes", ThisKey:="IDImagen", OtherKey:="IDImagen")>  _
	Public Property d_ConceptosFra_Imagenes() As EntitySet(Of d_ConceptosFra_Imagene)
		Get
			Return Me._d_ConceptosFra_Imagenes
		End Get
		Set
			Me._d_ConceptosFra_Imagenes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_d_ConceptosFra_Imagenes(ByVal entity As d_ConceptosFra_Imagene)
		Me.SendPropertyChanging
		entity.d_Imagene = Me
	End Sub
	
	Private Sub detach_d_ConceptosFra_Imagenes(ByVal entity As d_ConceptosFra_Imagene)
		Me.SendPropertyChanging
		entity.d_Imagene = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.d_Odontogramas")>  _
Partial Public Class d_Odontograma
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDOdontograma As Integer
	
	Private _IDPaciente As System.Nullable(Of Integer)
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _TipoDenticion As System.Nullable(Of Integer)
	
	Private _d_Acciones As EntitySet(Of d_Accione)
	
	Private _d_Presupuestos As EntitySet(Of d_Presupuesto)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDOdontogramaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDOdontogramaChanged()
    End Sub
    Partial Private Sub OnIDPacienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDPacienteChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnTipoDenticionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTipoDenticionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._d_Acciones = New EntitySet(Of d_Accione)(AddressOf Me.attach_d_Acciones, AddressOf Me.detach_d_Acciones)
		Me._d_Presupuestos = New EntitySet(Of d_Presupuesto)(AddressOf Me.attach_d_Presupuestos, AddressOf Me.detach_d_Presupuestos)
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDOdontograma", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDOdontograma() As Integer
		Get
			Return Me._IDOdontograma
		End Get
		Set
			If ((Me._IDOdontograma = value)  _
						= false) Then
				Me.OnIDOdontogramaChanging(value)
				Me.SendPropertyChanging
				Me._IDOdontograma = value
				Me.SendPropertyChanged("IDOdontograma")
				Me.OnIDOdontogramaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPaciente", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IDPaciente() As System.Nullable(Of Integer)
		Get
			Return Me._IDPaciente
		End Get
		Set
			If (Me._IDPaciente.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDPacienteChanging(value)
				Me.SendPropertyChanging
				Me._IDPaciente = value
				Me.SendPropertyChanged("IDPaciente")
				Me.OnIDPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoDenticion", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TipoDenticion() As System.Nullable(Of Integer)
		Get
			Return Me._TipoDenticion
		End Get
		Set
			If (Me._TipoDenticion.Equals(value) = false) Then
				Me.OnTipoDenticionChanging(value)
				Me.SendPropertyChanging
				Me._TipoDenticion = value
				Me.SendPropertyChanged("TipoDenticion")
				Me.OnTipoDenticionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="d_Odontograma_d_Accione", Storage:="_d_Acciones", ThisKey:="IDOdontograma", OtherKey:="IDOdontograma")>  _
	Public Property d_Acciones() As EntitySet(Of d_Accione)
		Get
			Return Me._d_Acciones
		End Get
		Set
			Me._d_Acciones.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="d_Odontograma_d_Presupuesto", Storage:="_d_Presupuestos", ThisKey:="IDOdontograma", OtherKey:="IDOdontograma")>  _
	Public Property d_Presupuestos() As EntitySet(Of d_Presupuesto)
		Get
			Return Me._d_Presupuestos
		End Get
		Set
			Me._d_Presupuestos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_d_Odontograma", Storage:="_PACIENTE", ThisKey:="IDPaciente", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.d_Odontogramas.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.d_Odontogramas.Add(Me)
					Me._IDPaciente = value.CPACIENTE
				Else
					Me._IDPaciente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_d_Acciones(ByVal entity As d_Accione)
		Me.SendPropertyChanging
		entity.d_Odontograma = Me
	End Sub
	
	Private Sub detach_d_Acciones(ByVal entity As d_Accione)
		Me.SendPropertyChanging
		entity.d_Odontograma = Nothing
	End Sub
	
	Private Sub attach_d_Presupuestos(ByVal entity As d_Presupuesto)
		Me.SendPropertyChanging
		entity.d_Odontograma = Me
	End Sub
	
	Private Sub detach_d_Presupuestos(ByVal entity As d_Presupuesto)
		Me.SendPropertyChanging
		entity.d_Odontograma = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.d_Presupuesto")>  _
Partial Public Class d_Presupuesto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDPresupuesto As Integer
	
	Private _IDOdontograma As Integer
	
	Private _FechaConcepcion As Date
	
	Private _d_PresupuestoLineas As EntitySet(Of d_PresupuestoLinea)
	
	Private _d_Odontograma As EntityRef(Of d_Odontograma)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDPresupuestoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDPresupuestoChanged()
    End Sub
    Partial Private Sub OnIDOdontogramaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDOdontogramaChanged()
    End Sub
    Partial Private Sub OnFechaConcepcionChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaConcepcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._d_PresupuestoLineas = New EntitySet(Of d_PresupuestoLinea)(AddressOf Me.attach_d_PresupuestoLineas, AddressOf Me.detach_d_PresupuestoLineas)
		Me._d_Odontograma = CType(Nothing, EntityRef(Of d_Odontograma))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPresupuesto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDPresupuesto() As Integer
		Get
			Return Me._IDPresupuesto
		End Get
		Set
			If ((Me._IDPresupuesto = value)  _
						= false) Then
				Me.OnIDPresupuestoChanging(value)
				Me.SendPropertyChanging
				Me._IDPresupuesto = value
				Me.SendPropertyChanged("IDPresupuesto")
				Me.OnIDPresupuestoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDOdontograma", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IDOdontograma() As Integer
		Get
			Return Me._IDOdontograma
		End Get
		Set
			If ((Me._IDOdontograma = value)  _
						= false) Then
				If Me._d_Odontograma.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDOdontogramaChanging(value)
				Me.SendPropertyChanging
				Me._IDOdontograma = value
				Me.SendPropertyChanged("IDOdontograma")
				Me.OnIDOdontogramaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaConcepcion", DbType:="DateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaConcepcion() As Date
		Get
			Return Me._FechaConcepcion
		End Get
		Set
			If ((Me._FechaConcepcion = value)  _
						= false) Then
				Me.OnFechaConcepcionChanging(value)
				Me.SendPropertyChanging
				Me._FechaConcepcion = value
				Me.SendPropertyChanged("FechaConcepcion")
				Me.OnFechaConcepcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="d_Presupuesto_d_PresupuestoLinea", Storage:="_d_PresupuestoLineas", ThisKey:="IDPresupuesto", OtherKey:="IDPresupuesto")>  _
	Public Property d_PresupuestoLineas() As EntitySet(Of d_PresupuestoLinea)
		Get
			Return Me._d_PresupuestoLineas
		End Get
		Set
			Me._d_PresupuestoLineas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="d_Odontograma_d_Presupuesto", Storage:="_d_Odontograma", ThisKey:="IDOdontograma", OtherKey:="IDOdontograma", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property d_Odontograma() As d_Odontograma
		Get
			Return Me._d_Odontograma.Entity
		End Get
		Set
			Dim previousValue As d_Odontograma = Me._d_Odontograma.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._d_Odontograma.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._d_Odontograma.Entity = Nothing
					previousValue.d_Presupuestos.Remove(Me)
				End If
				Me._d_Odontograma.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.d_Presupuestos.Add(Me)
					Me._IDOdontograma = value.IDOdontograma
				Else
					Me._IDOdontograma = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("d_Odontograma")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_d_PresupuestoLineas(ByVal entity As d_PresupuestoLinea)
		Me.SendPropertyChanging
		entity.d_Presupuesto = Me
	End Sub
	
	Private Sub detach_d_PresupuestoLineas(ByVal entity As d_PresupuestoLinea)
		Me.SendPropertyChanging
		entity.d_Presupuesto = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FICHEROSGLOBAL")>  _
Partial Public Class FICHEROSGLOBAL
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _REFREGISTRO As Integer
	
	Private _FICHERO As String
	
	Private _DESCRIPCION As String
	
	Private _FECHA As Date
	
	Private _SECCION As System.Nullable(Of Char)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnREFREGISTROChanging(value As Integer)
    End Sub
    Partial Private Sub OnREFREGISTROChanged()
    End Sub
    Partial Private Sub OnFICHEROChanging(value As String)
    End Sub
    Partial Private Sub OnFICHEROChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As Date)
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnSECCIONChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnSECCIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFREGISTRO", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFREGISTRO() As Integer
		Get
			Return Me._REFREGISTRO
		End Get
		Set
			If ((Me._REFREGISTRO = value)  _
						= false) Then
				Me.OnREFREGISTROChanging(value)
				Me.SendPropertyChanging
				Me._REFREGISTRO = value
				Me.SendPropertyChanged("REFREGISTRO")
				Me.OnREFREGISTROChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FICHERO", DbType:="VarChar(250) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FICHERO() As String
		Get
			Return Me._FICHERO
		End Get
		Set
			If (String.Equals(Me._FICHERO, value) = false) Then
				Me.OnFICHEROChanging(value)
				Me.SendPropertyChanging
				Me._FICHERO = value
				Me.SendPropertyChanged("FICHERO")
				Me.OnFICHEROChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(250) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FECHA() As Date
		Get
			Return Me._FECHA
		End Get
		Set
			If ((Me._FECHA = value)  _
						= false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SECCION", DbType:="VarChar(1)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SECCION() As System.Nullable(Of Char)
		Get
			Return Me._SECCION
		End Get
		Set
			If (Me._SECCION.Equals(value) = false) Then
				Me.OnSECCIONChanging(value)
				Me.SendPropertyChanging
				Me._SECCION = value
				Me.SendPropertyChanged("SECCION")
				Me.OnSECCIONChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FICHEROS")>  _
Partial Public Class FICHERO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As Integer
	
	Private _REFPACIENTE As System.Nullable(Of Integer)
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _FECHAMODIFICACION As System.Nullable(Of Date)
	
	Private _FICHERO As String
	
	Private _NOTAS As String
	
	Private _DESCRIPCION As String
	
	Private _IDSECCION As System.Nullable(Of Integer)
	
	Private _TAG1 As System.Nullable(Of Integer)
	
	Private _TAG2 As System.Nullable(Of Integer)
	
	Private _ESCONSENTIMIENTO As System.Nullable(Of Boolean)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As Integer)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnFECHAMODIFICACIONChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAMODIFICACIONChanged()
    End Sub
    Partial Private Sub OnFICHEROChanging(value As String)
    End Sub
    Partial Private Sub OnFICHEROChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnIDSECCIONChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDSECCIONChanged()
    End Sub
    Partial Private Sub OnTAG1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTAG1Changed()
    End Sub
    Partial Private Sub OnTAG2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTAG2Changed()
    End Sub
    Partial Private Sub OnESCONSENTIMIENTOChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnESCONSENTIMIENTOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CODIGO() As Integer
		Get
			Return Me._CODIGO
		End Get
		Set
			If ((Me._CODIGO = value)  _
						= false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFPACIENTE() As System.Nullable(Of Integer)
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If (Me._REFPACIENTE.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHAMODIFICACION", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FECHAMODIFICACION() As System.Nullable(Of Date)
		Get
			Return Me._FECHAMODIFICACION
		End Get
		Set
			If (Me._FECHAMODIFICACION.Equals(value) = false) Then
				Me.OnFECHAMODIFICACIONChanging(value)
				Me.SendPropertyChanging
				Me._FECHAMODIFICACION = value
				Me.SendPropertyChanged("FECHAMODIFICACION")
				Me.OnFECHAMODIFICACIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FICHERO", DbType:="VarChar(255)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FICHERO() As String
		Get
			Return Me._FICHERO
		End Get
		Set
			If (String.Equals(Me._FICHERO, value) = false) Then
				Me.OnFICHEROChanging(value)
				Me.SendPropertyChanging
				Me._FICHERO = value
				Me.SendPropertyChanged("FICHERO")
				Me.OnFICHEROChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(90)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDSECCION", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IDSECCION() As System.Nullable(Of Integer)
		Get
			Return Me._IDSECCION
		End Get
		Set
			If (Me._IDSECCION.Equals(value) = false) Then
				Me.OnIDSECCIONChanging(value)
				Me.SendPropertyChanging
				Me._IDSECCION = value
				Me.SendPropertyChanged("IDSECCION")
				Me.OnIDSECCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TAG1", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TAG1() As System.Nullable(Of Integer)
		Get
			Return Me._TAG1
		End Get
		Set
			If (Me._TAG1.Equals(value) = false) Then
				Me.OnTAG1Changing(value)
				Me.SendPropertyChanging
				Me._TAG1 = value
				Me.SendPropertyChanged("TAG1")
				Me.OnTAG1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TAG2", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TAG2() As System.Nullable(Of Integer)
		Get
			Return Me._TAG2
		End Get
		Set
			If (Me._TAG2.Equals(value) = false) Then
				Me.OnTAG2Changing(value)
				Me.SendPropertyChanging
				Me._TAG2 = value
				Me.SendPropertyChanged("TAG2")
				Me.OnTAG2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ESCONSENTIMIENTO")>  _
	Public Property ESCONSENTIMIENTO() As System.Nullable(Of Boolean)
		Get
			Return Me._ESCONSENTIMIENTO
		End Get
		Set
			If (Me._ESCONSENTIMIENTO.Equals(value) = false) Then
				Me.OnESCONSENTIMIENTOChanging(value)
				Me.SendPropertyChanging
				Me._ESCONSENTIMIENTO = value
				Me.SendPropertyChanged("ESCONSENTIMIENTO")
				Me.OnESCONSENTIMIENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_FICHERO", Storage:="_PACIENTE", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.FICHEROs.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FICHEROs.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CONCEPTOSFAMILIAS")>  _
Partial Public Class CONCEPTOSFAMILIA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDFamilia As Integer
	
	Private _Descripcion As String
	
	Private _Categoria As System.Nullable(Of Integer)
	
	Private _IconoName As System.Data.Linq.Binary
	
	Private _Natural As Boolean
	
	Private _CONCEPTOSFRAs As EntitySet(Of CONCEPTOSFRA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDFamiliaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDFamiliaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnCategoriaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoriaChanged()
    End Sub
    Partial Private Sub OnIconoNameChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnIconoNameChanged()
    End Sub
    Partial Private Sub OnNaturalChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNaturalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CONCEPTOSFRAs = New EntitySet(Of CONCEPTOSFRA)(AddressOf Me.attach_CONCEPTOSFRAs, AddressOf Me.detach_CONCEPTOSFRAs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDFamilia", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IDFamilia() As Integer
		Get
			Return Me._IDFamilia
		End Get
		Set
			If ((Me._IDFamilia = value)  _
						= false) Then
				Me.OnIDFamiliaChanging(value)
				Me.SendPropertyChanging
				Me._IDFamilia = value
				Me.SendPropertyChanged("IDFamilia")
				Me.OnIDFamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Categoria", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Categoria() As System.Nullable(Of Integer)
		Get
			Return Me._Categoria
		End Get
		Set
			If (Me._Categoria.Equals(value) = false) Then
				Me.OnCategoriaChanging(value)
				Me.SendPropertyChanging
				Me._Categoria = value
				Me.SendPropertyChanged("Categoria")
				Me.OnCategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconoName", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IconoName() As System.Data.Linq.Binary
		Get
			Return Me._IconoName
		End Get
		Set
			If (Object.Equals(Me._IconoName, value) = false) Then
				Me.OnIconoNameChanging(value)
				Me.SendPropertyChanging
				Me._IconoName = value
				Me.SendPropertyChanged("IconoName")
				Me.OnIconoNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Natural]", Storage:="_Natural", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Natural() As Boolean
		Get
			Return Me._Natural
		End Get
		Set
			If ((Me._Natural = value)  _
						= false) Then
				Me.OnNaturalChanging(value)
				Me.SendPropertyChanging
				Me._Natural = value
				Me.SendPropertyChanged("Natural")
				Me.OnNaturalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFAMILIA_CONCEPTOSFRA", Storage:="_CONCEPTOSFRAs", ThisKey:="IDFamilia", OtherKey:="IDFAMILIA")>  _
	Public Property CONCEPTOSFRAs() As EntitySet(Of CONCEPTOSFRA)
		Get
			Return Me._CONCEPTOSFRAs
		End Get
		Set
			Me._CONCEPTOSFRAs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CONCEPTOSFRAs(ByVal entity As CONCEPTOSFRA)
		Me.SendPropertyChanging
		entity.CONCEPTOSFAMILIA = Me
	End Sub
	
	Private Sub detach_CONCEPTOSFRAs(ByVal entity As CONCEPTOSFRA)
		Me.SendPropertyChanging
		entity.CONCEPTOSFAMILIA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CONCEPTOSFRA")>  _
Partial Public Class CONCEPTOSFRA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As String
	
	Private _DESCRIPCION As String
	
	Private _IMPORTE As Single
	
	Private _Duracion As System.Nullable(Of Date)
	
	Private _IDFAMILIA As System.Nullable(Of Integer)
	
	Private _XMLCont As String
	
	Private _d_Acciones As EntitySet(Of d_Accione)
	
	Private _d_ConceptosFra_Imagenes As EntitySet(Of d_ConceptosFra_Imagene)
	
	Private _Tarifas As EntitySet(Of Tarifa)
	
	Private _PLANTILLAANALITICAs As EntitySet(Of PLANTILLAANALITICA)
	
	Private _LINEASFACTURAs As EntitySet(Of LINEASFACTURA)
	
	Private _MEDICOS_CONCEPTOFRAs As EntitySet(Of MEDICOS_CONCEPTOFRA)
	
	Private _ANALITICAS As EntitySet(Of ANALITICAS)
	
	Private _PLANTILLAANALITICAS1 As EntitySet(Of PLANTILLAANALITICAS)
	
	Private _d_PresupuestoLineas As EntitySet(Of d_PresupuestoLinea)
	
	Private _CONCEPTOSFAMILIA As EntityRef(Of CONCEPTOSFAMILIA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As String)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnIMPORTEChanging(value As Single)
    End Sub
    Partial Private Sub OnIMPORTEChanged()
    End Sub
    Partial Private Sub OnDuracionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDuracionChanged()
    End Sub
    Partial Private Sub OnIDFAMILIAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDFAMILIAChanged()
    End Sub
    Partial Private Sub OnXMLContChanging(value As String)
    End Sub
    Partial Private Sub OnXMLContChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._d_Acciones = New EntitySet(Of d_Accione)(AddressOf Me.attach_d_Acciones, AddressOf Me.detach_d_Acciones)
		Me._d_ConceptosFra_Imagenes = New EntitySet(Of d_ConceptosFra_Imagene)(AddressOf Me.attach_d_ConceptosFra_Imagenes, AddressOf Me.detach_d_ConceptosFra_Imagenes)
		Me._Tarifas = New EntitySet(Of Tarifa)(AddressOf Me.attach_Tarifas, AddressOf Me.detach_Tarifas)
		Me._PLANTILLAANALITICAs = New EntitySet(Of PLANTILLAANALITICA)(AddressOf Me.attach_PLANTILLAANALITICAs, AddressOf Me.detach_PLANTILLAANALITICAs)
		Me._LINEASFACTURAs = New EntitySet(Of LINEASFACTURA)(AddressOf Me.attach_LINEASFACTURAs, AddressOf Me.detach_LINEASFACTURAs)
		Me._MEDICOS_CONCEPTOFRAs = New EntitySet(Of MEDICOS_CONCEPTOFRA)(AddressOf Me.attach_MEDICOS_CONCEPTOFRAs, AddressOf Me.detach_MEDICOS_CONCEPTOFRAs)
		Me._ANALITICAS = New EntitySet(Of ANALITICAS)(AddressOf Me.attach_ANALITICAS, AddressOf Me.detach_ANALITICAS)
		Me._PLANTILLAANALITICAS1 = New EntitySet(Of PLANTILLAANALITICAS)(AddressOf Me.attach_PLANTILLAANALITICAS1, AddressOf Me.detach_PLANTILLAANALITICAS1)
		Me._d_PresupuestoLineas = New EntitySet(Of d_PresupuestoLinea)(AddressOf Me.attach_d_PresupuestoLineas, AddressOf Me.detach_d_PresupuestoLineas)
		Me._CONCEPTOSFAMILIA = CType(Nothing, EntityRef(Of CONCEPTOSFAMILIA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODIGO() As String
		Get
			Return Me._CODIGO
		End Get
		Set
			If (String.Equals(Me._CODIGO, value) = false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(150) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMPORTE", DbType:="Real NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IMPORTE() As Single
		Get
			Return Me._IMPORTE
		End Get
		Set
			If ((Me._IMPORTE = value)  _
						= false) Then
				Me.OnIMPORTEChanging(value)
				Me.SendPropertyChanging
				Me._IMPORTE = value
				Me.SendPropertyChanged("IMPORTE")
				Me.OnIMPORTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duracion", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Duracion() As System.Nullable(Of Date)
		Get
			Return Me._Duracion
		End Get
		Set
			If (Me._Duracion.Equals(value) = false) Then
				Me.OnDuracionChanging(value)
				Me.SendPropertyChanging
				Me._Duracion = value
				Me.SendPropertyChanged("Duracion")
				Me.OnDuracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDFAMILIA", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IDFAMILIA() As System.Nullable(Of Integer)
		Get
			Return Me._IDFAMILIA
		End Get
		Set
			If (Me._IDFAMILIA.Equals(value) = false) Then
				If Me._CONCEPTOSFAMILIA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDFAMILIAChanging(value)
				Me.SendPropertyChanging
				Me._IDFAMILIA = value
				Me.SendPropertyChanged("IDFAMILIA")
				Me.OnIDFAMILIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XMLCont", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property XMLCont() As String
		Get
			Return Me._XMLCont
		End Get
		Set
			If (String.Equals(Me._XMLCont, value) = false) Then
				Me.OnXMLContChanging(value)
				Me.SendPropertyChanging
				Me._XMLCont = value
				Me.SendPropertyChanged("XMLCont")
				Me.OnXMLContChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_d_Accione", Storage:="_d_Acciones", ThisKey:="CODIGO", OtherKey:="IDTratamiento")>  _
	Public Property d_Acciones() As EntitySet(Of d_Accione)
		Get
			Return Me._d_Acciones
		End Get
		Set
			Me._d_Acciones.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_d_ConceptosFra_Imagene", Storage:="_d_ConceptosFra_Imagenes", ThisKey:="CODIGO", OtherKey:="CodigoCfra")>  _
	Public Property d_ConceptosFra_Imagenes() As EntitySet(Of d_ConceptosFra_Imagene)
		Get
			Return Me._d_ConceptosFra_Imagenes
		End Get
		Set
			Me._d_ConceptosFra_Imagenes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_Tarifa", Storage:="_Tarifas", ThisKey:="CODIGO", OtherKey:="IdConceptoFra")>  _
	Public Property Tarifas() As EntitySet(Of Tarifa)
		Get
			Return Me._Tarifas
		End Get
		Set
			Me._Tarifas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_PLANTILLAANALITICA", Storage:="_PLANTILLAANALITICAs", ThisKey:="CODIGO", OtherKey:="REFCONCEPTO")>  _
	Public Property PLANTILLAANALITICAs() As EntitySet(Of PLANTILLAANALITICA)
		Get
			Return Me._PLANTILLAANALITICAs
		End Get
		Set
			Me._PLANTILLAANALITICAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_LINEASFACTURA", Storage:="_LINEASFACTURAs", ThisKey:="CODIGO", OtherKey:="REFCONCEPTO")>  _
	Public Property LINEASFACTURAs() As EntitySet(Of LINEASFACTURA)
		Get
			Return Me._LINEASFACTURAs
		End Get
		Set
			Me._LINEASFACTURAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_MEDICOS_CONCEPTOFRA", Storage:="_MEDICOS_CONCEPTOFRAs", ThisKey:="CODIGO", OtherKey:="CODIGO")>  _
	Public Property MEDICOS_CONCEPTOFRAs() As EntitySet(Of MEDICOS_CONCEPTOFRA)
		Get
			Return Me._MEDICOS_CONCEPTOFRAs
		End Get
		Set
			Me._MEDICOS_CONCEPTOFRAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_ANALITICAS", Storage:="_ANALITICAS", ThisKey:="CODIGO", OtherKey:="REFCONCEPTO")>  _
	Public Property ANALITICAS() As EntitySet(Of ANALITICAS)
		Get
			Return Me._ANALITICAS
		End Get
		Set
			Me._ANALITICAS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_PLANTILLAANALITICAS", Storage:="_PLANTILLAANALITICAS1", ThisKey:="CODIGO", OtherKey:="REFCONCEPTO")>  _
	Public Property PLANTILLAANALITICAS1() As EntitySet(Of PLANTILLAANALITICAS)
		Get
			Return Me._PLANTILLAANALITICAS1
		End Get
		Set
			Me._PLANTILLAANALITICAS1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_d_PresupuestoLinea", Storage:="_d_PresupuestoLineas", ThisKey:="CODIGO", OtherKey:="IDTratamiento")>  _
	Public Property d_PresupuestoLineas() As EntitySet(Of d_PresupuestoLinea)
		Get
			Return Me._d_PresupuestoLineas
		End Get
		Set
			Me._d_PresupuestoLineas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFAMILIA_CONCEPTOSFRA", Storage:="_CONCEPTOSFAMILIA", ThisKey:="IDFAMILIA", OtherKey:="IDFamilia", IsForeignKey:=true)>  _
	Public Property CONCEPTOSFAMILIA() As CONCEPTOSFAMILIA
		Get
			Return Me._CONCEPTOSFAMILIA.Entity
		End Get
		Set
			Dim previousValue As CONCEPTOSFAMILIA = Me._CONCEPTOSFAMILIA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONCEPTOSFAMILIA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONCEPTOSFAMILIA.Entity = Nothing
					previousValue.CONCEPTOSFRAs.Remove(Me)
				End If
				Me._CONCEPTOSFAMILIA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CONCEPTOSFRAs.Add(Me)
					Me._IDFAMILIA = value.IDFamilia
				Else
					Me._IDFAMILIA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CONCEPTOSFAMILIA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_d_Acciones(ByVal entity As d_Accione)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Me
	End Sub
	
	Private Sub detach_d_Acciones(ByVal entity As d_Accione)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Nothing
	End Sub
	
	Private Sub attach_d_ConceptosFra_Imagenes(ByVal entity As d_ConceptosFra_Imagene)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Me
	End Sub
	
	Private Sub detach_d_ConceptosFra_Imagenes(ByVal entity As d_ConceptosFra_Imagene)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Nothing
	End Sub
	
	Private Sub attach_Tarifas(ByVal entity As Tarifa)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Me
	End Sub
	
	Private Sub detach_Tarifas(ByVal entity As Tarifa)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Nothing
	End Sub
	
	Private Sub attach_PLANTILLAANALITICAs(ByVal entity As PLANTILLAANALITICA)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Me
	End Sub
	
	Private Sub detach_PLANTILLAANALITICAs(ByVal entity As PLANTILLAANALITICA)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Nothing
	End Sub
	
	Private Sub attach_LINEASFACTURAs(ByVal entity As LINEASFACTURA)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Me
	End Sub
	
	Private Sub detach_LINEASFACTURAs(ByVal entity As LINEASFACTURA)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Nothing
	End Sub
	
	Private Sub attach_MEDICOS_CONCEPTOFRAs(ByVal entity As MEDICOS_CONCEPTOFRA)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Me
	End Sub
	
	Private Sub detach_MEDICOS_CONCEPTOFRAs(ByVal entity As MEDICOS_CONCEPTOFRA)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Nothing
	End Sub
	
	Private Sub attach_ANALITICAS(ByVal entity As ANALITICAS)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Me
	End Sub
	
	Private Sub detach_ANALITICAS(ByVal entity As ANALITICAS)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Nothing
	End Sub
	
	Private Sub attach_PLANTILLAANALITICAS1(ByVal entity As PLANTILLAANALITICAS)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Me
	End Sub
	
	Private Sub detach_PLANTILLAANALITICAS1(ByVal entity As PLANTILLAANALITICAS)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Nothing
	End Sub
	
	Private Sub attach_d_PresupuestoLineas(ByVal entity As d_PresupuestoLinea)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Me
	End Sub
	
	Private Sub detach_d_PresupuestoLineas(ByVal entity As d_PresupuestoLinea)
		Me.SendPropertyChanging
		entity.CONCEPTOSFRA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_TipoIVA")>  _
Partial Public Class N_TipoIVA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_TipoIVA As Integer
	
	Private _Nombre As String
	
	Private _Valor As System.Nullable(Of Double)
	
	Private _N_Articulos As EntitySet(Of N_Articulo)
	
	Private _N_Factura_Lineas As EntitySet(Of N_Factura_Linea)
	
	Private _N_PedidosProveedor_Totales As EntitySet(Of N_PedidosProveedor_Totale)
	
	Private _N_PedidosProveedor_Lineas As EntitySet(Of N_PedidosProveedor_Linea)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_TipoIVAChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_TipoIVAChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnValorChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnValorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_Articulos = New EntitySet(Of N_Articulo)(AddressOf Me.attach_N_Articulos, AddressOf Me.detach_N_Articulos)
		Me._N_Factura_Lineas = New EntitySet(Of N_Factura_Linea)(AddressOf Me.attach_N_Factura_Lineas, AddressOf Me.detach_N_Factura_Lineas)
		Me._N_PedidosProveedor_Totales = New EntitySet(Of N_PedidosProveedor_Totale)(AddressOf Me.attach_N_PedidosProveedor_Totales, AddressOf Me.detach_N_PedidosProveedor_Totales)
		Me._N_PedidosProveedor_Lineas = New EntitySet(Of N_PedidosProveedor_Linea)(AddressOf Me.attach_N_PedidosProveedor_Lineas, AddressOf Me.detach_N_PedidosProveedor_Lineas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoIVA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_TipoIVA() As Integer
		Get
			Return Me._ID_TipoIVA
		End Get
		Set
			If ((Me._ID_TipoIVA = value)  _
						= false) Then
				Me.OnID_TipoIVAChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoIVA = value
				Me.SendPropertyChanged("ID_TipoIVA")
				Me.OnID_TipoIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Valor() As System.Nullable(Of Double)
		Get
			Return Me._Valor
		End Get
		Set
			If (Me._Valor.Equals(value) = false) Then
				Me.OnValorChanging(value)
				Me.SendPropertyChanging
				Me._Valor = value
				Me.SendPropertyChanged("Valor")
				Me.OnValorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_TipoIVA_N_Articulo", Storage:="_N_Articulos", ThisKey:="ID_TipoIVA", OtherKey:="ID_TipoIVA")>  _
	Public Property N_Articulos() As EntitySet(Of N_Articulo)
		Get
			Return Me._N_Articulos
		End Get
		Set
			Me._N_Articulos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_TipoIVA_N_Factura_Linea", Storage:="_N_Factura_Lineas", ThisKey:="ID_TipoIVA", OtherKey:="ID_TipoIVA")>  _
	Public Property N_Factura_Lineas() As EntitySet(Of N_Factura_Linea)
		Get
			Return Me._N_Factura_Lineas
		End Get
		Set
			Me._N_Factura_Lineas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_TipoIVA_N_PedidosProveedor_Totale", Storage:="_N_PedidosProveedor_Totales", ThisKey:="ID_TipoIVA", OtherKey:="ID_TipoIVA")>  _
	Public Property N_PedidosProveedor_Totales() As EntitySet(Of N_PedidosProveedor_Totale)
		Get
			Return Me._N_PedidosProveedor_Totales
		End Get
		Set
			Me._N_PedidosProveedor_Totales.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_TipoIVA_N_PedidosProveedor_Linea", Storage:="_N_PedidosProveedor_Lineas", ThisKey:="ID_TipoIVA", OtherKey:="ID_TipoIVA")>  _
	Public Property N_PedidosProveedor_Lineas() As EntitySet(Of N_PedidosProveedor_Linea)
		Get
			Return Me._N_PedidosProveedor_Lineas
		End Get
		Set
			Me._N_PedidosProveedor_Lineas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_N_Articulos(ByVal entity As N_Articulo)
		Me.SendPropertyChanging
		entity.N_TipoIVA = Me
	End Sub
	
	Private Sub detach_N_Articulos(ByVal entity As N_Articulo)
		Me.SendPropertyChanging
		entity.N_TipoIVA = Nothing
	End Sub
	
	Private Sub attach_N_Factura_Lineas(ByVal entity As N_Factura_Linea)
		Me.SendPropertyChanging
		entity.N_TipoIVA = Me
	End Sub
	
	Private Sub detach_N_Factura_Lineas(ByVal entity As N_Factura_Linea)
		Me.SendPropertyChanging
		entity.N_TipoIVA = Nothing
	End Sub
	
	Private Sub attach_N_PedidosProveedor_Totales(ByVal entity As N_PedidosProveedor_Totale)
		Me.SendPropertyChanging
		entity.N_TipoIVA = Me
	End Sub
	
	Private Sub detach_N_PedidosProveedor_Totales(ByVal entity As N_PedidosProveedor_Totale)
		Me.SendPropertyChanging
		entity.N_TipoIVA = Nothing
	End Sub
	
	Private Sub attach_N_PedidosProveedor_Lineas(ByVal entity As N_PedidosProveedor_Linea)
		Me.SendPropertyChanging
		entity.N_TipoIVA = Me
	End Sub
	
	Private Sub detach_N_PedidosProveedor_Lineas(ByVal entity As N_PedidosProveedor_Linea)
		Me.SendPropertyChanging
		entity.N_TipoIVA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LEMPRESAS")>  _
Partial Public Class LEMPRESA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As Integer
	
	Private _REFEMPRESA As System.Nullable(Of Integer)
	
	Private _REFPACIENTE As System.Nullable(Of Integer)
	
	Private _FECHAALTA As System.Nullable(Of Date)
	
	Private _FECHABAJA As System.Nullable(Of Date)
	
	Private _NOTAS As String
	
	Private _PUESTOTRABAJO As String
	
	Private _EMPRESA As EntityRef(Of EMPRESA)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As Integer)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnREFEMPRESAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFEMPRESAChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnFECHAALTAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAALTAChanged()
    End Sub
    Partial Private Sub OnFECHABAJAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHABAJAChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    Partial Private Sub OnPUESTOTRABAJOChanging(value As String)
    End Sub
    Partial Private Sub OnPUESTOTRABAJOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EMPRESA = CType(Nothing, EntityRef(Of EMPRESA))
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CODIGO() As Integer
		Get
			Return Me._CODIGO
		End Get
		Set
			If ((Me._CODIGO = value)  _
						= false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFEMPRESA", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFEMPRESA() As System.Nullable(Of Integer)
		Get
			Return Me._REFEMPRESA
		End Get
		Set
			If (Me._REFEMPRESA.Equals(value) = false) Then
				If Me._EMPRESA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFEMPRESAChanging(value)
				Me.SendPropertyChanging
				Me._REFEMPRESA = value
				Me.SendPropertyChanged("REFEMPRESA")
				Me.OnREFEMPRESAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFPACIENTE() As System.Nullable(Of Integer)
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If (Me._REFPACIENTE.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHAALTA", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FECHAALTA() As System.Nullable(Of Date)
		Get
			Return Me._FECHAALTA
		End Get
		Set
			If (Me._FECHAALTA.Equals(value) = false) Then
				Me.OnFECHAALTAChanging(value)
				Me.SendPropertyChanging
				Me._FECHAALTA = value
				Me.SendPropertyChanged("FECHAALTA")
				Me.OnFECHAALTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHABAJA", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FECHABAJA() As System.Nullable(Of Date)
		Get
			Return Me._FECHABAJA
		End Get
		Set
			If (Me._FECHABAJA.Equals(value) = false) Then
				Me.OnFECHABAJAChanging(value)
				Me.SendPropertyChanging
				Me._FECHABAJA = value
				Me.SendPropertyChanged("FECHABAJA")
				Me.OnFECHABAJAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PUESTOTRABAJO", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PUESTOTRABAJO() As String
		Get
			Return Me._PUESTOTRABAJO
		End Get
		Set
			If (String.Equals(Me._PUESTOTRABAJO, value) = false) Then
				Me.OnPUESTOTRABAJOChanging(value)
				Me.SendPropertyChanging
				Me._PUESTOTRABAJO = value
				Me.SendPropertyChanged("PUESTOTRABAJO")
				Me.OnPUESTOTRABAJOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_LEMPRESA", Storage:="_EMPRESA", ThisKey:="REFEMPRESA", OtherKey:="CEMPRESA", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property EMPRESA() As EMPRESA
		Get
			Return Me._EMPRESA.Entity
		End Get
		Set
			Dim previousValue As EMPRESA = Me._EMPRESA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EMPRESA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EMPRESA.Entity = Nothing
					previousValue.LEMPRESAs.Remove(Me)
				End If
				Me._EMPRESA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LEMPRESAs.Add(Me)
					Me._REFEMPRESA = value.CEMPRESA
				Else
					Me._REFEMPRESA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("EMPRESA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_LEMPRESA", Storage:="_PACIENTE", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.LEMPRESAs.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LEMPRESAs.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class DESGLOSEIVAS
	
	Private _TIPOIVA As Double
	
	Private _BASE As Double
	
	Private _IMPORTE As Double
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TIPOIVA", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TIPOIVA() As Double
		Get
			Return Me._TIPOIVA
		End Get
		Set
			If ((Me._TIPOIVA = value)  _
						= false) Then
				Me._TIPOIVA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BASE", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BASE() As Double
		Get
			Return Me._BASE
		End Get
		Set
			If ((Me._BASE = value)  _
						= false) Then
				Me._BASE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMPORTE", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IMPORTE() As Double
		Get
			Return Me._IMPORTE
		End Get
		Set
			If ((Me._IMPORTE = value)  _
						= false) Then
				Me._IMPORTE = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class CLINICAINCEME
	
	Private _NOMBRE As String
	
	Private _DIRECCION As String
	
	Private _CIUDAD As String
	
	Private _PROVINCIA As String
	
	Private _CIF As String
	
	Private _LOGOTIPO As System.Data.Linq.Binary
	
	Private _CPClinica As String
	
	Private _Telefono1 As String
	
	Private _Telefono2 As String
	
	Private _Fax As String
	
	Private _Email As String
	
	Private _Web As String
	
	Private _LOGOTIPOURLPARAREPORTE As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me._NOMBRE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIRECCION", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DIRECCION() As String
		Get
			Return Me._DIRECCION
		End Get
		Set
			If (String.Equals(Me._DIRECCION, value) = false) Then
				Me._DIRECCION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIUDAD", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CIUDAD() As String
		Get
			Return Me._CIUDAD
		End Get
		Set
			If (String.Equals(Me._CIUDAD, value) = false) Then
				Me._CIUDAD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCIA", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PROVINCIA() As String
		Get
			Return Me._PROVINCIA
		End Get
		Set
			If (String.Equals(Me._PROVINCIA, value) = false) Then
				Me._PROVINCIA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIF", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CIF() As String
		Get
			Return Me._CIF
		End Get
		Set
			If (String.Equals(Me._CIF, value) = false) Then
				Me._CIF = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOGOTIPO", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LOGOTIPO() As System.Data.Linq.Binary
		Get
			Return Me._LOGOTIPO
		End Get
		Set
			If (Object.Equals(Me._LOGOTIPO, value) = false) Then
				Me._LOGOTIPO = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CPClinica", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CPClinica() As String
		Get
			Return Me._CPClinica
		End Get
		Set
			If (String.Equals(Me._CPClinica, value) = false) Then
				Me._CPClinica = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono1", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefono1() As String
		Get
			Return Me._Telefono1
		End Get
		Set
			If (String.Equals(Me._Telefono1, value) = false) Then
				Me._Telefono1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono2", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Telefono2() As String
		Get
			Return Me._Telefono2
		End Get
		Set
			If (String.Equals(Me._Telefono2, value) = false) Then
				Me._Telefono2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fax() As String
		Get
			Return Me._Fax
		End Get
		Set
			If (String.Equals(Me._Fax, value) = false) Then
				Me._Fax = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Web", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Web() As String
		Get
			Return Me._Web
		End Get
		Set
			If (String.Equals(Me._Web, value) = false) Then
				Me._Web = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOGOTIPOURLPARAREPORTE", CanBeNull:=false)>  _
	Public Property LOGOTIPOURLPARAREPORTE() As String
		Get
			Return Me._LOGOTIPOURLPARAREPORTE
		End Get
		Set
			If (String.Equals(Me._LOGOTIPOURLPARAREPORTE, value) = false) Then
				Me._LOGOTIPOURLPARAREPORTE = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GASTOS")>  _
Partial Public Class GASTO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDGASTO As Integer
	
	Private _CONCEPTO As String
	
	Private _IMPORTE As System.Nullable(Of Decimal)
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _REFFORMAPAGO As String
	
	Private _FORMASPAGO As EntityRef(Of FORMASPAGO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDGASTOChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDGASTOChanged()
    End Sub
    Partial Private Sub OnCONCEPTOChanging(value As String)
    End Sub
    Partial Private Sub OnCONCEPTOChanged()
    End Sub
    Partial Private Sub OnIMPORTEChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnIMPORTEChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnREFFORMAPAGOChanging(value As String)
    End Sub
    Partial Private Sub OnREFFORMAPAGOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FORMASPAGO = CType(Nothing, EntityRef(Of FORMASPAGO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDGASTO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDGASTO() As Integer
		Get
			Return Me._IDGASTO
		End Get
		Set
			If ((Me._IDGASTO = value)  _
						= false) Then
				Me.OnIDGASTOChanging(value)
				Me.SendPropertyChanging
				Me._IDGASTO = value
				Me.SendPropertyChanged("IDGASTO")
				Me.OnIDGASTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONCEPTO", DbType:="VarChar(250)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CONCEPTO() As String
		Get
			Return Me._CONCEPTO
		End Get
		Set
			If (String.Equals(Me._CONCEPTO, value) = false) Then
				Me.OnCONCEPTOChanging(value)
				Me.SendPropertyChanging
				Me._CONCEPTO = value
				Me.SendPropertyChanged("CONCEPTO")
				Me.OnCONCEPTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMPORTE", DbType:="Decimal(18,2)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IMPORTE() As System.Nullable(Of Decimal)
		Get
			Return Me._IMPORTE
		End Get
		Set
			If (Me._IMPORTE.Equals(value) = false) Then
				Me.OnIMPORTEChanging(value)
				Me.SendPropertyChanging
				Me._IMPORTE = value
				Me.SendPropertyChanged("IMPORTE")
				Me.OnIMPORTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFFORMAPAGO", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFFORMAPAGO() As String
		Get
			Return Me._REFFORMAPAGO
		End Get
		Set
			If (String.Equals(Me._REFFORMAPAGO, value) = false) Then
				If Me._FORMASPAGO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFFORMAPAGOChanging(value)
				Me.SendPropertyChanging
				Me._REFFORMAPAGO = value
				Me.SendPropertyChanged("REFFORMAPAGO")
				Me.OnREFFORMAPAGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_GASTO", Storage:="_FORMASPAGO", ThisKey:="REFFORMAPAGO", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property FORMASPAGO() As FORMASPAGO
		Get
			Return Me._FORMASPAGO.Entity
		End Get
		Set
			Dim previousValue As FORMASPAGO = Me._FORMASPAGO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FORMASPAGO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FORMASPAGO.Entity = Nothing
					previousValue.GASTOs.Remove(Me)
				End If
				Me._FORMASPAGO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.GASTOs.Add(Me)
					Me._REFFORMAPAGO = value.CODIGO
				Else
					Me._REFFORMAPAGO = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("FORMASPAGO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_Factura")>  _
Partial Public Class N_Factura
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Factura As Long
	
	Private _Codigo As String
	
	Private _ID_TipoFactura As System.Nullable(Of Integer)
	
	Private _Referencia As String
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _ID_Estado As System.Nullable(Of Integer)
	
	Private _ID_Cliente As System.Nullable(Of Integer)
	
	Private _ID_FormaPago As String
	
	Private _IRPFPorciento As System.Nullable(Of Double)
	
	Private _IRPFCantidad As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _Observaciones As String
	
	Private _PlazoEntrega As System.Nullable(Of Date)
	
	Private _Validez As String
	
	Private _PortePagado As System.Nullable(Of Boolean)
	
	Private _PorteDebido As System.Nullable(Of Boolean)
	
	Private _PorteTexto As String
	
	Private _Privado As String
	
	Private _DocumentacionAsociada As String
	
	Private _Comentarios As String
	
	Private _Imagen As System.Data.Linq.Binary
	
	Private _Pagado As Boolean
	
	Private _FechaPagado As Date
	
	Private _PagadoConCredito As System.Nullable(Of Boolean)
	
	Private _IDEntregaCuenta As System.Nullable(Of Long)
	
	Private _N_Factura_Lineas As EntitySet(Of N_Factura_Linea)
	
	Private _FORMASPAGO As EntityRef(Of FORMASPAGO)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
	Private _EntregasCuenta As EntityRef(Of EntregasCuenta)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_FacturaChanging(value As Long)
    End Sub
    Partial Private Sub OnID_FacturaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnID_TipoFacturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_TipoFacturaChanged()
    End Sub
    Partial Private Sub OnReferenciaChanging(value As String)
    End Sub
    Partial Private Sub OnReferenciaChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnID_EstadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_EstadoChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_FormaPagoChanging(value As String)
    End Sub
    Partial Private Sub OnID_FormaPagoChanged()
    End Sub
    Partial Private Sub OnIRPFPorcientoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnIRPFPorcientoChanged()
    End Sub
    Partial Private Sub OnIRPFCantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnIRPFCantidadChanged()
    End Sub
    Partial Private Sub OnTotalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnPlazoEntregaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPlazoEntregaChanged()
    End Sub
    Partial Private Sub OnValidezChanging(value As String)
    End Sub
    Partial Private Sub OnValidezChanged()
    End Sub
    Partial Private Sub OnPortePagadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPortePagadoChanged()
    End Sub
    Partial Private Sub OnPorteDebidoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPorteDebidoChanged()
    End Sub
    Partial Private Sub OnPorteTextoChanging(value As String)
    End Sub
    Partial Private Sub OnPorteTextoChanged()
    End Sub
    Partial Private Sub OnPrivadoChanging(value As String)
    End Sub
    Partial Private Sub OnPrivadoChanged()
    End Sub
    Partial Private Sub OnDocumentacionAsociadaChanging(value As String)
    End Sub
    Partial Private Sub OnDocumentacionAsociadaChanged()
    End Sub
    Partial Private Sub OnComentariosChanging(value As String)
    End Sub
    Partial Private Sub OnComentariosChanged()
    End Sub
    Partial Private Sub OnImagenChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImagenChanged()
    End Sub
    Partial Private Sub OnPagadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPagadoChanged()
    End Sub
    Partial Private Sub OnFechaPagadoChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaPagadoChanged()
    End Sub
    Partial Private Sub OnPagadoConCreditoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPagadoConCreditoChanged()
    End Sub
    Partial Private Sub OnIDEntregaCuentaChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnIDEntregaCuentaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_Factura_Lineas = New EntitySet(Of N_Factura_Linea)(AddressOf Me.attach_N_Factura_Lineas, AddressOf Me.detach_N_Factura_Lineas)
		Me._FORMASPAGO = CType(Nothing, EntityRef(Of FORMASPAGO))
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		Me._EntregasCuenta = CType(Nothing, EntityRef(Of EntregasCuenta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Factura", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Factura() As Long
		Get
			Return Me._ID_Factura
		End Get
		Set
			If ((Me._ID_Factura = value)  _
						= false) Then
				Me.OnID_FacturaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Factura = value
				Me.SendPropertyChanged("ID_Factura")
				Me.OnID_FacturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoFactura", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_TipoFactura() As System.Nullable(Of Integer)
		Get
			Return Me._ID_TipoFactura
		End Get
		Set
			If (Me._ID_TipoFactura.Equals(value) = false) Then
				Me.OnID_TipoFacturaChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoFactura = value
				Me.SendPropertyChanged("ID_TipoFactura")
				Me.OnID_TipoFacturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Referencia", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Referencia() As String
		Get
			Return Me._Referencia
		End Get
		Set
			If (String.Equals(Me._Referencia, value) = false) Then
				Me.OnReferenciaChanging(value)
				Me.SendPropertyChanging
				Me._Referencia = value
				Me.SendPropertyChanged("Referencia")
				Me.OnReferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Estado", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Estado() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Estado
		End Get
		Set
			If (Me._ID_Estado.Equals(value) = false) Then
				Me.OnID_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Estado = value
				Me.SendPropertyChanged("ID_Estado")
				Me.OnID_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Cliente() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If (Me._ID_Cliente.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormaPago", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_FormaPago() As String
		Get
			Return Me._ID_FormaPago
		End Get
		Set
			If (String.Equals(Me._ID_FormaPago, value) = false) Then
				If Me._FORMASPAGO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormaPago = value
				Me.SendPropertyChanged("ID_FormaPago")
				Me.OnID_FormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IRPFPorciento", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IRPFPorciento() As System.Nullable(Of Double)
		Get
			Return Me._IRPFPorciento
		End Get
		Set
			If (Me._IRPFPorciento.Equals(value) = false) Then
				Me.OnIRPFPorcientoChanging(value)
				Me.SendPropertyChanging
				Me._IRPFPorciento = value
				Me.SendPropertyChanged("IRPFPorciento")
				Me.OnIRPFPorcientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IRPFCantidad", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IRPFCantidad() As System.Nullable(Of Double)
		Get
			Return Me._IRPFCantidad
		End Get
		Set
			If (Me._IRPFCantidad.Equals(value) = false) Then
				Me.OnIRPFCantidadChanging(value)
				Me.SendPropertyChanging
				Me._IRPFCantidad = value
				Me.SendPropertyChanged("IRPFCantidad")
				Me.OnIRPFCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlazoEntrega", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PlazoEntrega() As System.Nullable(Of Date)
		Get
			Return Me._PlazoEntrega
		End Get
		Set
			If (Me._PlazoEntrega.Equals(value) = false) Then
				Me.OnPlazoEntregaChanging(value)
				Me.SendPropertyChanging
				Me._PlazoEntrega = value
				Me.SendPropertyChanged("PlazoEntrega")
				Me.OnPlazoEntregaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validez", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Validez() As String
		Get
			Return Me._Validez
		End Get
		Set
			If (String.Equals(Me._Validez, value) = false) Then
				Me.OnValidezChanging(value)
				Me.SendPropertyChanging
				Me._Validez = value
				Me.SendPropertyChanged("Validez")
				Me.OnValidezChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortePagado", DbType:="Bit", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PortePagado() As System.Nullable(Of Boolean)
		Get
			Return Me._PortePagado
		End Get
		Set
			If (Me._PortePagado.Equals(value) = false) Then
				Me.OnPortePagadoChanging(value)
				Me.SendPropertyChanging
				Me._PortePagado = value
				Me.SendPropertyChanged("PortePagado")
				Me.OnPortePagadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PorteDebido", DbType:="Bit", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PorteDebido() As System.Nullable(Of Boolean)
		Get
			Return Me._PorteDebido
		End Get
		Set
			If (Me._PorteDebido.Equals(value) = false) Then
				Me.OnPorteDebidoChanging(value)
				Me.SendPropertyChanging
				Me._PorteDebido = value
				Me.SendPropertyChanged("PorteDebido")
				Me.OnPorteDebidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PorteTexto", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PorteTexto() As String
		Get
			Return Me._PorteTexto
		End Get
		Set
			If (String.Equals(Me._PorteTexto, value) = false) Then
				Me.OnPorteTextoChanging(value)
				Me.SendPropertyChanging
				Me._PorteTexto = value
				Me.SendPropertyChanged("PorteTexto")
				Me.OnPorteTextoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Privado", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Privado() As String
		Get
			Return Me._Privado
		End Get
		Set
			If (String.Equals(Me._Privado, value) = false) Then
				Me.OnPrivadoChanging(value)
				Me.SendPropertyChanging
				Me._Privado = value
				Me.SendPropertyChanged("Privado")
				Me.OnPrivadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentacionAsociada", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DocumentacionAsociada() As String
		Get
			Return Me._DocumentacionAsociada
		End Get
		Set
			If (String.Equals(Me._DocumentacionAsociada, value) = false) Then
				Me.OnDocumentacionAsociadaChanging(value)
				Me.SendPropertyChanging
				Me._DocumentacionAsociada = value
				Me.SendPropertyChanged("DocumentacionAsociada")
				Me.OnDocumentacionAsociadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comentarios", DbType:="NVarChar(200)")>  _
	Public Property Comentarios() As String
		Get
			Return Me._Comentarios
		End Get
		Set
			If (String.Equals(Me._Comentarios, value) = false) Then
				Me.OnComentariosChanging(value)
				Me.SendPropertyChanging
				Me._Comentarios = value
				Me.SendPropertyChanged("Comentarios")
				Me.OnComentariosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Imagen", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Imagen() As System.Data.Linq.Binary
		Get
			Return Me._Imagen
		End Get
		Set
			If (Object.Equals(Me._Imagen, value) = false) Then
				Me.OnImagenChanging(value)
				Me.SendPropertyChanging
				Me._Imagen = value
				Me.SendPropertyChanged("Imagen")
				Me.OnImagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pagado", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Pagado() As Boolean
		Get
			Return Me._Pagado
		End Get
		Set
			If ((Me._Pagado = value)  _
						= false) Then
				Me.OnPagadoChanging(value)
				Me.SendPropertyChanging
				Me._Pagado = value
				Me.SendPropertyChanged("Pagado")
				Me.OnPagadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaPagado", DbType:="DateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaPagado() As Date
		Get
			Return Me._FechaPagado
		End Get
		Set
			If ((Me._FechaPagado = value)  _
						= false) Then
				Me.OnFechaPagadoChanging(value)
				Me.SendPropertyChanging
				Me._FechaPagado = value
				Me.SendPropertyChanged("FechaPagado")
				Me.OnFechaPagadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PagadoConCredito", DbType:="Bit")>  _
	Public Property PagadoConCredito() As System.Nullable(Of Boolean)
		Get
			Return Me._PagadoConCredito
		End Get
		Set
			If (Me._PagadoConCredito.Equals(value) = false) Then
				Me.OnPagadoConCreditoChanging(value)
				Me.SendPropertyChanging
				Me._PagadoConCredito = value
				Me.SendPropertyChanged("PagadoConCredito")
				Me.OnPagadoConCreditoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDEntregaCuenta", DbType:="BigInt")>  _
	Public Property IDEntregaCuenta() As System.Nullable(Of Long)
		Get
			Return Me._IDEntregaCuenta
		End Get
		Set
			If (Me._IDEntregaCuenta.Equals(value) = false) Then
				If Me._EntregasCuenta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDEntregaCuentaChanging(value)
				Me.SendPropertyChanging
				Me._IDEntregaCuenta = value
				Me.SendPropertyChanged("IDEntregaCuenta")
				Me.OnIDEntregaCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Factura_N_Factura_Linea", Storage:="_N_Factura_Lineas", ThisKey:="ID_Factura", OtherKey:="ID_Factura")>  _
	Public Property N_Factura_Lineas() As EntitySet(Of N_Factura_Linea)
		Get
			Return Me._N_Factura_Lineas
		End Get
		Set
			Me._N_Factura_Lineas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_N_Factura", Storage:="_FORMASPAGO", ThisKey:="ID_FormaPago", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property FORMASPAGO() As FORMASPAGO
		Get
			Return Me._FORMASPAGO.Entity
		End Get
		Set
			Dim previousValue As FORMASPAGO = Me._FORMASPAGO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FORMASPAGO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FORMASPAGO.Entity = Nothing
					previousValue.N_Facturas.Remove(Me)
				End If
				Me._FORMASPAGO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Facturas.Add(Me)
					Me._ID_FormaPago = value.CODIGO
				Else
					Me._ID_FormaPago = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("FORMASPAGO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_N_Factura", Storage:="_PACIENTE", ThisKey:="ID_Cliente", OtherKey:="CPACIENTE", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.N_Facturas.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Facturas.Add(Me)
					Me._ID_Cliente = value.CPACIENTE
				Else
					Me._ID_Cliente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EntregasCuenta_N_Factura", Storage:="_EntregasCuenta", ThisKey:="IDEntregaCuenta", OtherKey:="IDEntregaCuenta", IsForeignKey:=true)>  _
	Public Property EntregasCuenta() As EntregasCuenta
		Get
			Return Me._EntregasCuenta.Entity
		End Get
		Set
			Dim previousValue As EntregasCuenta = Me._EntregasCuenta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EntregasCuenta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EntregasCuenta.Entity = Nothing
					previousValue.N_Facturas.Remove(Me)
				End If
				Me._EntregasCuenta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Facturas.Add(Me)
					Me._IDEntregaCuenta = value.IDEntregaCuenta
				Else
					Me._IDEntregaCuenta = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("EntregasCuenta")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_N_Factura_Lineas(ByVal entity As N_Factura_Linea)
		Me.SendPropertyChanging
		entity.N_Factura = Me
	End Sub
	
	Private Sub detach_N_Factura_Lineas(ByVal entity As N_Factura_Linea)
		Me.SendPropertyChanging
		entity.N_Factura = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_Factura_Lineas")>  _
Partial Public Class N_Factura_Linea
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_FacturaLineas As Long
	
	Private _ID_Factura As Long
	
	Private _Codigo As String
	
	Private _ID_Articulo As System.Nullable(Of Long)
	
	Private _Descripcion As String
	
	Private _Cantidad As System.Nullable(Of Double)
	
	Private _Precio As System.Nullable(Of Double)
	
	Private _Descuento1 As System.Nullable(Of Double)
	
	Private _Descuento2 As System.Nullable(Of Double)
	
	Private _Descuento3 As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _ID_TipoIVA As System.Nullable(Of Integer)
	
	Private _IVAIncluido As Boolean
	
	Private _Costo As System.Nullable(Of Double)
	
	Private _Imagen As System.Data.Linq.Binary
	
	Private _Observaciones As String
	
	Private _ID_Almacen As System.Nullable(Of Integer)
	
	Private _Validado As System.Nullable(Of Boolean)
	
	Private _ID_DocOrigen As System.Nullable(Of Long)
	
	Private _ID_TipoDocOrigen As System.Nullable(Of Integer)
	
	Private _N_Factura As EntityRef(Of N_Factura)
	
	Private _N_TipoIVA As EntityRef(Of N_TipoIVA)
	
	Private _N_Almacen As EntityRef(Of N_Almacen)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_FacturaLineasChanging(value As Long)
    End Sub
    Partial Private Sub OnID_FacturaLineasChanged()
    End Sub
    Partial Private Sub OnID_FacturaChanging(value As Long)
    End Sub
    Partial Private Sub OnID_FacturaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnID_ArticuloChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnID_ArticuloChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnCantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCantidadChanged()
    End Sub
    Partial Private Sub OnPrecioChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPrecioChanged()
    End Sub
    Partial Private Sub OnDescuento1Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuento1Changed()
    End Sub
    Partial Private Sub OnDescuento2Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuento2Changed()
    End Sub
    Partial Private Sub OnDescuento3Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuento3Changed()
    End Sub
    Partial Private Sub OnTotalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnID_TipoIVAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_TipoIVAChanged()
    End Sub
    Partial Private Sub OnIVAIncluidoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIVAIncluidoChanged()
    End Sub
    Partial Private Sub OnCostoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCostoChanged()
    End Sub
    Partial Private Sub OnImagenChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImagenChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnID_AlmacenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_AlmacenChanged()
    End Sub
    Partial Private Sub OnValidadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnValidadoChanged()
    End Sub
    Partial Private Sub OnID_DocOrigenChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnID_DocOrigenChanged()
    End Sub
    Partial Private Sub OnID_TipoDocOrigenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_TipoDocOrigenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_Factura = CType(Nothing, EntityRef(Of N_Factura))
		Me._N_TipoIVA = CType(Nothing, EntityRef(Of N_TipoIVA))
		Me._N_Almacen = CType(Nothing, EntityRef(Of N_Almacen))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FacturaLineas", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_FacturaLineas() As Long
		Get
			Return Me._ID_FacturaLineas
		End Get
		Set
			If ((Me._ID_FacturaLineas = value)  _
						= false) Then
				Me.OnID_FacturaLineasChanging(value)
				Me.SendPropertyChanging
				Me._ID_FacturaLineas = value
				Me.SendPropertyChanged("ID_FacturaLineas")
				Me.OnID_FacturaLineasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Factura", DbType:="BigInt NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Factura() As Long
		Get
			Return Me._ID_Factura
		End Get
		Set
			If ((Me._ID_Factura = value)  _
						= false) Then
				If Me._N_Factura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FacturaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Factura = value
				Me.SendPropertyChanged("ID_Factura")
				Me.OnID_FacturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Articulo", DbType:="BigInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Articulo() As System.Nullable(Of Long)
		Get
			Return Me._ID_Articulo
		End Get
		Set
			If (Me._ID_Articulo.Equals(value) = false) Then
				Me.OnID_ArticuloChanging(value)
				Me.SendPropertyChanging
				Me._ID_Articulo = value
				Me.SendPropertyChanged("ID_Articulo")
				Me.OnID_ArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cantidad() As System.Nullable(Of Double)
		Get
			Return Me._Cantidad
		End Get
		Set
			If (Me._Cantidad.Equals(value) = false) Then
				Me.OnCantidadChanging(value)
				Me.SendPropertyChanging
				Me._Cantidad = value
				Me.SendPropertyChanged("Cantidad")
				Me.OnCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Precio() As System.Nullable(Of Double)
		Get
			Return Me._Precio
		End Get
		Set
			If (Me._Precio.Equals(value) = false) Then
				Me.OnPrecioChanging(value)
				Me.SendPropertyChanging
				Me._Precio = value
				Me.SendPropertyChanged("Precio")
				Me.OnPrecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento1", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descuento1() As System.Nullable(Of Double)
		Get
			Return Me._Descuento1
		End Get
		Set
			If (Me._Descuento1.Equals(value) = false) Then
				Me.OnDescuento1Changing(value)
				Me.SendPropertyChanging
				Me._Descuento1 = value
				Me.SendPropertyChanged("Descuento1")
				Me.OnDescuento1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento2", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descuento2() As System.Nullable(Of Double)
		Get
			Return Me._Descuento2
		End Get
		Set
			If (Me._Descuento2.Equals(value) = false) Then
				Me.OnDescuento2Changing(value)
				Me.SendPropertyChanging
				Me._Descuento2 = value
				Me.SendPropertyChanged("Descuento2")
				Me.OnDescuento2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento3", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descuento3() As System.Nullable(Of Double)
		Get
			Return Me._Descuento3
		End Get
		Set
			If (Me._Descuento3.Equals(value) = false) Then
				Me.OnDescuento3Changing(value)
				Me.SendPropertyChanging
				Me._Descuento3 = value
				Me.SendPropertyChanged("Descuento3")
				Me.OnDescuento3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoIVA", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_TipoIVA() As System.Nullable(Of Integer)
		Get
			Return Me._ID_TipoIVA
		End Get
		Set
			If (Me._ID_TipoIVA.Equals(value) = false) Then
				If Me._N_TipoIVA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_TipoIVAChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoIVA = value
				Me.SendPropertyChanged("ID_TipoIVA")
				Me.OnID_TipoIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IVAIncluido", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IVAIncluido() As Boolean
		Get
			Return Me._IVAIncluido
		End Get
		Set
			If ((Me._IVAIncluido = value)  _
						= false) Then
				Me.OnIVAIncluidoChanging(value)
				Me.SendPropertyChanging
				Me._IVAIncluido = value
				Me.SendPropertyChanged("IVAIncluido")
				Me.OnIVAIncluidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Costo", DbType:="Float", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Costo() As System.Nullable(Of Double)
		Get
			Return Me._Costo
		End Get
		Set
			If (Me._Costo.Equals(value) = false) Then
				Me.OnCostoChanging(value)
				Me.SendPropertyChanging
				Me._Costo = value
				Me.SendPropertyChanged("Costo")
				Me.OnCostoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Imagen", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Imagen() As System.Data.Linq.Binary
		Get
			Return Me._Imagen
		End Get
		Set
			If (Object.Equals(Me._Imagen, value) = false) Then
				Me.OnImagenChanging(value)
				Me.SendPropertyChanging
				Me._Imagen = value
				Me.SendPropertyChanged("Imagen")
				Me.OnImagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Almacen", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_Almacen() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Almacen
		End Get
		Set
			If (Me._ID_Almacen.Equals(value) = false) Then
				If Me._N_Almacen.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AlmacenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Almacen = value
				Me.SendPropertyChanged("ID_Almacen")
				Me.OnID_AlmacenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validado", DbType:="Bit", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Validado() As System.Nullable(Of Boolean)
		Get
			Return Me._Validado
		End Get
		Set
			If (Me._Validado.Equals(value) = false) Then
				Me.OnValidadoChanging(value)
				Me.SendPropertyChanging
				Me._Validado = value
				Me.SendPropertyChanged("Validado")
				Me.OnValidadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_DocOrigen", DbType:="BigInt", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_DocOrigen() As System.Nullable(Of Long)
		Get
			Return Me._ID_DocOrigen
		End Get
		Set
			If (Me._ID_DocOrigen.Equals(value) = false) Then
				Me.OnID_DocOrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_DocOrigen = value
				Me.SendPropertyChanged("ID_DocOrigen")
				Me.OnID_DocOrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoDocOrigen", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_TipoDocOrigen() As System.Nullable(Of Integer)
		Get
			Return Me._ID_TipoDocOrigen
		End Get
		Set
			If (Me._ID_TipoDocOrigen.Equals(value) = false) Then
				Me.OnID_TipoDocOrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoDocOrigen = value
				Me.SendPropertyChanged("ID_TipoDocOrigen")
				Me.OnID_TipoDocOrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Factura_N_Factura_Linea", Storage:="_N_Factura", ThisKey:="ID_Factura", OtherKey:="ID_Factura", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property N_Factura() As N_Factura
		Get
			Return Me._N_Factura.Entity
		End Get
		Set
			Dim previousValue As N_Factura = Me._N_Factura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_Factura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_Factura.Entity = Nothing
					previousValue.N_Factura_Lineas.Remove(Me)
				End If
				Me._N_Factura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Factura_Lineas.Add(Me)
					Me._ID_Factura = value.ID_Factura
				Else
					Me._ID_Factura = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("N_Factura")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_TipoIVA_N_Factura_Linea", Storage:="_N_TipoIVA", ThisKey:="ID_TipoIVA", OtherKey:="ID_TipoIVA", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property N_TipoIVA() As N_TipoIVA
		Get
			Return Me._N_TipoIVA.Entity
		End Get
		Set
			Dim previousValue As N_TipoIVA = Me._N_TipoIVA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_TipoIVA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_TipoIVA.Entity = Nothing
					previousValue.N_Factura_Lineas.Remove(Me)
				End If
				Me._N_TipoIVA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Factura_Lineas.Add(Me)
					Me._ID_TipoIVA = value.ID_TipoIVA
				Else
					Me._ID_TipoIVA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("N_TipoIVA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Almacen_N_Factura_Linea", Storage:="_N_Almacen", ThisKey:="ID_Almacen", OtherKey:="ID_Almacen", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property N_Almacen() As N_Almacen
		Get
			Return Me._N_Almacen.Entity
		End Get
		Set
			Dim previousValue As N_Almacen = Me._N_Almacen.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_Almacen.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_Almacen.Entity = Nothing
					previousValue.N_Factura_Lineas.Remove(Me)
				End If
				Me._N_Almacen.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Factura_Lineas.Add(Me)
					Me._ID_Almacen = value.ID_Almacen
				Else
					Me._ID_Almacen = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("N_Almacen")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CONCEPTOSFACTURABLES")>  _
Partial Public Class CONCEPTOSFACTURABLE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _REFPACIENTE As System.Nullable(Of Integer)
	
	Private _REFCONCEPTO As String
	
	Private _DESCRIPCION As String
	
	Private _IMPORTE As System.Nullable(Of Single)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnREFCONCEPTOChanging(value As String)
    End Sub
    Partial Private Sub OnREFCONCEPTOChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnIMPORTEChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnIMPORTEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFPACIENTE() As System.Nullable(Of Integer)
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If (Me._REFPACIENTE.Equals(value) = false) Then
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFCONCEPTO", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property REFCONCEPTO() As String
		Get
			Return Me._REFCONCEPTO
		End Get
		Set
			If (String.Equals(Me._REFCONCEPTO, value) = false) Then
				Me.OnREFCONCEPTOChanging(value)
				Me.SendPropertyChanging
				Me._REFCONCEPTO = value
				Me.SendPropertyChanged("REFCONCEPTO")
				Me.OnREFCONCEPTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(150)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMPORTE", DbType:="Real", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IMPORTE() As System.Nullable(Of Single)
		Get
			Return Me._IMPORTE
		End Get
		Set
			If (Me._IMPORTE.Equals(value) = false) Then
				Me.OnIMPORTEChanging(value)
				Me.SendPropertyChanging
				Me._IMPORTE = value
				Me.SendPropertyChanged("IMPORTE")
				Me.OnIMPORTEChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Comunicaciones")>  _
Partial Public Class Comunicacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Comunicacion As Long
	
	Private _eTipo As System.Nullable(Of Integer)
	
	Private _FechaEnvio As System.Nullable(Of Date)
	
	Private _ID_UsuarioEmisor As System.Nullable(Of Integer)
	
	Private _ID_PacienteDestino As System.Nullable(Of Integer)
	
	Private _NombreUsuarioEmisor As String
	
	Private _NombrePacienteDestino As String
	
	Private _Contenido As String
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
	Private _USUARIO As EntityRef(Of USUARIO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ComunicacionChanging(value As Long)
    End Sub
    Partial Private Sub OnID_ComunicacionChanged()
    End Sub
    Partial Private Sub OneTipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OneTipoChanged()
    End Sub
    Partial Private Sub OnFechaEnvioChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaEnvioChanged()
    End Sub
    Partial Private Sub OnID_UsuarioEmisorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_UsuarioEmisorChanged()
    End Sub
    Partial Private Sub OnID_PacienteDestinoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PacienteDestinoChanged()
    End Sub
    Partial Private Sub OnNombreUsuarioEmisorChanging(value As String)
    End Sub
    Partial Private Sub OnNombreUsuarioEmisorChanged()
    End Sub
    Partial Private Sub OnNombrePacienteDestinoChanging(value As String)
    End Sub
    Partial Private Sub OnNombrePacienteDestinoChanged()
    End Sub
    Partial Private Sub OnContenidoChanging(value As String)
    End Sub
    Partial Private Sub OnContenidoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		Me._USUARIO = CType(Nothing, EntityRef(Of USUARIO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Comunicacion", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Comunicacion() As Long
		Get
			Return Me._ID_Comunicacion
		End Get
		Set
			If ((Me._ID_Comunicacion = value)  _
						= false) Then
				Me.OnID_ComunicacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Comunicacion = value
				Me.SendPropertyChanged("ID_Comunicacion")
				Me.OnID_ComunicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eTipo", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property eTipo() As System.Nullable(Of Integer)
		Get
			Return Me._eTipo
		End Get
		Set
			If (Me._eTipo.Equals(value) = false) Then
				Me.OneTipoChanging(value)
				Me.SendPropertyChanging
				Me._eTipo = value
				Me.SendPropertyChanged("eTipo")
				Me.OneTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaEnvio", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FechaEnvio() As System.Nullable(Of Date)
		Get
			Return Me._FechaEnvio
		End Get
		Set
			If (Me._FechaEnvio.Equals(value) = false) Then
				Me.OnFechaEnvioChanging(value)
				Me.SendPropertyChanging
				Me._FechaEnvio = value
				Me.SendPropertyChanged("FechaEnvio")
				Me.OnFechaEnvioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_UsuarioEmisor", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_UsuarioEmisor() As System.Nullable(Of Integer)
		Get
			Return Me._ID_UsuarioEmisor
		End Get
		Set
			If (Me._ID_UsuarioEmisor.Equals(value) = false) Then
				If Me._USUARIO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioEmisorChanging(value)
				Me.SendPropertyChanging
				Me._ID_UsuarioEmisor = value
				Me.SendPropertyChanged("ID_UsuarioEmisor")
				Me.OnID_UsuarioEmisorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PacienteDestino", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ID_PacienteDestino() As System.Nullable(Of Integer)
		Get
			Return Me._ID_PacienteDestino
		End Get
		Set
			If (Me._ID_PacienteDestino.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PacienteDestinoChanging(value)
				Me.SendPropertyChanging
				Me._ID_PacienteDestino = value
				Me.SendPropertyChanged("ID_PacienteDestino")
				Me.OnID_PacienteDestinoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreUsuarioEmisor", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NombreUsuarioEmisor() As String
		Get
			Return Me._NombreUsuarioEmisor
		End Get
		Set
			If (String.Equals(Me._NombreUsuarioEmisor, value) = false) Then
				Me.OnNombreUsuarioEmisorChanging(value)
				Me.SendPropertyChanging
				Me._NombreUsuarioEmisor = value
				Me.SendPropertyChanged("NombreUsuarioEmisor")
				Me.OnNombreUsuarioEmisorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombrePacienteDestino", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NombrePacienteDestino() As String
		Get
			Return Me._NombrePacienteDestino
		End Get
		Set
			If (String.Equals(Me._NombrePacienteDestino, value) = false) Then
				Me.OnNombrePacienteDestinoChanging(value)
				Me.SendPropertyChanging
				Me._NombrePacienteDestino = value
				Me.SendPropertyChanged("NombrePacienteDestino")
				Me.OnNombrePacienteDestinoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contenido", DbType:="NVarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Contenido() As String
		Get
			Return Me._Contenido
		End Get
		Set
			If (String.Equals(Me._Contenido, value) = false) Then
				Me.OnContenidoChanging(value)
				Me.SendPropertyChanging
				Me._Contenido = value
				Me.SendPropertyChanged("Contenido")
				Me.OnContenidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_Comunicacion", Storage:="_PACIENTE", ThisKey:="ID_PacienteDestino", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.Comunicacions.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Comunicacions.Add(Me)
					Me._ID_PacienteDestino = value.CPACIENTE
				Else
					Me._ID_PacienteDestino = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIO_Comunicacion", Storage:="_USUARIO", ThisKey:="ID_UsuarioEmisor", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property USUARIO() As USUARIO
		Get
			Return Me._USUARIO.Entity
		End Get
		Set
			Dim previousValue As USUARIO = Me._USUARIO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._USUARIO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._USUARIO.Entity = Nothing
					previousValue.Comunicacions.Remove(Me)
				End If
				Me._USUARIO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Comunicacions.Add(Me)
					Me._ID_UsuarioEmisor = value.CODIGO
				Else
					Me._ID_UsuarioEmisor = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("USUARIO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tarifas")>  _
Partial Public Class Tarifa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTarifa As Integer
	
	Private _DescripcionTarifa As String
	
	Private _IdConceptoFra As String
	
	Private _Importe As Double
	
	Private _CONCEPTOSFRA As EntityRef(Of CONCEPTOSFRA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTarifaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTarifaChanged()
    End Sub
    Partial Private Sub OnDescripcionTarifaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionTarifaChanged()
    End Sub
    Partial Private Sub OnIdConceptoFraChanging(value As String)
    End Sub
    Partial Private Sub OnIdConceptoFraChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As Double)
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CONCEPTOSFRA = CType(Nothing, EntityRef(Of CONCEPTOSFRA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTarifa", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdTarifa() As Integer
		Get
			Return Me._IdTarifa
		End Get
		Set
			If ((Me._IdTarifa = value)  _
						= false) Then
				Me.OnIdTarifaChanging(value)
				Me.SendPropertyChanging
				Me._IdTarifa = value
				Me.SendPropertyChanged("IdTarifa")
				Me.OnIdTarifaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionTarifa", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DescripcionTarifa() As String
		Get
			Return Me._DescripcionTarifa
		End Get
		Set
			If (String.Equals(Me._DescripcionTarifa, value) = false) Then
				Me.OnDescripcionTarifaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionTarifa = value
				Me.SendPropertyChanged("DescripcionTarifa")
				Me.OnDescripcionTarifaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdConceptoFra", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property IdConceptoFra() As String
		Get
			Return Me._IdConceptoFra
		End Get
		Set
			If (String.Equals(Me._IdConceptoFra, value) = false) Then
				If Me._CONCEPTOSFRA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdConceptoFraChanging(value)
				Me.SendPropertyChanging
				Me._IdConceptoFra = value
				Me.SendPropertyChanged("IdConceptoFra")
				Me.OnIdConceptoFraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Float NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Importe() As Double
		Get
			Return Me._Importe
		End Get
		Set
			If ((Me._Importe = value)  _
						= false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_Tarifa", Storage:="_CONCEPTOSFRA", ThisKey:="IdConceptoFra", OtherKey:="CODIGO", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property CONCEPTOSFRA() As CONCEPTOSFRA
		Get
			Return Me._CONCEPTOSFRA.Entity
		End Get
		Set
			Dim previousValue As CONCEPTOSFRA = Me._CONCEPTOSFRA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONCEPTOSFRA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONCEPTOSFRA.Entity = Nothing
					previousValue.Tarifas.Remove(Me)
				End If
				Me._CONCEPTOSFRA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tarifas.Add(Me)
					Me._IdConceptoFra = value.CODIGO
				Else
					Me._IdConceptoFra = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("CONCEPTOSFRA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PLANTILLAS")>  _
Partial Public Class PLANTILLA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As Integer
	
	Private _DESCRIPCION As String
	
	Private _SECCION As String
	
	Private _TEXTO As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As Integer)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnSECCIONChanging(value As String)
    End Sub
    Partial Private Sub OnSECCIONChanged()
    End Sub
    Partial Private Sub OnTEXTOChanging(value As String)
    End Sub
    Partial Private Sub OnTEXTOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CODIGO() As Integer
		Get
			Return Me._CODIGO
		End Get
		Set
			If ((Me._CODIGO = value)  _
						= false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(90)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SECCION", DbType:="VarChar(2) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SECCION() As String
		Get
			Return Me._SECCION
		End Get
		Set
			If (String.Equals(Me._SECCION, value) = false) Then
				Me.OnSECCIONChanging(value)
				Me.SendPropertyChanging
				Me._SECCION = value
				Me.SendPropertyChanged("SECCION")
				Me.OnSECCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEXTO", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TEXTO() As String
		Get
			Return Me._TEXTO
		End Get
		Set
			If (String.Equals(Me._TEXTO, value) = false) Then
				Me.OnTEXTOChanging(value)
				Me.SendPropertyChanging
				Me._TEXTO = value
				Me.SendPropertyChanged("TEXTO")
				Me.OnTEXTOChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PLANTILLAANALITICAS")>  _
Partial Public Class PLANTILLAANALITICA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As String
	
	Private _DESCRIPCION As String
	
	Private _REFCONCEPTO As String
	
	Private _LPLANTILLAANALITICAS As EntitySet(Of LPLANTILLAANALITICAS)
	
	Private _CONCEPTOSFRA As EntityRef(Of CONCEPTOSFRA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As String)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnREFCONCEPTOChanging(value As String)
    End Sub
    Partial Private Sub OnREFCONCEPTOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LPLANTILLAANALITICAS = New EntitySet(Of LPLANTILLAANALITICAS)(AddressOf Me.attach_LPLANTILLAANALITICAS, AddressOf Me.detach_LPLANTILLAANALITICAS)
		Me._CONCEPTOSFRA = CType(Nothing, EntityRef(Of CONCEPTOSFRA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODIGO() As String
		Get
			Return Me._CODIGO
		End Get
		Set
			If (String.Equals(Me._CODIGO, value) = false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(90) NOT NULL", CanBeNull:=false)>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFCONCEPTO", DbType:="VarChar(10)")>  _
	Public Property REFCONCEPTO() As String
		Get
			Return Me._REFCONCEPTO
		End Get
		Set
			If (String.Equals(Me._REFCONCEPTO, value) = false) Then
				If Me._CONCEPTOSFRA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFCONCEPTOChanging(value)
				Me.SendPropertyChanging
				Me._REFCONCEPTO = value
				Me.SendPropertyChanged("REFCONCEPTO")
				Me.OnREFCONCEPTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PLANTILLAANALITICA_LPLANTILLAANALITICAS", Storage:="_LPLANTILLAANALITICAS", ThisKey:="CODIGO", OtherKey:="REFPLANTILLA")>  _
	Public Property LPLANTILLAANALITICAS() As EntitySet(Of LPLANTILLAANALITICAS)
		Get
			Return Me._LPLANTILLAANALITICAS
		End Get
		Set
			Me._LPLANTILLAANALITICAS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_PLANTILLAANALITICA", Storage:="_CONCEPTOSFRA", ThisKey:="REFCONCEPTO", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property CONCEPTOSFRA() As CONCEPTOSFRA
		Get
			Return Me._CONCEPTOSFRA.Entity
		End Get
		Set
			Dim previousValue As CONCEPTOSFRA = Me._CONCEPTOSFRA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONCEPTOSFRA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONCEPTOSFRA.Entity = Nothing
					previousValue.PLANTILLAANALITICAs.Remove(Me)
				End If
				Me._CONCEPTOSFRA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PLANTILLAANALITICAs.Add(Me)
					Me._REFCONCEPTO = value.CODIGO
				Else
					Me._REFCONCEPTO = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("CONCEPTOSFRA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LPLANTILLAANALITICAS(ByVal entity As LPLANTILLAANALITICAS)
		Me.SendPropertyChanging
		entity.PLANTILLAANALITICA = Me
	End Sub
	
	Private Sub detach_LPLANTILLAANALITICAS(ByVal entity As LPLANTILLAANALITICAS)
		Me.SendPropertyChanging
		entity.PLANTILLAANALITICA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PLANTILLA_HISTORIALES")>  _
Partial Public Class PLANTILLA_HISTORIALE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As String
	
	Private _MOTIVO As String
	
	Private _ANTECEDENTES As String
	
	Private _EXPLORACION As String
	
	Private _COMPLEMENTARIAS As String
	
	Private _JUICIO As String
	
	Private _TRATAMIENTO As String
	
	Private _HISTORIAL As String
	
	Private _COMENTARIOS As String
	
	Private _OTROS As String
	
	Private _DESCRIPCION As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As String)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnMOTIVOChanging(value As String)
    End Sub
    Partial Private Sub OnMOTIVOChanged()
    End Sub
    Partial Private Sub OnANTECEDENTESChanging(value As String)
    End Sub
    Partial Private Sub OnANTECEDENTESChanged()
    End Sub
    Partial Private Sub OnEXPLORACIONChanging(value As String)
    End Sub
    Partial Private Sub OnEXPLORACIONChanged()
    End Sub
    Partial Private Sub OnCOMPLEMENTARIASChanging(value As String)
    End Sub
    Partial Private Sub OnCOMPLEMENTARIASChanged()
    End Sub
    Partial Private Sub OnJUICIOChanging(value As String)
    End Sub
    Partial Private Sub OnJUICIOChanged()
    End Sub
    Partial Private Sub OnTRATAMIENTOChanging(value As String)
    End Sub
    Partial Private Sub OnTRATAMIENTOChanged()
    End Sub
    Partial Private Sub OnHISTORIALChanging(value As String)
    End Sub
    Partial Private Sub OnHISTORIALChanged()
    End Sub
    Partial Private Sub OnCOMENTARIOSChanging(value As String)
    End Sub
    Partial Private Sub OnCOMENTARIOSChanged()
    End Sub
    Partial Private Sub OnOTROSChanging(value As String)
    End Sub
    Partial Private Sub OnOTROSChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", DbType:="VarChar(12) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODIGO() As String
		Get
			Return Me._CODIGO
		End Get
		Set
			If (String.Equals(Me._CODIGO, value) = false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOTIVO", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MOTIVO() As String
		Get
			Return Me._MOTIVO
		End Get
		Set
			If (String.Equals(Me._MOTIVO, value) = false) Then
				Me.OnMOTIVOChanging(value)
				Me.SendPropertyChanging
				Me._MOTIVO = value
				Me.SendPropertyChanged("MOTIVO")
				Me.OnMOTIVOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ANTECEDENTES", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ANTECEDENTES() As String
		Get
			Return Me._ANTECEDENTES
		End Get
		Set
			If (String.Equals(Me._ANTECEDENTES, value) = false) Then
				Me.OnANTECEDENTESChanging(value)
				Me.SendPropertyChanging
				Me._ANTECEDENTES = value
				Me.SendPropertyChanged("ANTECEDENTES")
				Me.OnANTECEDENTESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXPLORACION", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EXPLORACION() As String
		Get
			Return Me._EXPLORACION
		End Get
		Set
			If (String.Equals(Me._EXPLORACION, value) = false) Then
				Me.OnEXPLORACIONChanging(value)
				Me.SendPropertyChanging
				Me._EXPLORACION = value
				Me.SendPropertyChanged("EXPLORACION")
				Me.OnEXPLORACIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMPLEMENTARIAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property COMPLEMENTARIAS() As String
		Get
			Return Me._COMPLEMENTARIAS
		End Get
		Set
			If (String.Equals(Me._COMPLEMENTARIAS, value) = false) Then
				Me.OnCOMPLEMENTARIASChanging(value)
				Me.SendPropertyChanging
				Me._COMPLEMENTARIAS = value
				Me.SendPropertyChanged("COMPLEMENTARIAS")
				Me.OnCOMPLEMENTARIASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JUICIO", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property JUICIO() As String
		Get
			Return Me._JUICIO
		End Get
		Set
			If (String.Equals(Me._JUICIO, value) = false) Then
				Me.OnJUICIOChanging(value)
				Me.SendPropertyChanging
				Me._JUICIO = value
				Me.SendPropertyChanged("JUICIO")
				Me.OnJUICIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRATAMIENTO", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRATAMIENTO() As String
		Get
			Return Me._TRATAMIENTO
		End Get
		Set
			If (String.Equals(Me._TRATAMIENTO, value) = false) Then
				Me.OnTRATAMIENTOChanging(value)
				Me.SendPropertyChanging
				Me._TRATAMIENTO = value
				Me.SendPropertyChanged("TRATAMIENTO")
				Me.OnTRATAMIENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HISTORIAL", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HISTORIAL() As String
		Get
			Return Me._HISTORIAL
		End Get
		Set
			If (String.Equals(Me._HISTORIAL, value) = false) Then
				Me.OnHISTORIALChanging(value)
				Me.SendPropertyChanging
				Me._HISTORIAL = value
				Me.SendPropertyChanged("HISTORIAL")
				Me.OnHISTORIALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMENTARIOS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property COMENTARIOS() As String
		Get
			Return Me._COMENTARIOS
		End Get
		Set
			If (String.Equals(Me._COMENTARIOS, value) = false) Then
				Me.OnCOMENTARIOSChanging(value)
				Me.SendPropertyChanging
				Me._COMENTARIOS = value
				Me.SendPropertyChanged("COMENTARIOS")
				Me.OnCOMENTARIOSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OTROS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OTROS() As String
		Get
			Return Me._OTROS
		End Get
		Set
			If (String.Equals(Me._OTROS, value) = false) Then
				Me.OnOTROSChanging(value)
				Me.SendPropertyChanging
				Me._OTROS = value
				Me.SendPropertyChanged("OTROS")
				Me.OnOTROSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DERIVACIONES_DESTINOS")>  _
Partial Public Class DERIVACIONES_DESTINO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NOMBRE As String
	
	Private _DIRECCION As String
	
	Private _POBLACION As String
	
	Private _PROVINCIA As String
	
	Private _CP As String
	
	Private _TLFNO1 As String
	
	Private _TLFNO2 As String
	
	Private _FAX As String
	
	Private _MAIL As String
	
	Private _WEB As String
	
	Private _PERSONACION As String
	
	Private _NOTAS As String
	
	Private _CIF As String
	
	Private _CODIGO As String
	
	Private _DERIVACIONES As EntitySet(Of DERIVACIONES)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREChanged()
    End Sub
    Partial Private Sub OnDIRECCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDIRECCIONChanged()
    End Sub
    Partial Private Sub OnPOBLACIONChanging(value As String)
    End Sub
    Partial Private Sub OnPOBLACIONChanged()
    End Sub
    Partial Private Sub OnPROVINCIAChanging(value As String)
    End Sub
    Partial Private Sub OnPROVINCIAChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnTLFNO1Changing(value As String)
    End Sub
    Partial Private Sub OnTLFNO1Changed()
    End Sub
    Partial Private Sub OnTLFNO2Changing(value As String)
    End Sub
    Partial Private Sub OnTLFNO2Changed()
    End Sub
    Partial Private Sub OnFAXChanging(value As String)
    End Sub
    Partial Private Sub OnFAXChanged()
    End Sub
    Partial Private Sub OnMAILChanging(value As String)
    End Sub
    Partial Private Sub OnMAILChanged()
    End Sub
    Partial Private Sub OnWEBChanging(value As String)
    End Sub
    Partial Private Sub OnWEBChanged()
    End Sub
    Partial Private Sub OnPERSONACIONChanging(value As String)
    End Sub
    Partial Private Sub OnPERSONACIONChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    Partial Private Sub OnCIFChanging(value As String)
    End Sub
    Partial Private Sub OnCIFChanged()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As String)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DERIVACIONES = New EntitySet(Of DERIVACIONES)(AddressOf Me.attach_DERIVACIONES, AddressOf Me.detach_DERIVACIONES)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", DbType:="VarChar(40)")>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me.OnNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRE = value
				Me.SendPropertyChanged("NOMBRE")
				Me.OnNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIRECCION", DbType:="VarChar(150)")>  _
	Public Property DIRECCION() As String
		Get
			Return Me._DIRECCION
		End Get
		Set
			If (String.Equals(Me._DIRECCION, value) = false) Then
				Me.OnDIRECCIONChanging(value)
				Me.SendPropertyChanging
				Me._DIRECCION = value
				Me.SendPropertyChanged("DIRECCION")
				Me.OnDIRECCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POBLACION", DbType:="VarChar(20)")>  _
	Public Property POBLACION() As String
		Get
			Return Me._POBLACION
		End Get
		Set
			If (String.Equals(Me._POBLACION, value) = false) Then
				Me.OnPOBLACIONChanging(value)
				Me.SendPropertyChanging
				Me._POBLACION = value
				Me.SendPropertyChanged("POBLACION")
				Me.OnPOBLACIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCIA", DbType:="VarChar(20)")>  _
	Public Property PROVINCIA() As String
		Get
			Return Me._PROVINCIA
		End Get
		Set
			If (String.Equals(Me._PROVINCIA, value) = false) Then
				Me.OnPROVINCIAChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCIA = value
				Me.SendPropertyChanged("PROVINCIA")
				Me.OnPROVINCIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="VarChar(5)")>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLFNO1", DbType:="VarChar(10)")>  _
	Public Property TLFNO1() As String
		Get
			Return Me._TLFNO1
		End Get
		Set
			If (String.Equals(Me._TLFNO1, value) = false) Then
				Me.OnTLFNO1Changing(value)
				Me.SendPropertyChanging
				Me._TLFNO1 = value
				Me.SendPropertyChanged("TLFNO1")
				Me.OnTLFNO1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLFNO2", DbType:="VarChar(10)")>  _
	Public Property TLFNO2() As String
		Get
			Return Me._TLFNO2
		End Get
		Set
			If (String.Equals(Me._TLFNO2, value) = false) Then
				Me.OnTLFNO2Changing(value)
				Me.SendPropertyChanging
				Me._TLFNO2 = value
				Me.SendPropertyChanged("TLFNO2")
				Me.OnTLFNO2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAX", DbType:="VarChar(10)")>  _
	Public Property FAX() As String
		Get
			Return Me._FAX
		End Get
		Set
			If (String.Equals(Me._FAX, value) = false) Then
				Me.OnFAXChanging(value)
				Me.SendPropertyChanging
				Me._FAX = value
				Me.SendPropertyChanged("FAX")
				Me.OnFAXChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAIL", DbType:="VarChar(40)")>  _
	Public Property MAIL() As String
		Get
			Return Me._MAIL
		End Get
		Set
			If (String.Equals(Me._MAIL, value) = false) Then
				Me.OnMAILChanging(value)
				Me.SendPropertyChanging
				Me._MAIL = value
				Me.SendPropertyChanged("MAIL")
				Me.OnMAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WEB", DbType:="VarChar(40)")>  _
	Public Property WEB() As String
		Get
			Return Me._WEB
		End Get
		Set
			If (String.Equals(Me._WEB, value) = false) Then
				Me.OnWEBChanging(value)
				Me.SendPropertyChanging
				Me._WEB = value
				Me.SendPropertyChanged("WEB")
				Me.OnWEBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERSONACION", DbType:="VarChar(40)")>  _
	Public Property PERSONACION() As String
		Get
			Return Me._PERSONACION
		End Get
		Set
			If (String.Equals(Me._PERSONACION, value) = false) Then
				Me.OnPERSONACIONChanging(value)
				Me.SendPropertyChanging
				Me._PERSONACION = value
				Me.SendPropertyChanged("PERSONACION")
				Me.OnPERSONACIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIF", DbType:="VarChar(10)")>  _
	Public Property CIF() As String
		Get
			Return Me._CIF
		End Get
		Set
			If (String.Equals(Me._CIF, value) = false) Then
				Me.OnCIFChanging(value)
				Me.SendPropertyChanging
				Me._CIF = value
				Me.SendPropertyChanged("CIF")
				Me.OnCIFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", DbType:="VarChar(12) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODIGO() As String
		Get
			Return Me._CODIGO
		End Get
		Set
			If (String.Equals(Me._CODIGO, value) = false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DERIVACIONES_DESTINO_DERIVACIONES", Storage:="_DERIVACIONES", ThisKey:="CODIGO", OtherKey:="REFDESTINO")>  _
	Public Property DERIVACIONES() As EntitySet(Of DERIVACIONES)
		Get
			Return Me._DERIVACIONES
		End Get
		Set
			Me._DERIVACIONES.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DERIVACIONES(ByVal entity As DERIVACIONES)
		Me.SendPropertyChanging
		entity.DERIVACIONES_DESTINO = Me
	End Sub
	
	Private Sub detach_DERIVACIONES(ByVal entity As DERIVACIONES)
		Me.SendPropertyChanging
		entity.DERIVACIONES_DESTINO = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ARTICULOS")>  _
Partial Public Class ARTICULO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CARTICULO As Integer
	
	Private _DESCRIPCION As String
	
	Private _REFPROVEEDOR As System.Nullable(Of Integer)
	
	Private _STOCK As System.Nullable(Of Integer)
	
	Private _STOCKMIN As System.Nullable(Of Integer)
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _NOTAS As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCARTICULOChanging(value As Integer)
    End Sub
    Partial Private Sub OnCARTICULOChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnREFPROVEEDORChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPROVEEDORChanged()
    End Sub
    Partial Private Sub OnSTOCKChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSTOCKChanged()
    End Sub
    Partial Private Sub OnSTOCKMINChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSTOCKMINChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CARTICULO", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CARTICULO() As Integer
		Get
			Return Me._CARTICULO
		End Get
		Set
			If ((Me._CARTICULO = value)  _
						= false) Then
				Me.OnCARTICULOChanging(value)
				Me.SendPropertyChanging
				Me._CARTICULO = value
				Me.SendPropertyChanged("CARTICULO")
				Me.OnCARTICULOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(40)")>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPROVEEDOR", DbType:="Int")>  _
	Public Property REFPROVEEDOR() As System.Nullable(Of Integer)
		Get
			Return Me._REFPROVEEDOR
		End Get
		Set
			If (Me._REFPROVEEDOR.Equals(value) = false) Then
				Me.OnREFPROVEEDORChanging(value)
				Me.SendPropertyChanging
				Me._REFPROVEEDOR = value
				Me.SendPropertyChanged("REFPROVEEDOR")
				Me.OnREFPROVEEDORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STOCK", DbType:="Int")>  _
	Public Property STOCK() As System.Nullable(Of Integer)
		Get
			Return Me._STOCK
		End Get
		Set
			If (Me._STOCK.Equals(value) = false) Then
				Me.OnSTOCKChanging(value)
				Me.SendPropertyChanging
				Me._STOCK = value
				Me.SendPropertyChanged("STOCK")
				Me.OnSTOCKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STOCKMIN", DbType:="Int")>  _
	Public Property STOCKMIN() As System.Nullable(Of Integer)
		Get
			Return Me._STOCKMIN
		End Get
		Set
			If (Me._STOCKMIN.Equals(value) = false) Then
				Me.OnSTOCKMINChanging(value)
				Me.SendPropertyChanging
				Me._STOCKMIN = value
				Me.SendPropertyChanged("STOCKMIN")
				Me.OnSTOCKMINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime")>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_Partes")>  _
Partial Public Class N_Parte
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte As Long
	
	Private _ID_Proceso As System.Nullable(Of Long)
	
	Private _ID_Paciente As System.Nullable(Of Integer)
	
	Private _E_Tipo As System.Nullable(Of Integer)
	
	Private _FechaBaja As System.Nullable(Of Date)
	
	Private _FechaAlta As System.Nullable(Of Date)
	
	Private _ID_ParteOrigen As System.Nullable(Of Long)
	
	Private _Alta_Descripcion_Resultado_Reconocimiento As String
	
	Private _Alta_E_Causa_de_Alta As System.Nullable(Of Integer)
	
	Private _FechaAT As System.Nullable(Of Date)
	
	Private _E_Regimen As System.Nullable(Of Integer)
	
	Private _E_Situacion As System.Nullable(Of Integer)
	
	Private _Num_Tarjeta_sanitaria As String
	
	Private _Num_Afiliacion_Seg_Social As String
	
	Private _NombreCompletoPaciente As String
	
	Private _DomicilioPaciente As String
	
	Private _LocalidadPaciente As String
	
	Private _ProvinciaPaciente As String
	
	Private _Codigo_PostalPaciente As String
	
	Private _TelefonoPaciente As String
	
	Private _Puesto_de_trabajoPaciente As String
	
	Private _ID_Empresa As System.Nullable(Of Integer)
	
	Private _NombreEmpresa As String
	
	Private _DomicilioEmpresa As String
	
	Private _LocalidadEmpresa As String
	
	Private _ProvinciaEmpresa As String
	
	Private _Codigo_Postal_Empresa As String
	
	Private _Actividad_empresa As String
	
	Private _Código_Nacional_Actividad_Económica_CNAE As String
	
	Private _Entidad_Pago_IT_CP As System.Nullable(Of Integer)
	
	Private _DescripcionLimitacion As String
	
	Private _ID_Diagnostico As System.Nullable(Of Integer)
	
	Private _Descripcion_Diagnostico As String
	
	Private _Duracion_probable_baja_dias As System.Nullable(Of Integer)
	
	Private _Duracion_probable_baja_meses As System.Nullable(Of Integer)
	
	Private _Duracion_estandar_fecha_inicio As System.Nullable(Of Date)
	
	Private _Duracion_estandar_fecha_final As System.Nullable(Of Date)
	
	Private _E_Caracter As System.Nullable(Of Integer)
	
	Private _Recaida As System.Nullable(Of Boolean)
	
	Private _E_Causa_de_baja As System.Nullable(Of Integer)
	
	Private _ID_Medico As System.Nullable(Of Integer)
	
	Private _NombreMedico As String
	
	Private _No_de_ColegiadoMedico As String
	
	Private _N_Partes As EntitySet(Of N_Parte)
	
	Private _EMPRESA As EntityRef(Of EMPRESA)
	
	Private _N_Parte As EntityRef(Of N_Parte)
	
	Private _DIAGNOSTICO As EntityRef(Of DIAGNOSTICO)
	
	Private _MEDICO As EntityRef(Of MEDICO)
	
	Private _N_Proceso As EntityRef(Of N_Proceso)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Long)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnID_ProcesoChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnID_ProcesoChanged()
    End Sub
    Partial Private Sub OnID_PacienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PacienteChanged()
    End Sub
    Partial Private Sub OnE_TipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnE_TipoChanged()
    End Sub
    Partial Private Sub OnFechaBajaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaBajaChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnID_ParteOrigenChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnID_ParteOrigenChanged()
    End Sub
    Partial Private Sub OnAlta_Descripcion_Resultado_ReconocimientoChanging(value As String)
    End Sub
    Partial Private Sub OnAlta_Descripcion_Resultado_ReconocimientoChanged()
    End Sub
    Partial Private Sub OnAlta_E_Causa_de_AltaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAlta_E_Causa_de_AltaChanged()
    End Sub
    Partial Private Sub OnFechaATChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaATChanged()
    End Sub
    Partial Private Sub OnE_RegimenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnE_RegimenChanged()
    End Sub
    Partial Private Sub OnE_SituacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnE_SituacionChanged()
    End Sub
    Partial Private Sub OnNum_Tarjeta_sanitariaChanging(value As String)
    End Sub
    Partial Private Sub OnNum_Tarjeta_sanitariaChanged()
    End Sub
    Partial Private Sub OnNum_Afiliacion_Seg_SocialChanging(value As String)
    End Sub
    Partial Private Sub OnNum_Afiliacion_Seg_SocialChanged()
    End Sub
    Partial Private Sub OnNombreCompletoPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnNombreCompletoPacienteChanged()
    End Sub
    Partial Private Sub OnDomicilioPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnDomicilioPacienteChanged()
    End Sub
    Partial Private Sub OnLocalidadPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnLocalidadPacienteChanged()
    End Sub
    Partial Private Sub OnProvinciaPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaPacienteChanged()
    End Sub
    Partial Private Sub OnCodigo_PostalPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnCodigo_PostalPacienteChanged()
    End Sub
    Partial Private Sub OnTelefonoPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoPacienteChanged()
    End Sub
    Partial Private Sub OnPuesto_de_trabajoPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnPuesto_de_trabajoPacienteChanged()
    End Sub
    Partial Private Sub OnID_EmpresaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_EmpresaChanged()
    End Sub
    Partial Private Sub OnNombreEmpresaChanging(value As String)
    End Sub
    Partial Private Sub OnNombreEmpresaChanged()
    End Sub
    Partial Private Sub OnDomicilioEmpresaChanging(value As String)
    End Sub
    Partial Private Sub OnDomicilioEmpresaChanged()
    End Sub
    Partial Private Sub OnLocalidadEmpresaChanging(value As String)
    End Sub
    Partial Private Sub OnLocalidadEmpresaChanged()
    End Sub
    Partial Private Sub OnProvinciaEmpresaChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaEmpresaChanged()
    End Sub
    Partial Private Sub OnCodigo_Postal_EmpresaChanging(value As String)
    End Sub
    Partial Private Sub OnCodigo_Postal_EmpresaChanged()
    End Sub
    Partial Private Sub OnActividad_empresaChanging(value As String)
    End Sub
    Partial Private Sub OnActividad_empresaChanged()
    End Sub
    Partial Private Sub OnCódigo_Nacional_Actividad_Económica_CNAEChanging(value As String)
    End Sub
    Partial Private Sub OnCódigo_Nacional_Actividad_Económica_CNAEChanged()
    End Sub
    Partial Private Sub OnEntidad_Pago_IT_CPChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEntidad_Pago_IT_CPChanged()
    End Sub
    Partial Private Sub OnDescripcionLimitacionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionLimitacionChanged()
    End Sub
    Partial Private Sub OnID_DiagnosticoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_DiagnosticoChanged()
    End Sub
    Partial Private Sub OnDescripcion_DiagnosticoChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_DiagnosticoChanged()
    End Sub
    Partial Private Sub OnDuracion_probable_baja_diasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDuracion_probable_baja_diasChanged()
    End Sub
    Partial Private Sub OnDuracion_probable_baja_mesesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDuracion_probable_baja_mesesChanged()
    End Sub
    Partial Private Sub OnDuracion_estandar_fecha_inicioChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDuracion_estandar_fecha_inicioChanged()
    End Sub
    Partial Private Sub OnDuracion_estandar_fecha_finalChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDuracion_estandar_fecha_finalChanged()
    End Sub
    Partial Private Sub OnE_CaracterChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnE_CaracterChanged()
    End Sub
    Partial Private Sub OnRecaidaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRecaidaChanged()
    End Sub
    Partial Private Sub OnE_Causa_de_bajaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnE_Causa_de_bajaChanged()
    End Sub
    Partial Private Sub OnID_MedicoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_MedicoChanged()
    End Sub
    Partial Private Sub OnNombreMedicoChanging(value As String)
    End Sub
    Partial Private Sub OnNombreMedicoChanged()
    End Sub
    Partial Private Sub OnNo_de_ColegiadoMedicoChanging(value As String)
    End Sub
    Partial Private Sub OnNo_de_ColegiadoMedicoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_Partes = New EntitySet(Of N_Parte)(AddressOf Me.attach_N_Partes, AddressOf Me.detach_N_Partes)
		Me._EMPRESA = CType(Nothing, EntityRef(Of EMPRESA))
		Me._N_Parte = CType(Nothing, EntityRef(Of N_Parte))
		Me._DIAGNOSTICO = CType(Nothing, EntityRef(Of DIAGNOSTICO))
		Me._MEDICO = CType(Nothing, EntityRef(Of MEDICO))
		Me._N_Proceso = CType(Nothing, EntityRef(Of N_Proceso))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Parte() As Long
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proceso", DbType:="BigInt")>  _
	Public Property ID_Proceso() As System.Nullable(Of Long)
		Get
			Return Me._ID_Proceso
		End Get
		Set
			If (Me._ID_Proceso.Equals(value) = false) Then
				If Me._N_Proceso.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProcesoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proceso = value
				Me.SendPropertyChanged("ID_Proceso")
				Me.OnID_ProcesoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Paciente", DbType:="Int")>  _
	Public Property ID_Paciente() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Paciente
		End Get
		Set
			If (Me._ID_Paciente.Equals(value) = false) Then
				Me.OnID_PacienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Paciente = value
				Me.SendPropertyChanged("ID_Paciente")
				Me.OnID_PacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_E_Tipo", DbType:="Int")>  _
	Public Property E_Tipo() As System.Nullable(Of Integer)
		Get
			Return Me._E_Tipo
		End Get
		Set
			If (Me._E_Tipo.Equals(value) = false) Then
				Me.OnE_TipoChanging(value)
				Me.SendPropertyChanging
				Me._E_Tipo = value
				Me.SendPropertyChanged("E_Tipo")
				Me.OnE_TipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaBaja", DbType:="DateTime")>  _
	Public Property FechaBaja() As System.Nullable(Of Date)
		Get
			Return Me._FechaBaja
		End Get
		Set
			If (Me._FechaBaja.Equals(value) = false) Then
				Me.OnFechaBajaChanging(value)
				Me.SendPropertyChanging
				Me._FechaBaja = value
				Me.SendPropertyChanged("FechaBaja")
				Me.OnFechaBajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="DateTime")>  _
	Public Property FechaAlta() As System.Nullable(Of Date)
		Get
			Return Me._FechaAlta
		End Get
		Set
			If (Me._FechaAlta.Equals(value) = false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ParteOrigen", DbType:="BigInt")>  _
	Public Property ID_ParteOrigen() As System.Nullable(Of Long)
		Get
			Return Me._ID_ParteOrigen
		End Get
		Set
			If (Me._ID_ParteOrigen.Equals(value) = false) Then
				If Me._N_Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteOrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_ParteOrigen = value
				Me.SendPropertyChanged("ID_ParteOrigen")
				Me.OnID_ParteOrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Alta_Descripcion_Resultado_Reconocimiento", DbType:="NVarChar(MAX)")>  _
	Public Property Alta_Descripcion_Resultado_Reconocimiento() As String
		Get
			Return Me._Alta_Descripcion_Resultado_Reconocimiento
		End Get
		Set
			If (String.Equals(Me._Alta_Descripcion_Resultado_Reconocimiento, value) = false) Then
				Me.OnAlta_Descripcion_Resultado_ReconocimientoChanging(value)
				Me.SendPropertyChanging
				Me._Alta_Descripcion_Resultado_Reconocimiento = value
				Me.SendPropertyChanged("Alta_Descripcion_Resultado_Reconocimiento")
				Me.OnAlta_Descripcion_Resultado_ReconocimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Alta_E_Causa_de_Alta", DbType:="Int")>  _
	Public Property Alta_E_Causa_de_Alta() As System.Nullable(Of Integer)
		Get
			Return Me._Alta_E_Causa_de_Alta
		End Get
		Set
			If (Me._Alta_E_Causa_de_Alta.Equals(value) = false) Then
				Me.OnAlta_E_Causa_de_AltaChanging(value)
				Me.SendPropertyChanging
				Me._Alta_E_Causa_de_Alta = value
				Me.SendPropertyChanged("Alta_E_Causa_de_Alta")
				Me.OnAlta_E_Causa_de_AltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAT", DbType:="DateTime")>  _
	Public Property FechaAT() As System.Nullable(Of Date)
		Get
			Return Me._FechaAT
		End Get
		Set
			If (Me._FechaAT.Equals(value) = false) Then
				Me.OnFechaATChanging(value)
				Me.SendPropertyChanging
				Me._FechaAT = value
				Me.SendPropertyChanged("FechaAT")
				Me.OnFechaATChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_E_Regimen", DbType:="Int")>  _
	Public Property E_Regimen() As System.Nullable(Of Integer)
		Get
			Return Me._E_Regimen
		End Get
		Set
			If (Me._E_Regimen.Equals(value) = false) Then
				Me.OnE_RegimenChanging(value)
				Me.SendPropertyChanging
				Me._E_Regimen = value
				Me.SendPropertyChanged("E_Regimen")
				Me.OnE_RegimenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_E_Situacion", DbType:="Int")>  _
	Public Property E_Situacion() As System.Nullable(Of Integer)
		Get
			Return Me._E_Situacion
		End Get
		Set
			If (Me._E_Situacion.Equals(value) = false) Then
				Me.OnE_SituacionChanging(value)
				Me.SendPropertyChanging
				Me._E_Situacion = value
				Me.SendPropertyChanged("E_Situacion")
				Me.OnE_SituacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Num_Tarjeta_sanitaria", DbType:="NVarChar(50)")>  _
	Public Property Num_Tarjeta_sanitaria() As String
		Get
			Return Me._Num_Tarjeta_sanitaria
		End Get
		Set
			If (String.Equals(Me._Num_Tarjeta_sanitaria, value) = false) Then
				Me.OnNum_Tarjeta_sanitariaChanging(value)
				Me.SendPropertyChanging
				Me._Num_Tarjeta_sanitaria = value
				Me.SendPropertyChanged("Num_Tarjeta_sanitaria")
				Me.OnNum_Tarjeta_sanitariaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Num_Afiliacion_Seg_Social", DbType:="NVarChar(50)")>  _
	Public Property Num_Afiliacion_Seg_Social() As String
		Get
			Return Me._Num_Afiliacion_Seg_Social
		End Get
		Set
			If (String.Equals(Me._Num_Afiliacion_Seg_Social, value) = false) Then
				Me.OnNum_Afiliacion_Seg_SocialChanging(value)
				Me.SendPropertyChanging
				Me._Num_Afiliacion_Seg_Social = value
				Me.SendPropertyChanged("Num_Afiliacion_Seg_Social")
				Me.OnNum_Afiliacion_Seg_SocialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreCompletoPaciente", DbType:="NVarChar(50)")>  _
	Public Property NombreCompletoPaciente() As String
		Get
			Return Me._NombreCompletoPaciente
		End Get
		Set
			If (String.Equals(Me._NombreCompletoPaciente, value) = false) Then
				Me.OnNombreCompletoPacienteChanging(value)
				Me.SendPropertyChanging
				Me._NombreCompletoPaciente = value
				Me.SendPropertyChanged("NombreCompletoPaciente")
				Me.OnNombreCompletoPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomicilioPaciente", DbType:="NVarChar(100)")>  _
	Public Property DomicilioPaciente() As String
		Get
			Return Me._DomicilioPaciente
		End Get
		Set
			If (String.Equals(Me._DomicilioPaciente, value) = false) Then
				Me.OnDomicilioPacienteChanging(value)
				Me.SendPropertyChanging
				Me._DomicilioPaciente = value
				Me.SendPropertyChanged("DomicilioPaciente")
				Me.OnDomicilioPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocalidadPaciente", DbType:="NVarChar(100)")>  _
	Public Property LocalidadPaciente() As String
		Get
			Return Me._LocalidadPaciente
		End Get
		Set
			If (String.Equals(Me._LocalidadPaciente, value) = false) Then
				Me.OnLocalidadPacienteChanging(value)
				Me.SendPropertyChanging
				Me._LocalidadPaciente = value
				Me.SendPropertyChanged("LocalidadPaciente")
				Me.OnLocalidadPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProvinciaPaciente", DbType:="NVarChar(50)")>  _
	Public Property ProvinciaPaciente() As String
		Get
			Return Me._ProvinciaPaciente
		End Get
		Set
			If (String.Equals(Me._ProvinciaPaciente, value) = false) Then
				Me.OnProvinciaPacienteChanging(value)
				Me.SendPropertyChanging
				Me._ProvinciaPaciente = value
				Me.SendPropertyChanged("ProvinciaPaciente")
				Me.OnProvinciaPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo_PostalPaciente", DbType:="NVarChar(50)")>  _
	Public Property Codigo_PostalPaciente() As String
		Get
			Return Me._Codigo_PostalPaciente
		End Get
		Set
			If (String.Equals(Me._Codigo_PostalPaciente, value) = false) Then
				Me.OnCodigo_PostalPacienteChanging(value)
				Me.SendPropertyChanging
				Me._Codigo_PostalPaciente = value
				Me.SendPropertyChanged("Codigo_PostalPaciente")
				Me.OnCodigo_PostalPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelefonoPaciente", DbType:="NVarChar(50)")>  _
	Public Property TelefonoPaciente() As String
		Get
			Return Me._TelefonoPaciente
		End Get
		Set
			If (String.Equals(Me._TelefonoPaciente, value) = false) Then
				Me.OnTelefonoPacienteChanging(value)
				Me.SendPropertyChanging
				Me._TelefonoPaciente = value
				Me.SendPropertyChanged("TelefonoPaciente")
				Me.OnTelefonoPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Puesto_de_trabajoPaciente", DbType:="NVarChar(MAX)")>  _
	Public Property Puesto_de_trabajoPaciente() As String
		Get
			Return Me._Puesto_de_trabajoPaciente
		End Get
		Set
			If (String.Equals(Me._Puesto_de_trabajoPaciente, value) = false) Then
				Me.OnPuesto_de_trabajoPacienteChanging(value)
				Me.SendPropertyChanging
				Me._Puesto_de_trabajoPaciente = value
				Me.SendPropertyChanged("Puesto_de_trabajoPaciente")
				Me.OnPuesto_de_trabajoPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa", DbType:="Int")>  _
	Public Property ID_Empresa() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Empresa
		End Get
		Set
			If (Me._ID_Empresa.Equals(value) = false) Then
				If Me._EMPRESA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa = value
				Me.SendPropertyChanged("ID_Empresa")
				Me.OnID_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreEmpresa", DbType:="NVarChar(50)")>  _
	Public Property NombreEmpresa() As String
		Get
			Return Me._NombreEmpresa
		End Get
		Set
			If (String.Equals(Me._NombreEmpresa, value) = false) Then
				Me.OnNombreEmpresaChanging(value)
				Me.SendPropertyChanging
				Me._NombreEmpresa = value
				Me.SendPropertyChanged("NombreEmpresa")
				Me.OnNombreEmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomicilioEmpresa", DbType:="NVarChar(50)")>  _
	Public Property DomicilioEmpresa() As String
		Get
			Return Me._DomicilioEmpresa
		End Get
		Set
			If (String.Equals(Me._DomicilioEmpresa, value) = false) Then
				Me.OnDomicilioEmpresaChanging(value)
				Me.SendPropertyChanging
				Me._DomicilioEmpresa = value
				Me.SendPropertyChanged("DomicilioEmpresa")
				Me.OnDomicilioEmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocalidadEmpresa", DbType:="NVarChar(50)")>  _
	Public Property LocalidadEmpresa() As String
		Get
			Return Me._LocalidadEmpresa
		End Get
		Set
			If (String.Equals(Me._LocalidadEmpresa, value) = false) Then
				Me.OnLocalidadEmpresaChanging(value)
				Me.SendPropertyChanging
				Me._LocalidadEmpresa = value
				Me.SendPropertyChanged("LocalidadEmpresa")
				Me.OnLocalidadEmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProvinciaEmpresa", DbType:="NVarChar(50)")>  _
	Public Property ProvinciaEmpresa() As String
		Get
			Return Me._ProvinciaEmpresa
		End Get
		Set
			If (String.Equals(Me._ProvinciaEmpresa, value) = false) Then
				Me.OnProvinciaEmpresaChanging(value)
				Me.SendPropertyChanging
				Me._ProvinciaEmpresa = value
				Me.SendPropertyChanged("ProvinciaEmpresa")
				Me.OnProvinciaEmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo_Postal_Empresa", DbType:="NVarChar(50)")>  _
	Public Property Codigo_Postal_Empresa() As String
		Get
			Return Me._Codigo_Postal_Empresa
		End Get
		Set
			If (String.Equals(Me._Codigo_Postal_Empresa, value) = false) Then
				Me.OnCodigo_Postal_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._Codigo_Postal_Empresa = value
				Me.SendPropertyChanged("Codigo_Postal_Empresa")
				Me.OnCodigo_Postal_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Actividad_empresa", DbType:="NVarChar(MAX)")>  _
	Public Property Actividad_empresa() As String
		Get
			Return Me._Actividad_empresa
		End Get
		Set
			If (String.Equals(Me._Actividad_empresa, value) = false) Then
				Me.OnActividad_empresaChanging(value)
				Me.SendPropertyChanging
				Me._Actividad_empresa = value
				Me.SendPropertyChanged("Actividad_empresa")
				Me.OnActividad_empresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Código_Nacional_Actividad_Económica_CNAE", DbType:="NVarChar(50)")>  _
	Public Property Código_Nacional_Actividad_Económica_CNAE() As String
		Get
			Return Me._Código_Nacional_Actividad_Económica_CNAE
		End Get
		Set
			If (String.Equals(Me._Código_Nacional_Actividad_Económica_CNAE, value) = false) Then
				Me.OnCódigo_Nacional_Actividad_Económica_CNAEChanging(value)
				Me.SendPropertyChanging
				Me._Código_Nacional_Actividad_Económica_CNAE = value
				Me.SendPropertyChanged("Código_Nacional_Actividad_Económica_CNAE")
				Me.OnCódigo_Nacional_Actividad_Económica_CNAEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Entidad_Pago_IT_CP", DbType:="Int")>  _
	Public Property Entidad_Pago_IT_CP() As System.Nullable(Of Integer)
		Get
			Return Me._Entidad_Pago_IT_CP
		End Get
		Set
			If (Me._Entidad_Pago_IT_CP.Equals(value) = false) Then
				Me.OnEntidad_Pago_IT_CPChanging(value)
				Me.SendPropertyChanging
				Me._Entidad_Pago_IT_CP = value
				Me.SendPropertyChanged("Entidad_Pago_IT_CP")
				Me.OnEntidad_Pago_IT_CPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionLimitacion", DbType:="NVarChar(MAX)")>  _
	Public Property DescripcionLimitacion() As String
		Get
			Return Me._DescripcionLimitacion
		End Get
		Set
			If (String.Equals(Me._DescripcionLimitacion, value) = false) Then
				Me.OnDescripcionLimitacionChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionLimitacion = value
				Me.SendPropertyChanged("DescripcionLimitacion")
				Me.OnDescripcionLimitacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Diagnostico", DbType:="Int")>  _
	Public Property ID_Diagnostico() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Diagnostico
		End Get
		Set
			If (Me._ID_Diagnostico.Equals(value) = false) Then
				If Me._DIAGNOSTICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_DiagnosticoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Diagnostico = value
				Me.SendPropertyChanged("ID_Diagnostico")
				Me.OnID_DiagnosticoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Diagnostico", DbType:="NVarChar(MAX)")>  _
	Public Property Descripcion_Diagnostico() As String
		Get
			Return Me._Descripcion_Diagnostico
		End Get
		Set
			If (String.Equals(Me._Descripcion_Diagnostico, value) = false) Then
				Me.OnDescripcion_DiagnosticoChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Diagnostico = value
				Me.SendPropertyChanged("Descripcion_Diagnostico")
				Me.OnDescripcion_DiagnosticoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duracion_probable_baja_dias", DbType:="Int")>  _
	Public Property Duracion_probable_baja_dias() As System.Nullable(Of Integer)
		Get
			Return Me._Duracion_probable_baja_dias
		End Get
		Set
			If (Me._Duracion_probable_baja_dias.Equals(value) = false) Then
				Me.OnDuracion_probable_baja_diasChanging(value)
				Me.SendPropertyChanging
				Me._Duracion_probable_baja_dias = value
				Me.SendPropertyChanged("Duracion_probable_baja_dias")
				Me.OnDuracion_probable_baja_diasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duracion_probable_baja_meses", DbType:="Int")>  _
	Public Property Duracion_probable_baja_meses() As System.Nullable(Of Integer)
		Get
			Return Me._Duracion_probable_baja_meses
		End Get
		Set
			If (Me._Duracion_probable_baja_meses.Equals(value) = false) Then
				Me.OnDuracion_probable_baja_mesesChanging(value)
				Me.SendPropertyChanging
				Me._Duracion_probable_baja_meses = value
				Me.SendPropertyChanged("Duracion_probable_baja_meses")
				Me.OnDuracion_probable_baja_mesesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duracion_estandar_fecha_inicio", DbType:="DateTime")>  _
	Public Property Duracion_estandar_fecha_inicio() As System.Nullable(Of Date)
		Get
			Return Me._Duracion_estandar_fecha_inicio
		End Get
		Set
			If (Me._Duracion_estandar_fecha_inicio.Equals(value) = false) Then
				Me.OnDuracion_estandar_fecha_inicioChanging(value)
				Me.SendPropertyChanging
				Me._Duracion_estandar_fecha_inicio = value
				Me.SendPropertyChanged("Duracion_estandar_fecha_inicio")
				Me.OnDuracion_estandar_fecha_inicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duracion_estandar_fecha_final", DbType:="DateTime")>  _
	Public Property Duracion_estandar_fecha_final() As System.Nullable(Of Date)
		Get
			Return Me._Duracion_estandar_fecha_final
		End Get
		Set
			If (Me._Duracion_estandar_fecha_final.Equals(value) = false) Then
				Me.OnDuracion_estandar_fecha_finalChanging(value)
				Me.SendPropertyChanging
				Me._Duracion_estandar_fecha_final = value
				Me.SendPropertyChanged("Duracion_estandar_fecha_final")
				Me.OnDuracion_estandar_fecha_finalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_E_Caracter", DbType:="Int")>  _
	Public Property E_Caracter() As System.Nullable(Of Integer)
		Get
			Return Me._E_Caracter
		End Get
		Set
			If (Me._E_Caracter.Equals(value) = false) Then
				Me.OnE_CaracterChanging(value)
				Me.SendPropertyChanging
				Me._E_Caracter = value
				Me.SendPropertyChanged("E_Caracter")
				Me.OnE_CaracterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Recaida", DbType:="Bit")>  _
	Public Property Recaida() As System.Nullable(Of Boolean)
		Get
			Return Me._Recaida
		End Get
		Set
			If (Me._Recaida.Equals(value) = false) Then
				Me.OnRecaidaChanging(value)
				Me.SendPropertyChanging
				Me._Recaida = value
				Me.SendPropertyChanged("Recaida")
				Me.OnRecaidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_E_Causa_de_baja", DbType:="Int")>  _
	Public Property E_Causa_de_baja() As System.Nullable(Of Integer)
		Get
			Return Me._E_Causa_de_baja
		End Get
		Set
			If (Me._E_Causa_de_baja.Equals(value) = false) Then
				Me.OnE_Causa_de_bajaChanging(value)
				Me.SendPropertyChanging
				Me._E_Causa_de_baja = value
				Me.SendPropertyChanged("E_Causa_de_baja")
				Me.OnE_Causa_de_bajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Medico", DbType:="Int")>  _
	Public Property ID_Medico() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Medico
		End Get
		Set
			If (Me._ID_Medico.Equals(value) = false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_MedicoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Medico = value
				Me.SendPropertyChanged("ID_Medico")
				Me.OnID_MedicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreMedico", DbType:="NVarChar(50)")>  _
	Public Property NombreMedico() As String
		Get
			Return Me._NombreMedico
		End Get
		Set
			If (String.Equals(Me._NombreMedico, value) = false) Then
				Me.OnNombreMedicoChanging(value)
				Me.SendPropertyChanging
				Me._NombreMedico = value
				Me.SendPropertyChanged("NombreMedico")
				Me.OnNombreMedicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No_de_ColegiadoMedico", DbType:="NVarChar(50)")>  _
	Public Property No_de_ColegiadoMedico() As String
		Get
			Return Me._No_de_ColegiadoMedico
		End Get
		Set
			If (String.Equals(Me._No_de_ColegiadoMedico, value) = false) Then
				Me.OnNo_de_ColegiadoMedicoChanging(value)
				Me.SendPropertyChanging
				Me._No_de_ColegiadoMedico = value
				Me.SendPropertyChanged("No_de_ColegiadoMedico")
				Me.OnNo_de_ColegiadoMedicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Parte_N_Parte", Storage:="_N_Partes", ThisKey:="ID_Parte", OtherKey:="ID_ParteOrigen")>  _
	Public Property N_Partes() As EntitySet(Of N_Parte)
		Get
			Return Me._N_Partes
		End Get
		Set
			Me._N_Partes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_N_Parte", Storage:="_EMPRESA", ThisKey:="ID_Empresa", OtherKey:="CEMPRESA", IsForeignKey:=true)>  _
	Public Property EMPRESA() As EMPRESA
		Get
			Return Me._EMPRESA.Entity
		End Get
		Set
			Dim previousValue As EMPRESA = Me._EMPRESA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EMPRESA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EMPRESA.Entity = Nothing
					previousValue.N_Partes.Remove(Me)
				End If
				Me._EMPRESA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Partes.Add(Me)
					Me._ID_Empresa = value.CEMPRESA
				Else
					Me._ID_Empresa = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("EMPRESA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Parte_N_Parte", Storage:="_N_Parte", ThisKey:="ID_ParteOrigen", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property N_Parte() As N_Parte
		Get
			Return Me._N_Parte.Entity
		End Get
		Set
			Dim previousValue As N_Parte = Me._N_Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_Parte.Entity = Nothing
					previousValue.N_Partes.Remove(Me)
				End If
				Me._N_Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Partes.Add(Me)
					Me._ID_ParteOrigen = value.ID_Parte
				Else
					Me._ID_ParteOrigen = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("N_Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DIAGNOSTICO_N_Parte", Storage:="_DIAGNOSTICO", ThisKey:="ID_Diagnostico", OtherKey:="IDDIAGNOSTICO", IsForeignKey:=true)>  _
	Public Property DIAGNOSTICO() As DIAGNOSTICO
		Get
			Return Me._DIAGNOSTICO.Entity
		End Get
		Set
			Dim previousValue As DIAGNOSTICO = Me._DIAGNOSTICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DIAGNOSTICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DIAGNOSTICO.Entity = Nothing
					previousValue.N_Partes.Remove(Me)
				End If
				Me._DIAGNOSTICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Partes.Add(Me)
					Me._ID_Diagnostico = value.IDDIAGNOSTICO
				Else
					Me._ID_Diagnostico = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("DIAGNOSTICO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_N_Parte", Storage:="_MEDICO", ThisKey:="ID_Medico", OtherKey:="CMEDICO", IsForeignKey:=true)>  _
	Public Property MEDICO() As MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.N_Partes.Remove(Me)
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Partes.Add(Me)
					Me._ID_Medico = value.CMEDICO
				Else
					Me._ID_Medico = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MEDICO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Proceso_N_Parte", Storage:="_N_Proceso", ThisKey:="ID_Proceso", OtherKey:="ID_Proceso", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property N_Proceso() As N_Proceso
		Get
			Return Me._N_Proceso.Entity
		End Get
		Set
			Dim previousValue As N_Proceso = Me._N_Proceso.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_Proceso.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_Proceso.Entity = Nothing
					previousValue.N_Partes.Remove(Me)
				End If
				Me._N_Proceso.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Partes.Add(Me)
					Me._ID_Proceso = value.ID_Proceso
				Else
					Me._ID_Proceso = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("N_Proceso")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_N_Partes(ByVal entity As N_Parte)
		Me.SendPropertyChanging
		entity.N_Parte = Me
	End Sub
	
	Private Sub detach_N_Partes(ByVal entity As N_Parte)
		Me.SendPropertyChanging
		entity.N_Parte = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DIAGNOSTICOS")>  _
Partial Public Class DIAGNOSTICO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDDIAGNOSTICO As Integer
	
	Private _DIAGNOSTICO As String
	
	Private _OBSERVACIONES As String
	
	Private _NIVEL As String
	
	Private _SUBNIVEL As String
	
	Private _CIE As String
	
	Private _FAVORITO As String
	
	Private _CIE10 As String
	
	Private _N_Partes As EntitySet(Of N_Parte)
	
	Private _HistorialesDiagnosticos As EntitySet(Of HistorialesDiagnostico)
	
	Private _AntecedentesDiagnosticos As EntitySet(Of AntecedentesDiagnostico)
	
	Private _RECETAs As EntitySet(Of RECETA)
	
	Private _N_Partes_Asistencias As EntitySet(Of N_Partes_Asistencia)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDDIAGNOSTICOChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDDIAGNOSTICOChanged()
    End Sub
    Partial Private Sub OnDIAGNOSTICOChanging(value As String)
    End Sub
    Partial Private Sub OnDIAGNOSTICOChanged()
    End Sub
    Partial Private Sub OnOBSERVACIONESChanging(value As String)
    End Sub
    Partial Private Sub OnOBSERVACIONESChanged()
    End Sub
    Partial Private Sub OnNIVELChanging(value As String)
    End Sub
    Partial Private Sub OnNIVELChanged()
    End Sub
    Partial Private Sub OnSUBNIVELChanging(value As String)
    End Sub
    Partial Private Sub OnSUBNIVELChanged()
    End Sub
    Partial Private Sub OnCIEChanging(value As String)
    End Sub
    Partial Private Sub OnCIEChanged()
    End Sub
    Partial Private Sub OnFAVORITOChanging(value As String)
    End Sub
    Partial Private Sub OnFAVORITOChanged()
    End Sub
    Partial Private Sub OnCIE10Changing(value As String)
    End Sub
    Partial Private Sub OnCIE10Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_Partes = New EntitySet(Of N_Parte)(AddressOf Me.attach_N_Partes, AddressOf Me.detach_N_Partes)
		Me._HistorialesDiagnosticos = New EntitySet(Of HistorialesDiagnostico)(AddressOf Me.attach_HistorialesDiagnosticos, AddressOf Me.detach_HistorialesDiagnosticos)
		Me._AntecedentesDiagnosticos = New EntitySet(Of AntecedentesDiagnostico)(AddressOf Me.attach_AntecedentesDiagnosticos, AddressOf Me.detach_AntecedentesDiagnosticos)
		Me._RECETAs = New EntitySet(Of RECETA)(AddressOf Me.attach_RECETAs, AddressOf Me.detach_RECETAs)
		Me._N_Partes_Asistencias = New EntitySet(Of N_Partes_Asistencia)(AddressOf Me.attach_N_Partes_Asistencias, AddressOf Me.detach_N_Partes_Asistencias)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDDIAGNOSTICO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDDIAGNOSTICO() As Integer
		Get
			Return Me._IDDIAGNOSTICO
		End Get
		Set
			If ((Me._IDDIAGNOSTICO = value)  _
						= false) Then
				Me.OnIDDIAGNOSTICOChanging(value)
				Me.SendPropertyChanging
				Me._IDDIAGNOSTICO = value
				Me.SendPropertyChanged("IDDIAGNOSTICO")
				Me.OnIDDIAGNOSTICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIAGNOSTICO", DbType:="VarChar(70)")>  _
	Public Property DIAGNOSTICO() As String
		Get
			Return Me._DIAGNOSTICO
		End Get
		Set
			If (String.Equals(Me._DIAGNOSTICO, value) = false) Then
				Me.OnDIAGNOSTICOChanging(value)
				Me.SendPropertyChanging
				Me._DIAGNOSTICO = value
				Me.SendPropertyChanged("DIAGNOSTICO")
				Me.OnDIAGNOSTICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OBSERVACIONES", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OBSERVACIONES() As String
		Get
			Return Me._OBSERVACIONES
		End Get
		Set
			If (String.Equals(Me._OBSERVACIONES, value) = false) Then
				Me.OnOBSERVACIONESChanging(value)
				Me.SendPropertyChanging
				Me._OBSERVACIONES = value
				Me.SendPropertyChanged("OBSERVACIONES")
				Me.OnOBSERVACIONESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NIVEL", DbType:="VarChar(6) NOT NULL", CanBeNull:=false)>  _
	Public Property NIVEL() As String
		Get
			Return Me._NIVEL
		End Get
		Set
			If (String.Equals(Me._NIVEL, value) = false) Then
				Me.OnNIVELChanging(value)
				Me.SendPropertyChanging
				Me._NIVEL = value
				Me.SendPropertyChanged("NIVEL")
				Me.OnNIVELChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SUBNIVEL", DbType:="VarChar(6) NOT NULL", CanBeNull:=false)>  _
	Public Property SUBNIVEL() As String
		Get
			Return Me._SUBNIVEL
		End Get
		Set
			If (String.Equals(Me._SUBNIVEL, value) = false) Then
				Me.OnSUBNIVELChanging(value)
				Me.SendPropertyChanging
				Me._SUBNIVEL = value
				Me.SendPropertyChanged("SUBNIVEL")
				Me.OnSUBNIVELChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIE", DbType:="VarChar(13)")>  _
	Public Property CIE() As String
		Get
			Return Me._CIE
		End Get
		Set
			If (String.Equals(Me._CIE, value) = false) Then
				Me.OnCIEChanging(value)
				Me.SendPropertyChanging
				Me._CIE = value
				Me.SendPropertyChanged("CIE")
				Me.OnCIEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAVORITO", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property FAVORITO() As String
		Get
			Return Me._FAVORITO
		End Get
		Set
			If (String.Equals(Me._FAVORITO, value) = false) Then
				Me.OnFAVORITOChanging(value)
				Me.SendPropertyChanging
				Me._FAVORITO = value
				Me.SendPropertyChanged("FAVORITO")
				Me.OnFAVORITOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIE10", DbType:="VarChar(12)")>  _
	Public Property CIE10() As String
		Get
			Return Me._CIE10
		End Get
		Set
			If (String.Equals(Me._CIE10, value) = false) Then
				Me.OnCIE10Changing(value)
				Me.SendPropertyChanging
				Me._CIE10 = value
				Me.SendPropertyChanged("CIE10")
				Me.OnCIE10Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DIAGNOSTICO_N_Parte", Storage:="_N_Partes", ThisKey:="IDDIAGNOSTICO", OtherKey:="ID_Diagnostico")>  _
	Public Property N_Partes() As EntitySet(Of N_Parte)
		Get
			Return Me._N_Partes
		End Get
		Set
			Me._N_Partes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DIAGNOSTICO_HistorialesDiagnostico", Storage:="_HistorialesDiagnosticos", ThisKey:="IDDIAGNOSTICO", OtherKey:="IdDiagnostico")>  _
	Public Property HistorialesDiagnosticos() As EntitySet(Of HistorialesDiagnostico)
		Get
			Return Me._HistorialesDiagnosticos
		End Get
		Set
			Me._HistorialesDiagnosticos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DIAGNOSTICO_AntecedentesDiagnostico", Storage:="_AntecedentesDiagnosticos", ThisKey:="IDDIAGNOSTICO", OtherKey:="IDDIAGNOSTICO")>  _
	Public Property AntecedentesDiagnosticos() As EntitySet(Of AntecedentesDiagnostico)
		Get
			Return Me._AntecedentesDiagnosticos
		End Get
		Set
			Me._AntecedentesDiagnosticos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DIAGNOSTICO_RECETA", Storage:="_RECETAs", ThisKey:="IDDIAGNOSTICO", OtherKey:="REFDIAGNOSTICO")>  _
	Public Property RECETAs() As EntitySet(Of RECETA)
		Get
			Return Me._RECETAs
		End Get
		Set
			Me._RECETAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DIAGNOSTICO_N_Partes_Asistencia", Storage:="_N_Partes_Asistencias", ThisKey:="IDDIAGNOSTICO", OtherKey:="ID_Diagnostico")>  _
	Public Property N_Partes_Asistencias() As EntitySet(Of N_Partes_Asistencia)
		Get
			Return Me._N_Partes_Asistencias
		End Get
		Set
			Me._N_Partes_Asistencias.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_N_Partes(ByVal entity As N_Parte)
		Me.SendPropertyChanging
		entity.DIAGNOSTICO = Me
	End Sub
	
	Private Sub detach_N_Partes(ByVal entity As N_Parte)
		Me.SendPropertyChanging
		entity.DIAGNOSTICO = Nothing
	End Sub
	
	Private Sub attach_HistorialesDiagnosticos(ByVal entity As HistorialesDiagnostico)
		Me.SendPropertyChanging
		entity.DIAGNOSTICO1 = Me
	End Sub
	
	Private Sub detach_HistorialesDiagnosticos(ByVal entity As HistorialesDiagnostico)
		Me.SendPropertyChanging
		entity.DIAGNOSTICO1 = Nothing
	End Sub
	
	Private Sub attach_AntecedentesDiagnosticos(ByVal entity As AntecedentesDiagnostico)
		Me.SendPropertyChanging
		entity.DIAGNOSTICO1 = Me
	End Sub
	
	Private Sub detach_AntecedentesDiagnosticos(ByVal entity As AntecedentesDiagnostico)
		Me.SendPropertyChanging
		entity.DIAGNOSTICO1 = Nothing
	End Sub
	
	Private Sub attach_RECETAs(ByVal entity As RECETA)
		Me.SendPropertyChanging
		entity.DIAGNOSTICO = Me
	End Sub
	
	Private Sub detach_RECETAs(ByVal entity As RECETA)
		Me.SendPropertyChanging
		entity.DIAGNOSTICO = Nothing
	End Sub
	
	Private Sub attach_N_Partes_Asistencias(ByVal entity As N_Partes_Asistencia)
		Me.SendPropertyChanging
		entity.DIAGNOSTICO = Me
	End Sub
	
	Private Sub detach_N_Partes_Asistencias(ByVal entity As N_Partes_Asistencia)
		Me.SendPropertyChanging
		entity.DIAGNOSTICO = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HistorialesDiagnosticos")>  _
Partial Public Class HistorialesDiagnostico
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdLineaDiagnostico As Integer
	
	Private _CHistorial As Integer
	
	Private _IdDiagnostico As Integer
	
	Private _CIE10 As String
	
	Private _OBSERVACIONES As String
	
	Private _DIAGNOSTICO As String
	
	Private _DIAGNOSTICO1 As EntityRef(Of DIAGNOSTICO)
	
	Private _HISTORIALE As EntityRef(Of HISTORIALE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdLineaDiagnosticoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdLineaDiagnosticoChanged()
    End Sub
    Partial Private Sub OnCHistorialChanging(value As Integer)
    End Sub
    Partial Private Sub OnCHistorialChanged()
    End Sub
    Partial Private Sub OnIdDiagnosticoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdDiagnosticoChanged()
    End Sub
    Partial Private Sub OnCIE10Changing(value As String)
    End Sub
    Partial Private Sub OnCIE10Changed()
    End Sub
    Partial Private Sub OnOBSERVACIONESChanging(value As String)
    End Sub
    Partial Private Sub OnOBSERVACIONESChanged()
    End Sub
    Partial Private Sub OnDIAGNOSTICOChanging(value As String)
    End Sub
    Partial Private Sub OnDIAGNOSTICOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DIAGNOSTICO1 = CType(Nothing, EntityRef(Of DIAGNOSTICO))
		Me._HISTORIALE = CType(Nothing, EntityRef(Of HISTORIALE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdLineaDiagnostico", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdLineaDiagnostico() As Integer
		Get
			Return Me._IdLineaDiagnostico
		End Get
		Set
			If ((Me._IdLineaDiagnostico = value)  _
						= false) Then
				Me.OnIdLineaDiagnosticoChanging(value)
				Me.SendPropertyChanging
				Me._IdLineaDiagnostico = value
				Me.SendPropertyChanged("IdLineaDiagnostico")
				Me.OnIdLineaDiagnosticoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CHistorial", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CHistorial() As Integer
		Get
			Return Me._CHistorial
		End Get
		Set
			If ((Me._CHistorial = value)  _
						= false) Then
				If Me._HISTORIALE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCHistorialChanging(value)
				Me.SendPropertyChanging
				Me._CHistorial = value
				Me.SendPropertyChanged("CHistorial")
				Me.OnCHistorialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdDiagnostico", DbType:="Int NOT NULL")>  _
	Public Property IdDiagnostico() As Integer
		Get
			Return Me._IdDiagnostico
		End Get
		Set
			If ((Me._IdDiagnostico = value)  _
						= false) Then
				If Me._DIAGNOSTICO1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdDiagnosticoChanging(value)
				Me.SendPropertyChanging
				Me._IdDiagnostico = value
				Me.SendPropertyChanged("IdDiagnostico")
				Me.OnIdDiagnosticoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIE10", DbType:="VarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property CIE10() As String
		Get
			Return Me._CIE10
		End Get
		Set
			If (String.Equals(Me._CIE10, value) = false) Then
				Me.OnCIE10Changing(value)
				Me.SendPropertyChanging
				Me._CIE10 = value
				Me.SendPropertyChanged("CIE10")
				Me.OnCIE10Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OBSERVACIONES", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OBSERVACIONES() As String
		Get
			Return Me._OBSERVACIONES
		End Get
		Set
			If (String.Equals(Me._OBSERVACIONES, value) = false) Then
				Me.OnOBSERVACIONESChanging(value)
				Me.SendPropertyChanging
				Me._OBSERVACIONES = value
				Me.SendPropertyChanged("OBSERVACIONES")
				Me.OnOBSERVACIONESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIAGNOSTICO", DbType:="VarChar(70) NOT NULL", CanBeNull:=false)>  _
	Public Property DIAGNOSTICO() As String
		Get
			Return Me._DIAGNOSTICO
		End Get
		Set
			If (String.Equals(Me._DIAGNOSTICO, value) = false) Then
				Me.OnDIAGNOSTICOChanging(value)
				Me.SendPropertyChanging
				Me._DIAGNOSTICO = value
				Me.SendPropertyChanged("DIAGNOSTICO")
				Me.OnDIAGNOSTICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DIAGNOSTICO_HistorialesDiagnostico", Storage:="_DIAGNOSTICO1", ThisKey:="IdDiagnostico", OtherKey:="IDDIAGNOSTICO", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property DIAGNOSTICO1() As DIAGNOSTICO
		Get
			Return Me._DIAGNOSTICO1.Entity
		End Get
		Set
			Dim previousValue As DIAGNOSTICO = Me._DIAGNOSTICO1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DIAGNOSTICO1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DIAGNOSTICO1.Entity = Nothing
					previousValue.HistorialesDiagnosticos.Remove(Me)
				End If
				Me._DIAGNOSTICO1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HistorialesDiagnosticos.Add(Me)
					Me._IdDiagnostico = value.IDDIAGNOSTICO
				Else
					Me._IdDiagnostico = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DIAGNOSTICO1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HISTORIALE_HistorialesDiagnostico", Storage:="_HISTORIALE", ThisKey:="CHistorial", OtherKey:="CHISTORIAL", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property HISTORIALE() As HISTORIALE
		Get
			Return Me._HISTORIALE.Entity
		End Get
		Set
			Dim previousValue As HISTORIALE = Me._HISTORIALE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._HISTORIALE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._HISTORIALE.Entity = Nothing
					previousValue.HistorialesDiagnosticos.Remove(Me)
				End If
				Me._HISTORIALE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HistorialesDiagnosticos.Add(Me)
					Me._CHistorial = value.CHISTORIAL
				Else
					Me._CHistorial = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("HISTORIALE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LHISTORIALES")>  _
Partial Public Class LHISTORIALE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _REFHISTORIAL As Integer
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _HORA As System.Nullable(Of Date)
	
	Private _EXPLORACION As String
	
	Private _COMPLEMENTARIAS As String
	
	Private _JUICIO As String
	
	Private _TRATAMIENTO As String
	
	Private _NOTAS As String
	
	Private _OTROS As String
	
	Private _EVOLUCION As String
	
	Private _HISTORIALE As EntityRef(Of HISTORIALE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnREFHISTORIALChanging(value As Integer)
    End Sub
    Partial Private Sub OnREFHISTORIALChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnHORAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHORAChanged()
    End Sub
    Partial Private Sub OnEXPLORACIONChanging(value As String)
    End Sub
    Partial Private Sub OnEXPLORACIONChanged()
    End Sub
    Partial Private Sub OnCOMPLEMENTARIASChanging(value As String)
    End Sub
    Partial Private Sub OnCOMPLEMENTARIASChanged()
    End Sub
    Partial Private Sub OnJUICIOChanging(value As String)
    End Sub
    Partial Private Sub OnJUICIOChanged()
    End Sub
    Partial Private Sub OnTRATAMIENTOChanging(value As String)
    End Sub
    Partial Private Sub OnTRATAMIENTOChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    Partial Private Sub OnOTROSChanging(value As String)
    End Sub
    Partial Private Sub OnOTROSChanged()
    End Sub
    Partial Private Sub OnEVOLUCIONChanging(value As String)
    End Sub
    Partial Private Sub OnEVOLUCIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HISTORIALE = CType(Nothing, EntityRef(Of HISTORIALE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFHISTORIAL", DbType:="Int NOT NULL")>  _
	Public Property REFHISTORIAL() As Integer
		Get
			Return Me._REFHISTORIAL
		End Get
		Set
			If ((Me._REFHISTORIAL = value)  _
						= false) Then
				If Me._HISTORIALE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFHISTORIALChanging(value)
				Me.SendPropertyChanging
				Me._REFHISTORIAL = value
				Me.SendPropertyChanged("REFHISTORIAL")
				Me.OnREFHISTORIALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime")>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HORA", DbType:="DateTime")>  _
	Public Property HORA() As System.Nullable(Of Date)
		Get
			Return Me._HORA
		End Get
		Set
			If (Me._HORA.Equals(value) = false) Then
				Me.OnHORAChanging(value)
				Me.SendPropertyChanging
				Me._HORA = value
				Me.SendPropertyChanged("HORA")
				Me.OnHORAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXPLORACION", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EXPLORACION() As String
		Get
			Return Me._EXPLORACION
		End Get
		Set
			If (String.Equals(Me._EXPLORACION, value) = false) Then
				Me.OnEXPLORACIONChanging(value)
				Me.SendPropertyChanging
				Me._EXPLORACION = value
				Me.SendPropertyChanged("EXPLORACION")
				Me.OnEXPLORACIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMPLEMENTARIAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property COMPLEMENTARIAS() As String
		Get
			Return Me._COMPLEMENTARIAS
		End Get
		Set
			If (String.Equals(Me._COMPLEMENTARIAS, value) = false) Then
				Me.OnCOMPLEMENTARIASChanging(value)
				Me.SendPropertyChanging
				Me._COMPLEMENTARIAS = value
				Me.SendPropertyChanged("COMPLEMENTARIAS")
				Me.OnCOMPLEMENTARIASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JUICIO", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property JUICIO() As String
		Get
			Return Me._JUICIO
		End Get
		Set
			If (String.Equals(Me._JUICIO, value) = false) Then
				Me.OnJUICIOChanging(value)
				Me.SendPropertyChanging
				Me._JUICIO = value
				Me.SendPropertyChanged("JUICIO")
				Me.OnJUICIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRATAMIENTO", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRATAMIENTO() As String
		Get
			Return Me._TRATAMIENTO
		End Get
		Set
			If (String.Equals(Me._TRATAMIENTO, value) = false) Then
				Me.OnTRATAMIENTOChanging(value)
				Me.SendPropertyChanging
				Me._TRATAMIENTO = value
				Me.SendPropertyChanged("TRATAMIENTO")
				Me.OnTRATAMIENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OTROS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OTROS() As String
		Get
			Return Me._OTROS
		End Get
		Set
			If (String.Equals(Me._OTROS, value) = false) Then
				Me.OnOTROSChanging(value)
				Me.SendPropertyChanging
				Me._OTROS = value
				Me.SendPropertyChanged("OTROS")
				Me.OnOTROSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EVOLUCION", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EVOLUCION() As String
		Get
			Return Me._EVOLUCION
		End Get
		Set
			If (String.Equals(Me._EVOLUCION, value) = false) Then
				Me.OnEVOLUCIONChanging(value)
				Me.SendPropertyChanging
				Me._EVOLUCION = value
				Me.SendPropertyChanged("EVOLUCION")
				Me.OnEVOLUCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HISTORIALE_LHISTORIALE", Storage:="_HISTORIALE", ThisKey:="REFHISTORIAL", OtherKey:="CHISTORIAL", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property HISTORIALE() As HISTORIALE
		Get
			Return Me._HISTORIALE.Entity
		End Get
		Set
			Dim previousValue As HISTORIALE = Me._HISTORIALE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._HISTORIALE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._HISTORIALE.Entity = Nothing
					previousValue.LHISTORIALEs.Remove(Me)
				End If
				Me._HISTORIALE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LHISTORIALEs.Add(Me)
					Me._REFHISTORIAL = value.CHISTORIAL
				Else
					Me._REFHISTORIAL = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("HISTORIALE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LINEASINDICACIONES")>  _
Partial Public Class LINEASINDICACIONE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDLINEASINDICACIONES As Integer
	
	Private _REFMEDICAMENTO As String
	
	Private _REFINDICACION As Integer
	
	Private _TEXTO As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDLINEASINDICACIONESChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDLINEASINDICACIONESChanged()
    End Sub
    Partial Private Sub OnREFMEDICAMENTOChanging(value As String)
    End Sub
    Partial Private Sub OnREFMEDICAMENTOChanged()
    End Sub
    Partial Private Sub OnREFINDICACIONChanging(value As Integer)
    End Sub
    Partial Private Sub OnREFINDICACIONChanged()
    End Sub
    Partial Private Sub OnTEXTOChanging(value As String)
    End Sub
    Partial Private Sub OnTEXTOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDLINEASINDICACIONES", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDLINEASINDICACIONES() As Integer
		Get
			Return Me._IDLINEASINDICACIONES
		End Get
		Set
			If ((Me._IDLINEASINDICACIONES = value)  _
						= false) Then
				Me.OnIDLINEASINDICACIONESChanging(value)
				Me.SendPropertyChanging
				Me._IDLINEASINDICACIONES = value
				Me.SendPropertyChanged("IDLINEASINDICACIONES")
				Me.OnIDLINEASINDICACIONESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMEDICAMENTO", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property REFMEDICAMENTO() As String
		Get
			Return Me._REFMEDICAMENTO
		End Get
		Set
			If (String.Equals(Me._REFMEDICAMENTO, value) = false) Then
				Me.OnREFMEDICAMENTOChanging(value)
				Me.SendPropertyChanging
				Me._REFMEDICAMENTO = value
				Me.SendPropertyChanged("REFMEDICAMENTO")
				Me.OnREFMEDICAMENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFINDICACION", DbType:="Int NOT NULL")>  _
	Public Property REFINDICACION() As Integer
		Get
			Return Me._REFINDICACION
		End Get
		Set
			If ((Me._REFINDICACION = value)  _
						= false) Then
				Me.OnREFINDICACIONChanging(value)
				Me.SendPropertyChanging
				Me._REFINDICACION = value
				Me.SendPropertyChanged("REFINDICACION")
				Me.OnREFINDICACIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEXTO", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TEXTO() As String
		Get
			Return Me._TEXTO
		End Get
		Set
			If (String.Equals(Me._TEXTO, value) = false) Then
				Me.OnTEXTOChanging(value)
				Me.SendPropertyChanging
				Me._TEXTO = value
				Me.SendPropertyChanged("TEXTO")
				Me.OnTEXTOChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SALAS")>  _
Partial Public Class SALA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_SALA As Integer
	
	Private _Nombre As String
	
	Private _Descripcion As String
	
	Private _ID_MEDICOJEFE As System.Nullable(Of Integer)
	
	Private _CITAs As EntitySet(Of CITA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_SALAChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SALAChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnID_MEDICOJEFEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_MEDICOJEFEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CITAs = New EntitySet(Of CITA)(AddressOf Me.attach_CITAs, AddressOf Me.detach_CITAs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_SALA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_SALA() As Integer
		Get
			Return Me._ID_SALA
		End Get
		Set
			If ((Me._ID_SALA = value)  _
						= false) Then
				Me.OnID_SALAChanging(value)
				Me.SendPropertyChanging
				Me._ID_SALA = value
				Me.SendPropertyChanged("ID_SALA")
				Me.OnID_SALAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(50)")>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_MEDICOJEFE", DbType:="Int")>  _
	Public Property ID_MEDICOJEFE() As System.Nullable(Of Integer)
		Get
			Return Me._ID_MEDICOJEFE
		End Get
		Set
			If (Me._ID_MEDICOJEFE.Equals(value) = false) Then
				Me.OnID_MEDICOJEFEChanging(value)
				Me.SendPropertyChanging
				Me._ID_MEDICOJEFE = value
				Me.SendPropertyChanged("ID_MEDICOJEFE")
				Me.OnID_MEDICOJEFEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SALA_CITA", Storage:="_CITAs", ThisKey:="ID_SALA", OtherKey:="ID_SALA")>  _
	Public Property CITAs() As EntitySet(Of CITA)
		Get
			Return Me._CITAs
		End Get
		Set
			Me._CITAs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CITAs(ByVal entity As CITA)
		Me.SendPropertyChanging
		entity.SALA = Me
	End Sub
	
	Private Sub detach_CITAs(ByVal entity As CITA)
		Me.SendPropertyChanging
		entity.SALA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LINEASFACTURAS")>  _
Partial Public Class LINEASFACTURA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDLINEAFACTURA As Integer
	
	Private _CONCEPTO As String
	
	Private _IMPORTE As System.Nullable(Of Decimal)
	
	Private _REFFACTURA As Integer
	
	Private _REFCONCEPTO As String
	
	Private _CANTIDAD As Single
	
	Private _TIPOIVA As Single
	
	Private _ID_Cita As System.Nullable(Of Integer)
	
	Private _Descuento As System.Nullable(Of Double)
	
	Private _ImporteOriginal As System.Nullable(Of Double)
	
	Private _RefLineaCita As System.Nullable(Of Long)
	
	Private _LCOMPARATIVAS_TRATAMIENTOs As EntitySet(Of LCOMPARATIVAS_TRATAMIENTO)
	
	Private _CONCEPTOSFRA As EntityRef(Of CONCEPTOSFRA)
	
	Private _FACTURA As EntityRef(Of FACTURA)
	
	Private _LineasCita As EntityRef(Of LineasCita)
	
	Private _CITA As EntityRef(Of CITA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDLINEAFACTURAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDLINEAFACTURAChanged()
    End Sub
    Partial Private Sub OnCONCEPTOChanging(value As String)
    End Sub
    Partial Private Sub OnCONCEPTOChanged()
    End Sub
    Partial Private Sub OnIMPORTEChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnIMPORTEChanged()
    End Sub
    Partial Private Sub OnREFFACTURAChanging(value As Integer)
    End Sub
    Partial Private Sub OnREFFACTURAChanged()
    End Sub
    Partial Private Sub OnREFCONCEPTOChanging(value As String)
    End Sub
    Partial Private Sub OnREFCONCEPTOChanged()
    End Sub
    Partial Private Sub OnCANTIDADChanging(value As Single)
    End Sub
    Partial Private Sub OnCANTIDADChanged()
    End Sub
    Partial Private Sub OnTIPOIVAChanging(value As Single)
    End Sub
    Partial Private Sub OnTIPOIVAChanged()
    End Sub
    Partial Private Sub OnID_CitaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_CitaChanged()
    End Sub
    Partial Private Sub OnDescuentoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuentoChanged()
    End Sub
    Partial Private Sub OnImporteOriginalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnImporteOriginalChanged()
    End Sub
    Partial Private Sub OnRefLineaCitaChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnRefLineaCitaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LCOMPARATIVAS_TRATAMIENTOs = New EntitySet(Of LCOMPARATIVAS_TRATAMIENTO)(AddressOf Me.attach_LCOMPARATIVAS_TRATAMIENTOs, AddressOf Me.detach_LCOMPARATIVAS_TRATAMIENTOs)
		Me._CONCEPTOSFRA = CType(Nothing, EntityRef(Of CONCEPTOSFRA))
		Me._FACTURA = CType(Nothing, EntityRef(Of FACTURA))
		Me._LineasCita = CType(Nothing, EntityRef(Of LineasCita))
		Me._CITA = CType(Nothing, EntityRef(Of CITA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDLINEAFACTURA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDLINEAFACTURA() As Integer
		Get
			Return Me._IDLINEAFACTURA
		End Get
		Set
			If ((Me._IDLINEAFACTURA = value)  _
						= false) Then
				Me.OnIDLINEAFACTURAChanging(value)
				Me.SendPropertyChanging
				Me._IDLINEAFACTURA = value
				Me.SendPropertyChanged("IDLINEAFACTURA")
				Me.OnIDLINEAFACTURAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONCEPTO", DbType:="NVarChar(MAX)")>  _
	Public Property CONCEPTO() As String
		Get
			Return Me._CONCEPTO
		End Get
		Set
			If (String.Equals(Me._CONCEPTO, value) = false) Then
				Me.OnCONCEPTOChanging(value)
				Me.SendPropertyChanging
				Me._CONCEPTO = value
				Me.SendPropertyChanged("CONCEPTO")
				Me.OnCONCEPTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMPORTE", DbType:="Decimal(18,2)")>  _
	Public Property IMPORTE() As System.Nullable(Of Decimal)
		Get
			Return Me._IMPORTE
		End Get
		Set
			If (Me._IMPORTE.Equals(value) = false) Then
				Me.OnIMPORTEChanging(value)
				Me.SendPropertyChanging
				Me._IMPORTE = value
				Me.SendPropertyChanged("IMPORTE")
				Me.OnIMPORTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFFACTURA", DbType:="Int NOT NULL")>  _
	Public Property REFFACTURA() As Integer
		Get
			Return Me._REFFACTURA
		End Get
		Set
			If ((Me._REFFACTURA = value)  _
						= false) Then
				If Me._FACTURA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFFACTURAChanging(value)
				Me.SendPropertyChanging
				Me._REFFACTURA = value
				Me.SendPropertyChanged("REFFACTURA")
				Me.OnREFFACTURAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFCONCEPTO", DbType:="VarChar(10)")>  _
	Public Property REFCONCEPTO() As String
		Get
			Return Me._REFCONCEPTO
		End Get
		Set
			If (String.Equals(Me._REFCONCEPTO, value) = false) Then
				If Me._CONCEPTOSFRA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFCONCEPTOChanging(value)
				Me.SendPropertyChanging
				Me._REFCONCEPTO = value
				Me.SendPropertyChanged("REFCONCEPTO")
				Me.OnREFCONCEPTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CANTIDAD", DbType:="Real NOT NULL")>  _
	Public Property CANTIDAD() As Single
		Get
			Return Me._CANTIDAD
		End Get
		Set
			If ((Me._CANTIDAD = value)  _
						= false) Then
				Me.OnCANTIDADChanging(value)
				Me.SendPropertyChanging
				Me._CANTIDAD = value
				Me.SendPropertyChanged("CANTIDAD")
				Me.OnCANTIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TIPOIVA", DbType:="Real NOT NULL")>  _
	Public Property TIPOIVA() As Single
		Get
			Return Me._TIPOIVA
		End Get
		Set
			If ((Me._TIPOIVA = value)  _
						= false) Then
				Me.OnTIPOIVAChanging(value)
				Me.SendPropertyChanging
				Me._TIPOIVA = value
				Me.SendPropertyChanged("TIPOIVA")
				Me.OnTIPOIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cita", DbType:="Int")>  _
	Public Property ID_Cita() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Cita
		End Get
		Set
			If (Me._ID_Cita.Equals(value) = false) Then
				If (Me._LineasCita.HasLoadedOrAssignedValue OrElse Me._CITA.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_CitaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cita = value
				Me.SendPropertyChanged("ID_Cita")
				Me.OnID_CitaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento", DbType:="Float")>  _
	Public Property Descuento() As System.Nullable(Of Double)
		Get
			Return Me._Descuento
		End Get
		Set
			If (Me._Descuento.Equals(value) = false) Then
				Me.OnDescuentoChanging(value)
				Me.SendPropertyChanging
				Me._Descuento = value
				Me.SendPropertyChanged("Descuento")
				Me.OnDescuentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImporteOriginal", DbType:="Float")>  _
	Public Property ImporteOriginal() As System.Nullable(Of Double)
		Get
			Return Me._ImporteOriginal
		End Get
		Set
			If (Me._ImporteOriginal.Equals(value) = false) Then
				Me.OnImporteOriginalChanging(value)
				Me.SendPropertyChanging
				Me._ImporteOriginal = value
				Me.SendPropertyChanged("ImporteOriginal")
				Me.OnImporteOriginalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RefLineaCita", DbType:="BigInt")>  _
	Public Property RefLineaCita() As System.Nullable(Of Long)
		Get
			Return Me._RefLineaCita
		End Get
		Set
			If (Me._RefLineaCita.Equals(value) = false) Then
				If Me._LineasCita.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRefLineaCitaChanging(value)
				Me.SendPropertyChanging
				Me._RefLineaCita = value
				Me.SendPropertyChanged("RefLineaCita")
				Me.OnRefLineaCitaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LINEASFACTURA_LCOMPARATIVAS_TRATAMIENTO", Storage:="_LCOMPARATIVAS_TRATAMIENTOs", ThisKey:="IDLINEAFACTURA", OtherKey:="ID_LineaFactura")>  _
	Public Property LCOMPARATIVAS_TRATAMIENTOs() As EntitySet(Of LCOMPARATIVAS_TRATAMIENTO)
		Get
			Return Me._LCOMPARATIVAS_TRATAMIENTOs
		End Get
		Set
			Me._LCOMPARATIVAS_TRATAMIENTOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_LINEASFACTURA", Storage:="_CONCEPTOSFRA", ThisKey:="REFCONCEPTO", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property CONCEPTOSFRA() As CONCEPTOSFRA
		Get
			Return Me._CONCEPTOSFRA.Entity
		End Get
		Set
			Dim previousValue As CONCEPTOSFRA = Me._CONCEPTOSFRA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONCEPTOSFRA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONCEPTOSFRA.Entity = Nothing
					previousValue.LINEASFACTURAs.Remove(Me)
				End If
				Me._CONCEPTOSFRA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LINEASFACTURAs.Add(Me)
					Me._REFCONCEPTO = value.CODIGO
				Else
					Me._REFCONCEPTO = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("CONCEPTOSFRA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FACTURA_LINEASFACTURA", Storage:="_FACTURA", ThisKey:="REFFACTURA", OtherKey:="IDFACTURA", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property FACTURA() As FACTURA
		Get
			Return Me._FACTURA.Entity
		End Get
		Set
			Dim previousValue As FACTURA = Me._FACTURA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FACTURA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FACTURA.Entity = Nothing
					previousValue.LINEASFACTURAs.Remove(Me)
				End If
				Me._FACTURA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LINEASFACTURAs.Add(Me)
					Me._REFFACTURA = value.IDFACTURA
				Else
					Me._REFFACTURA = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FACTURA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LineasCita_LINEASFACTURA", Storage:="_LineasCita", ThisKey:="RefLineaCita,ID_Cita", OtherKey:="IdLinea,IdCita", IsForeignKey:=true)>  _
	Public Property LineasCita() As LineasCita
		Get
			Return Me._LineasCita.Entity
		End Get
		Set
			Dim previousValue As LineasCita = Me._LineasCita.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LineasCita.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LineasCita.Entity = Nothing
					previousValue.LINEASFACTURAs.Remove(Me)
				End If
				Me._LineasCita.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LINEASFACTURAs.Add(Me)
					Me._RefLineaCita = value.IdLinea
					Me._ID_Cita = value.IdCita
				Else
					Me._RefLineaCita = CType(Nothing, Nullable(Of Long))
					Me._ID_Cita = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("LineasCita")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CITA_LINEASFACTURA", Storage:="_CITA", ThisKey:="ID_Cita", OtherKey:="IDCITA", IsForeignKey:=true)>  _
	Public Property CITA() As CITA
		Get
			Return Me._CITA.Entity
		End Get
		Set
			Dim previousValue As CITA = Me._CITA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CITA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CITA.Entity = Nothing
					previousValue.LINEASFACTURAs.Remove(Me)
				End If
				Me._CITA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LINEASFACTURAs.Add(Me)
					Me._ID_Cita = value.IDCITA
				Else
					Me._ID_Cita = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CITA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LCOMPARATIVAS_TRATAMIENTOs(ByVal entity As LCOMPARATIVAS_TRATAMIENTO)
		Me.SendPropertyChanging
		entity.LINEASFACTURA = Me
	End Sub
	
	Private Sub detach_LCOMPARATIVAS_TRATAMIENTOs(ByVal entity As LCOMPARATIVAS_TRATAMIENTO)
		Me.SendPropertyChanging
		entity.LINEASFACTURA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MEDICOS")>  _
Partial Public Class MEDICO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NOMBRE As String
	
	Private _APELLIDO1 As String
	
	Private _APELLIDO2 As String
	
	Private _DOMICILIO As String
	
	Private _TLFNO As String
	
	Private _MOVIL As String
	
	Private _LOCALIDAD As String
	
	Private _CP As String
	
	Private _DNI As String
	
	Private _PROVINCIA As String
	
	Private _COLEGIADO As String
	
	Private _CMEDICO As Integer
	
	Private _ESPECIALIDAD As String
	
	Private _OBSERVACIONES As String
	
	Private _FIRMA As System.Data.Linq.Binary
	
	Private _PorcientoCita As System.Nullable(Of Double)
	
	Private _Eliminado As System.Nullable(Of Boolean)
	
	Private _FondoReceta As String
	
	Private _LogoColegioReceta As String
	
	Private _Logo2Receta As String
	
	Private _d_Acciones As EntitySet(Of d_Accione)
	
	Private _N_Partes As EntitySet(Of N_Parte)
	
	Private _MEDICOS_CONCEPTOFRAs As EntitySet(Of MEDICOS_CONCEPTOFRA)
	
	Private _Liquidacion_Medicos As EntitySet(Of Liquidacion_Medico)
	
	Private _CALENDARIO_MEDICOs As EntitySet(Of CALENDARIO_MEDICO)
	
	Private _LCOMPARATIVAs As EntitySet(Of LCOMPARATIVA)
	
	Private _INFORME_MEDICOs As EntitySet(Of INFORME_MEDICO)
	
	Private _MEDICOS_FICHEROs As EntitySet(Of MEDICOS_FICHERO)
	
	Private _HISTORIALEs As EntitySet(Of HISTORIALE)
	
	Private _RECETAs As EntitySet(Of RECETA)
	
	Private _N_Partes_Asistencias As EntitySet(Of N_Partes_Asistencia)
	
	Private _RecetasXML As EntitySet(Of RecetasXML)
	
	Private _HORARIOS_MEDICOS As EntityRef(Of HORARIOS_MEDICOS)
	
	Private _DERIVACIONES As EntitySet(Of DERIVACIONES)
	
	Private _HISTORIALES_REVISIONES As EntitySet(Of HISTORIALES_REVISIONES)
	
	Private _CITAs As EntitySet(Of CITA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREChanged()
    End Sub
    Partial Private Sub OnAPELLIDO1Changing(value As String)
    End Sub
    Partial Private Sub OnAPELLIDO1Changed()
    End Sub
    Partial Private Sub OnAPELLIDO2Changing(value As String)
    End Sub
    Partial Private Sub OnAPELLIDO2Changed()
    End Sub
    Partial Private Sub OnDOMICILIOChanging(value As String)
    End Sub
    Partial Private Sub OnDOMICILIOChanged()
    End Sub
    Partial Private Sub OnTLFNOChanging(value As String)
    End Sub
    Partial Private Sub OnTLFNOChanged()
    End Sub
    Partial Private Sub OnMOVILChanging(value As String)
    End Sub
    Partial Private Sub OnMOVILChanged()
    End Sub
    Partial Private Sub OnLOCALIDADChanging(value As String)
    End Sub
    Partial Private Sub OnLOCALIDADChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnDNIChanging(value As String)
    End Sub
    Partial Private Sub OnDNIChanged()
    End Sub
    Partial Private Sub OnPROVINCIAChanging(value As String)
    End Sub
    Partial Private Sub OnPROVINCIAChanged()
    End Sub
    Partial Private Sub OnCOLEGIADOChanging(value As String)
    End Sub
    Partial Private Sub OnCOLEGIADOChanged()
    End Sub
    Partial Private Sub OnCMEDICOChanging(value As Integer)
    End Sub
    Partial Private Sub OnCMEDICOChanged()
    End Sub
    Partial Private Sub OnESPECIALIDADChanging(value As String)
    End Sub
    Partial Private Sub OnESPECIALIDADChanged()
    End Sub
    Partial Private Sub OnOBSERVACIONESChanging(value As String)
    End Sub
    Partial Private Sub OnOBSERVACIONESChanged()
    End Sub
    Partial Private Sub OnFIRMAChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFIRMAChanged()
    End Sub
    Partial Private Sub OnPorcientoCitaChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPorcientoCitaChanged()
    End Sub
    Partial Private Sub OnEliminadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEliminadoChanged()
    End Sub
    Partial Private Sub OnFondoRecetaChanging(value As String)
    End Sub
    Partial Private Sub OnFondoRecetaChanged()
    End Sub
    Partial Private Sub OnLogoColegioRecetaChanging(value As String)
    End Sub
    Partial Private Sub OnLogoColegioRecetaChanged()
    End Sub
    Partial Private Sub OnLogo2RecetaChanging(value As String)
    End Sub
    Partial Private Sub OnLogo2RecetaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._d_Acciones = New EntitySet(Of d_Accione)(AddressOf Me.attach_d_Acciones, AddressOf Me.detach_d_Acciones)
		Me._N_Partes = New EntitySet(Of N_Parte)(AddressOf Me.attach_N_Partes, AddressOf Me.detach_N_Partes)
		Me._MEDICOS_CONCEPTOFRAs = New EntitySet(Of MEDICOS_CONCEPTOFRA)(AddressOf Me.attach_MEDICOS_CONCEPTOFRAs, AddressOf Me.detach_MEDICOS_CONCEPTOFRAs)
		Me._Liquidacion_Medicos = New EntitySet(Of Liquidacion_Medico)(AddressOf Me.attach_Liquidacion_Medicos, AddressOf Me.detach_Liquidacion_Medicos)
		Me._CALENDARIO_MEDICOs = New EntitySet(Of CALENDARIO_MEDICO)(AddressOf Me.attach_CALENDARIO_MEDICOs, AddressOf Me.detach_CALENDARIO_MEDICOs)
		Me._LCOMPARATIVAs = New EntitySet(Of LCOMPARATIVA)(AddressOf Me.attach_LCOMPARATIVAs, AddressOf Me.detach_LCOMPARATIVAs)
		Me._INFORME_MEDICOs = New EntitySet(Of INFORME_MEDICO)(AddressOf Me.attach_INFORME_MEDICOs, AddressOf Me.detach_INFORME_MEDICOs)
		Me._MEDICOS_FICHEROs = New EntitySet(Of MEDICOS_FICHERO)(AddressOf Me.attach_MEDICOS_FICHEROs, AddressOf Me.detach_MEDICOS_FICHEROs)
		Me._HISTORIALEs = New EntitySet(Of HISTORIALE)(AddressOf Me.attach_HISTORIALEs, AddressOf Me.detach_HISTORIALEs)
		Me._RECETAs = New EntitySet(Of RECETA)(AddressOf Me.attach_RECETAs, AddressOf Me.detach_RECETAs)
		Me._N_Partes_Asistencias = New EntitySet(Of N_Partes_Asistencia)(AddressOf Me.attach_N_Partes_Asistencias, AddressOf Me.detach_N_Partes_Asistencias)
		Me._RecetasXML = New EntitySet(Of RecetasXML)(AddressOf Me.attach_RecetasXML, AddressOf Me.detach_RecetasXML)
		Me._HORARIOS_MEDICOS = CType(Nothing, EntityRef(Of HORARIOS_MEDICOS))
		Me._DERIVACIONES = New EntitySet(Of DERIVACIONES)(AddressOf Me.attach_DERIVACIONES, AddressOf Me.detach_DERIVACIONES)
		Me._HISTORIALES_REVISIONES = New EntitySet(Of HISTORIALES_REVISIONES)(AddressOf Me.attach_HISTORIALES_REVISIONES, AddressOf Me.detach_HISTORIALES_REVISIONES)
		Me._CITAs = New EntitySet(Of CITA)(AddressOf Me.attach_CITAs, AddressOf Me.detach_CITAs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", DbType:="VarChar(25)")>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me.OnNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRE = value
				Me.SendPropertyChanged("NOMBRE")
				Me.OnNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_APELLIDO1", DbType:="VarChar(15)")>  _
	Public Property APELLIDO1() As String
		Get
			Return Me._APELLIDO1
		End Get
		Set
			If (String.Equals(Me._APELLIDO1, value) = false) Then
				Me.OnAPELLIDO1Changing(value)
				Me.SendPropertyChanging
				Me._APELLIDO1 = value
				Me.SendPropertyChanged("APELLIDO1")
				Me.OnAPELLIDO1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_APELLIDO2", DbType:="VarChar(15)")>  _
	Public Property APELLIDO2() As String
		Get
			Return Me._APELLIDO2
		End Get
		Set
			If (String.Equals(Me._APELLIDO2, value) = false) Then
				Me.OnAPELLIDO2Changing(value)
				Me.SendPropertyChanging
				Me._APELLIDO2 = value
				Me.SendPropertyChanged("APELLIDO2")
				Me.OnAPELLIDO2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOMICILIO", DbType:="VarChar(150)")>  _
	Public Property DOMICILIO() As String
		Get
			Return Me._DOMICILIO
		End Get
		Set
			If (String.Equals(Me._DOMICILIO, value) = false) Then
				Me.OnDOMICILIOChanging(value)
				Me.SendPropertyChanging
				Me._DOMICILIO = value
				Me.SendPropertyChanged("DOMICILIO")
				Me.OnDOMICILIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLFNO", DbType:="VarChar(10)")>  _
	Public Property TLFNO() As String
		Get
			Return Me._TLFNO
		End Get
		Set
			If (String.Equals(Me._TLFNO, value) = false) Then
				Me.OnTLFNOChanging(value)
				Me.SendPropertyChanging
				Me._TLFNO = value
				Me.SendPropertyChanged("TLFNO")
				Me.OnTLFNOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOVIL", DbType:="VarChar(10)")>  _
	Public Property MOVIL() As String
		Get
			Return Me._MOVIL
		End Get
		Set
			If (String.Equals(Me._MOVIL, value) = false) Then
				Me.OnMOVILChanging(value)
				Me.SendPropertyChanging
				Me._MOVIL = value
				Me.SendPropertyChanged("MOVIL")
				Me.OnMOVILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCALIDAD", DbType:="VarChar(20)")>  _
	Public Property LOCALIDAD() As String
		Get
			Return Me._LOCALIDAD
		End Get
		Set
			If (String.Equals(Me._LOCALIDAD, value) = false) Then
				Me.OnLOCALIDADChanging(value)
				Me.SendPropertyChanging
				Me._LOCALIDAD = value
				Me.SendPropertyChanged("LOCALIDAD")
				Me.OnLOCALIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="VarChar(5)")>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNI", DbType:="VarChar(8)")>  _
	Public Property DNI() As String
		Get
			Return Me._DNI
		End Get
		Set
			If (String.Equals(Me._DNI, value) = false) Then
				Me.OnDNIChanging(value)
				Me.SendPropertyChanging
				Me._DNI = value
				Me.SendPropertyChanged("DNI")
				Me.OnDNIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCIA", DbType:="VarChar(30)")>  _
	Public Property PROVINCIA() As String
		Get
			Return Me._PROVINCIA
		End Get
		Set
			If (String.Equals(Me._PROVINCIA, value) = false) Then
				Me.OnPROVINCIAChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCIA = value
				Me.SendPropertyChanged("PROVINCIA")
				Me.OnPROVINCIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COLEGIADO", DbType:="VarChar(12)")>  _
	Public Property COLEGIADO() As String
		Get
			Return Me._COLEGIADO
		End Get
		Set
			If (String.Equals(Me._COLEGIADO, value) = false) Then
				Me.OnCOLEGIADOChanging(value)
				Me.SendPropertyChanging
				Me._COLEGIADO = value
				Me.SendPropertyChanged("COLEGIADO")
				Me.OnCOLEGIADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMEDICO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CMEDICO() As Integer
		Get
			Return Me._CMEDICO
		End Get
		Set
			If ((Me._CMEDICO = value)  _
						= false) Then
				Me.OnCMEDICOChanging(value)
				Me.SendPropertyChanging
				Me._CMEDICO = value
				Me.SendPropertyChanged("CMEDICO")
				Me.OnCMEDICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ESPECIALIDAD", DbType:="VarChar(50)")>  _
	Public Property ESPECIALIDAD() As String
		Get
			Return Me._ESPECIALIDAD
		End Get
		Set
			If (String.Equals(Me._ESPECIALIDAD, value) = false) Then
				Me.OnESPECIALIDADChanging(value)
				Me.SendPropertyChanging
				Me._ESPECIALIDAD = value
				Me.SendPropertyChanged("ESPECIALIDAD")
				Me.OnESPECIALIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OBSERVACIONES", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OBSERVACIONES() As String
		Get
			Return Me._OBSERVACIONES
		End Get
		Set
			If (String.Equals(Me._OBSERVACIONES, value) = false) Then
				Me.OnOBSERVACIONESChanging(value)
				Me.SendPropertyChanging
				Me._OBSERVACIONES = value
				Me.SendPropertyChanged("OBSERVACIONES")
				Me.OnOBSERVACIONESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIRMA", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FIRMA() As System.Data.Linq.Binary
		Get
			Return Me._FIRMA
		End Get
		Set
			If (Object.Equals(Me._FIRMA, value) = false) Then
				Me.OnFIRMAChanging(value)
				Me.SendPropertyChanging
				Me._FIRMA = value
				Me.SendPropertyChanged("FIRMA")
				Me.OnFIRMAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PorcientoCita", DbType:="Float")>  _
	Public Property PorcientoCita() As System.Nullable(Of Double)
		Get
			Return Me._PorcientoCita
		End Get
		Set
			If (Me._PorcientoCita.Equals(value) = false) Then
				Me.OnPorcientoCitaChanging(value)
				Me.SendPropertyChanging
				Me._PorcientoCita = value
				Me.SendPropertyChanged("PorcientoCita")
				Me.OnPorcientoCitaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Eliminado", DbType:="Bit")>  _
	Public Property Eliminado() As System.Nullable(Of Boolean)
		Get
			Return Me._Eliminado
		End Get
		Set
			If (Me._Eliminado.Equals(value) = false) Then
				Me.OnEliminadoChanging(value)
				Me.SendPropertyChanging
				Me._Eliminado = value
				Me.SendPropertyChanged("Eliminado")
				Me.OnEliminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FondoReceta")>  _
	Public Property FondoReceta() As String
		Get
			Return Me._FondoReceta
		End Get
		Set
			If (String.Equals(Me._FondoReceta, value) = false) Then
				Me.OnFondoRecetaChanging(value)
				Me.SendPropertyChanging
				Me._FondoReceta = value
				Me.SendPropertyChanged("FondoReceta")
				Me.OnFondoRecetaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogoColegioReceta")>  _
	Public Property LogoColegioReceta() As String
		Get
			Return Me._LogoColegioReceta
		End Get
		Set
			If (String.Equals(Me._LogoColegioReceta, value) = false) Then
				Me.OnLogoColegioRecetaChanging(value)
				Me.SendPropertyChanging
				Me._LogoColegioReceta = value
				Me.SendPropertyChanged("LogoColegioReceta")
				Me.OnLogoColegioRecetaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Logo2Receta")>  _
	Public Property Logo2Receta() As String
		Get
			Return Me._Logo2Receta
		End Get
		Set
			If (String.Equals(Me._Logo2Receta, value) = false) Then
				Me.OnLogo2RecetaChanging(value)
				Me.SendPropertyChanging
				Me._Logo2Receta = value
				Me.SendPropertyChanged("Logo2Receta")
				Me.OnLogo2RecetaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_d_Accione", Storage:="_d_Acciones", ThisKey:="CMEDICO", OtherKey:="IDMedico")>  _
	Public Property d_Acciones() As EntitySet(Of d_Accione)
		Get
			Return Me._d_Acciones
		End Get
		Set
			Me._d_Acciones.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_N_Parte", Storage:="_N_Partes", ThisKey:="CMEDICO", OtherKey:="ID_Medico")>  _
	Public Property N_Partes() As EntitySet(Of N_Parte)
		Get
			Return Me._N_Partes
		End Get
		Set
			Me._N_Partes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_MEDICOS_CONCEPTOFRA", Storage:="_MEDICOS_CONCEPTOFRAs", ThisKey:="CMEDICO", OtherKey:="CMEDICO")>  _
	Public Property MEDICOS_CONCEPTOFRAs() As EntitySet(Of MEDICOS_CONCEPTOFRA)
		Get
			Return Me._MEDICOS_CONCEPTOFRAs
		End Get
		Set
			Me._MEDICOS_CONCEPTOFRAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_Liquidacion_Medico", Storage:="_Liquidacion_Medicos", ThisKey:="CMEDICO", OtherKey:="ID_Medico")>  _
	Public Property Liquidacion_Medicos() As EntitySet(Of Liquidacion_Medico)
		Get
			Return Me._Liquidacion_Medicos
		End Get
		Set
			Me._Liquidacion_Medicos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_CALENDARIO_MEDICO", Storage:="_CALENDARIO_MEDICOs", ThisKey:="CMEDICO", OtherKey:="ID_MEDICO")>  _
	Public Property CALENDARIO_MEDICOs() As EntitySet(Of CALENDARIO_MEDICO)
		Get
			Return Me._CALENDARIO_MEDICOs
		End Get
		Set
			Me._CALENDARIO_MEDICOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_LCOMPARATIVA", Storage:="_LCOMPARATIVAs", ThisKey:="CMEDICO", OtherKey:="REFMEDICO")>  _
	Public Property LCOMPARATIVAs() As EntitySet(Of LCOMPARATIVA)
		Get
			Return Me._LCOMPARATIVAs
		End Get
		Set
			Me._LCOMPARATIVAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_INFORME_MEDICO", Storage:="_INFORME_MEDICOs", ThisKey:="CMEDICO", OtherKey:="RefMedico")>  _
	Public Property INFORME_MEDICOs() As EntitySet(Of INFORME_MEDICO)
		Get
			Return Me._INFORME_MEDICOs
		End Get
		Set
			Me._INFORME_MEDICOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_MEDICOS_FICHERO", Storage:="_MEDICOS_FICHEROs", ThisKey:="CMEDICO", OtherKey:="ID_Medico")>  _
	Public Property MEDICOS_FICHEROs() As EntitySet(Of MEDICOS_FICHERO)
		Get
			Return Me._MEDICOS_FICHEROs
		End Get
		Set
			Me._MEDICOS_FICHEROs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_HISTORIALE", Storage:="_HISTORIALEs", ThisKey:="CMEDICO", OtherKey:="REFMEDICO")>  _
	Public Property HISTORIALEs() As EntitySet(Of HISTORIALE)
		Get
			Return Me._HISTORIALEs
		End Get
		Set
			Me._HISTORIALEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_RECETA", Storage:="_RECETAs", ThisKey:="CMEDICO", OtherKey:="REFMEDICO")>  _
	Public Property RECETAs() As EntitySet(Of RECETA)
		Get
			Return Me._RECETAs
		End Get
		Set
			Me._RECETAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_N_Partes_Asistencia", Storage:="_N_Partes_Asistencias", ThisKey:="CMEDICO", OtherKey:="ID_Medico")>  _
	Public Property N_Partes_Asistencias() As EntitySet(Of N_Partes_Asistencia)
		Get
			Return Me._N_Partes_Asistencias
		End Get
		Set
			Me._N_Partes_Asistencias.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_RecetasXML", Storage:="_RecetasXML", ThisKey:="CMEDICO", OtherKey:="idmedico")>  _
	Public Property RecetasXML() As EntitySet(Of RecetasXML)
		Get
			Return Me._RecetasXML
		End Get
		Set
			Me._RecetasXML.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_HORARIOS_MEDICOS", Storage:="_HORARIOS_MEDICOS", ThisKey:="CMEDICO", OtherKey:="id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property HORARIOS_MEDICOS() As HORARIOS_MEDICOS
		Get
			Return Me._HORARIOS_MEDICOS.Entity
		End Get
		Set
			Dim previousValue As HORARIOS_MEDICOS = Me._HORARIOS_MEDICOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._HORARIOS_MEDICOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._HORARIOS_MEDICOS.Entity = Nothing
					previousValue.MEDICO = Nothing
				End If
				Me._HORARIOS_MEDICOS.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.MEDICO = Me
				End If
				Me.SendPropertyChanged("HORARIOS_MEDICOS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_DERIVACIONES", Storage:="_DERIVACIONES", ThisKey:="CMEDICO", OtherKey:="REFMEDICO")>  _
	Public Property DERIVACIONES() As EntitySet(Of DERIVACIONES)
		Get
			Return Me._DERIVACIONES
		End Get
		Set
			Me._DERIVACIONES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_HISTORIALES_REVISIONES", Storage:="_HISTORIALES_REVISIONES", ThisKey:="CMEDICO", OtherKey:="REFMEDICO")>  _
	Public Property HISTORIALES_REVISIONES() As EntitySet(Of HISTORIALES_REVISIONES)
		Get
			Return Me._HISTORIALES_REVISIONES
		End Get
		Set
			Me._HISTORIALES_REVISIONES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_CITA", Storage:="_CITAs", ThisKey:="CMEDICO", OtherKey:="REFMEDICO")>  _
	Public Property CITAs() As EntitySet(Of CITA)
		Get
			Return Me._CITAs
		End Get
		Set
			Me._CITAs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_d_Acciones(ByVal entity As d_Accione)
		Me.SendPropertyChanging
		entity.MEDICO = Me
	End Sub
	
	Private Sub detach_d_Acciones(ByVal entity As d_Accione)
		Me.SendPropertyChanging
		entity.MEDICO = Nothing
	End Sub
	
	Private Sub attach_N_Partes(ByVal entity As N_Parte)
		Me.SendPropertyChanging
		entity.MEDICO = Me
	End Sub
	
	Private Sub detach_N_Partes(ByVal entity As N_Parte)
		Me.SendPropertyChanging
		entity.MEDICO = Nothing
	End Sub
	
	Private Sub attach_MEDICOS_CONCEPTOFRAs(ByVal entity As MEDICOS_CONCEPTOFRA)
		Me.SendPropertyChanging
		entity.MEDICO = Me
	End Sub
	
	Private Sub detach_MEDICOS_CONCEPTOFRAs(ByVal entity As MEDICOS_CONCEPTOFRA)
		Me.SendPropertyChanging
		entity.MEDICO = Nothing
	End Sub
	
	Private Sub attach_Liquidacion_Medicos(ByVal entity As Liquidacion_Medico)
		Me.SendPropertyChanging
		entity.MEDICO = Me
	End Sub
	
	Private Sub detach_Liquidacion_Medicos(ByVal entity As Liquidacion_Medico)
		Me.SendPropertyChanging
		entity.MEDICO = Nothing
	End Sub
	
	Private Sub attach_CALENDARIO_MEDICOs(ByVal entity As CALENDARIO_MEDICO)
		Me.SendPropertyChanging
		entity.MEDICO = Me
	End Sub
	
	Private Sub detach_CALENDARIO_MEDICOs(ByVal entity As CALENDARIO_MEDICO)
		Me.SendPropertyChanging
		entity.MEDICO = Nothing
	End Sub
	
	Private Sub attach_LCOMPARATIVAs(ByVal entity As LCOMPARATIVA)
		Me.SendPropertyChanging
		entity.MEDICO = Me
	End Sub
	
	Private Sub detach_LCOMPARATIVAs(ByVal entity As LCOMPARATIVA)
		Me.SendPropertyChanging
		entity.MEDICO = Nothing
	End Sub
	
	Private Sub attach_INFORME_MEDICOs(ByVal entity As INFORME_MEDICO)
		Me.SendPropertyChanging
		entity.MEDICO = Me
	End Sub
	
	Private Sub detach_INFORME_MEDICOs(ByVal entity As INFORME_MEDICO)
		Me.SendPropertyChanging
		entity.MEDICO = Nothing
	End Sub
	
	Private Sub attach_MEDICOS_FICHEROs(ByVal entity As MEDICOS_FICHERO)
		Me.SendPropertyChanging
		entity.MEDICO = Me
	End Sub
	
	Private Sub detach_MEDICOS_FICHEROs(ByVal entity As MEDICOS_FICHERO)
		Me.SendPropertyChanging
		entity.MEDICO = Nothing
	End Sub
	
	Private Sub attach_HISTORIALEs(ByVal entity As HISTORIALE)
		Me.SendPropertyChanging
		entity.MEDICO = Me
	End Sub
	
	Private Sub detach_HISTORIALEs(ByVal entity As HISTORIALE)
		Me.SendPropertyChanging
		entity.MEDICO = Nothing
	End Sub
	
	Private Sub attach_RECETAs(ByVal entity As RECETA)
		Me.SendPropertyChanging
		entity.MEDICO = Me
	End Sub
	
	Private Sub detach_RECETAs(ByVal entity As RECETA)
		Me.SendPropertyChanging
		entity.MEDICO = Nothing
	End Sub
	
	Private Sub attach_N_Partes_Asistencias(ByVal entity As N_Partes_Asistencia)
		Me.SendPropertyChanging
		entity.MEDICO = Me
	End Sub
	
	Private Sub detach_N_Partes_Asistencias(ByVal entity As N_Partes_Asistencia)
		Me.SendPropertyChanging
		entity.MEDICO = Nothing
	End Sub
	
	Private Sub attach_RecetasXML(ByVal entity As RecetasXML)
		Me.SendPropertyChanging
		entity.MEDICO = Me
	End Sub
	
	Private Sub detach_RecetasXML(ByVal entity As RecetasXML)
		Me.SendPropertyChanging
		entity.MEDICO = Nothing
	End Sub
	
	Private Sub attach_DERIVACIONES(ByVal entity As DERIVACIONES)
		Me.SendPropertyChanging
		entity.MEDICO = Me
	End Sub
	
	Private Sub detach_DERIVACIONES(ByVal entity As DERIVACIONES)
		Me.SendPropertyChanging
		entity.MEDICO = Nothing
	End Sub
	
	Private Sub attach_HISTORIALES_REVISIONES(ByVal entity As HISTORIALES_REVISIONES)
		Me.SendPropertyChanging
		entity.MEDICO1 = Me
	End Sub
	
	Private Sub detach_HISTORIALES_REVISIONES(ByVal entity As HISTORIALES_REVISIONES)
		Me.SendPropertyChanging
		entity.MEDICO1 = Nothing
	End Sub
	
	Private Sub attach_CITAs(ByVal entity As CITA)
		Me.SendPropertyChanging
		entity.MEDICO = Me
	End Sub
	
	Private Sub detach_CITAs(ByVal entity As CITA)
		Me.SendPropertyChanging
		entity.MEDICO = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MEDICOS_CONCEPTOFRA")>  _
Partial Public Class MEDICOS_CONCEPTOFRA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CMEDICO As Integer
	
	Private _CODIGO As String
	
	Private _ImporteDto As System.Nullable(Of Double)
	
	Private _ImportePorciento As System.Nullable(Of Double)
	
	Private _CONCEPTOSFRA As EntityRef(Of CONCEPTOSFRA)
	
	Private _MEDICO As EntityRef(Of MEDICO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCMEDICOChanging(value As Integer)
    End Sub
    Partial Private Sub OnCMEDICOChanged()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As String)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnImporteDtoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnImporteDtoChanged()
    End Sub
    Partial Private Sub OnImportePorcientoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnImportePorcientoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CONCEPTOSFRA = CType(Nothing, EntityRef(Of CONCEPTOSFRA))
		Me._MEDICO = CType(Nothing, EntityRef(Of MEDICO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMEDICO", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CMEDICO() As Integer
		Get
			Return Me._CMEDICO
		End Get
		Set
			If ((Me._CMEDICO = value)  _
						= false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCMEDICOChanging(value)
				Me.SendPropertyChanging
				Me._CMEDICO = value
				Me.SendPropertyChanged("CMEDICO")
				Me.OnCMEDICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODIGO() As String
		Get
			Return Me._CODIGO
		End Get
		Set
			If (String.Equals(Me._CODIGO, value) = false) Then
				If Me._CONCEPTOSFRA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImporteDto", DbType:="Float")>  _
	Public Property ImporteDto() As System.Nullable(Of Double)
		Get
			Return Me._ImporteDto
		End Get
		Set
			If (Me._ImporteDto.Equals(value) = false) Then
				Me.OnImporteDtoChanging(value)
				Me.SendPropertyChanging
				Me._ImporteDto = value
				Me.SendPropertyChanged("ImporteDto")
				Me.OnImporteDtoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImportePorciento", DbType:="Float")>  _
	Public Property ImportePorciento() As System.Nullable(Of Double)
		Get
			Return Me._ImportePorciento
		End Get
		Set
			If (Me._ImportePorciento.Equals(value) = false) Then
				Me.OnImportePorcientoChanging(value)
				Me.SendPropertyChanging
				Me._ImportePorciento = value
				Me.SendPropertyChanged("ImportePorciento")
				Me.OnImportePorcientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_MEDICOS_CONCEPTOFRA", Storage:="_CONCEPTOSFRA", ThisKey:="CODIGO", OtherKey:="CODIGO", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property CONCEPTOSFRA() As CONCEPTOSFRA
		Get
			Return Me._CONCEPTOSFRA.Entity
		End Get
		Set
			Dim previousValue As CONCEPTOSFRA = Me._CONCEPTOSFRA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONCEPTOSFRA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONCEPTOSFRA.Entity = Nothing
					previousValue.MEDICOS_CONCEPTOFRAs.Remove(Me)
				End If
				Me._CONCEPTOSFRA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MEDICOS_CONCEPTOFRAs.Add(Me)
					Me._CODIGO = value.CODIGO
				Else
					Me._CODIGO = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("CONCEPTOSFRA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_MEDICOS_CONCEPTOFRA", Storage:="_MEDICO", ThisKey:="CMEDICO", OtherKey:="CMEDICO", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property MEDICO() As MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.MEDICOS_CONCEPTOFRAs.Remove(Me)
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MEDICOS_CONCEPTOFRAs.Add(Me)
					Me._CMEDICO = value.CMEDICO
				Else
					Me._CMEDICO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("MEDICO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Liquidacion_Medico")>  _
Partial Public Class Liquidacion_Medico
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Liquidacion As Long
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _ID_Medico As System.Nullable(Of Integer)
	
	Private _ID_FormaPago As String
	
	Private _Importe As System.Nullable(Of Double)
	
	Private _Descripcion As String
	
	Private _Notas As String
	
	Private _ID_Usuario As System.Nullable(Of Integer)
	
	Private _Liquidacion_Medico_Lineas As EntitySet(Of Liquidacion_Medico_Linea)
	
	Private _MEDICO As EntityRef(Of MEDICO)
	
	Private _FORMASPAGO As EntityRef(Of FORMASPAGO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_LiquidacionChanging(value As Long)
    End Sub
    Partial Private Sub OnID_LiquidacionChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnID_MedicoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_MedicoChanged()
    End Sub
    Partial Private Sub OnID_FormaPagoChanging(value As String)
    End Sub
    Partial Private Sub OnID_FormaPagoChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnNotasChanging(value As String)
    End Sub
    Partial Private Sub OnNotasChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Liquidacion_Medico_Lineas = New EntitySet(Of Liquidacion_Medico_Linea)(AddressOf Me.attach_Liquidacion_Medico_Lineas, AddressOf Me.detach_Liquidacion_Medico_Lineas)
		Me._MEDICO = CType(Nothing, EntityRef(Of MEDICO))
		Me._FORMASPAGO = CType(Nothing, EntityRef(Of FORMASPAGO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Liquidacion", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Liquidacion() As Long
		Get
			Return Me._ID_Liquidacion
		End Get
		Set
			If ((Me._ID_Liquidacion = value)  _
						= false) Then
				Me.OnID_LiquidacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Liquidacion = value
				Me.SendPropertyChanged("ID_Liquidacion")
				Me.OnID_LiquidacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="DateTime")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Medico", DbType:="Int")>  _
	Public Property ID_Medico() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Medico
		End Get
		Set
			If (Me._ID_Medico.Equals(value) = false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_MedicoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Medico = value
				Me.SendPropertyChanged("ID_Medico")
				Me.OnID_MedicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormaPago", DbType:="VarChar(10)")>  _
	Public Property ID_FormaPago() As String
		Get
			Return Me._ID_FormaPago
		End Get
		Set
			If (String.Equals(Me._ID_FormaPago, value) = false) Then
				If Me._FORMASPAGO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormaPago = value
				Me.SendPropertyChanged("ID_FormaPago")
				Me.OnID_FormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Float")>  _
	Public Property Importe() As System.Nullable(Of Double)
		Get
			Return Me._Importe
		End Get
		Set
			If (Me._Importe.Equals(value) = false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(MAX)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notas", DbType:="NVarChar(MAX)")>  _
	Public Property Notas() As String
		Get
			Return Me._Notas
		End Get
		Set
			If (String.Equals(Me._Notas, value) = false) Then
				Me.OnNotasChanging(value)
				Me.SendPropertyChanging
				Me._Notas = value
				Me.SendPropertyChanged("Notas")
				Me.OnNotasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int")>  _
	Public Property ID_Usuario() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If (Me._ID_Usuario.Equals(value) = false) Then
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Liquidacion_Medico_Liquidacion_Medico_Linea", Storage:="_Liquidacion_Medico_Lineas", ThisKey:="ID_Liquidacion", OtherKey:="ID_Liquidacion")>  _
	Public Property Liquidacion_Medico_Lineas() As EntitySet(Of Liquidacion_Medico_Linea)
		Get
			Return Me._Liquidacion_Medico_Lineas
		End Get
		Set
			Me._Liquidacion_Medico_Lineas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_Liquidacion_Medico", Storage:="_MEDICO", ThisKey:="ID_Medico", OtherKey:="CMEDICO", IsForeignKey:=true)>  _
	Public Property MEDICO() As MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.Liquidacion_Medicos.Remove(Me)
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Liquidacion_Medicos.Add(Me)
					Me._ID_Medico = value.CMEDICO
				Else
					Me._ID_Medico = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MEDICO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_Liquidacion_Medico", Storage:="_FORMASPAGO", ThisKey:="ID_FormaPago", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property FORMASPAGO() As FORMASPAGO
		Get
			Return Me._FORMASPAGO.Entity
		End Get
		Set
			Dim previousValue As FORMASPAGO = Me._FORMASPAGO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FORMASPAGO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FORMASPAGO.Entity = Nothing
					previousValue.Liquidacion_Medicos.Remove(Me)
				End If
				Me._FORMASPAGO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Liquidacion_Medicos.Add(Me)
					Me._ID_FormaPago = value.CODIGO
				Else
					Me._ID_FormaPago = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("FORMASPAGO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Liquidacion_Medico_Lineas(ByVal entity As Liquidacion_Medico_Linea)
		Me.SendPropertyChanging
		entity.Liquidacion_Medico = Me
	End Sub
	
	Private Sub detach_Liquidacion_Medico_Lineas(ByVal entity As Liquidacion_Medico_Linea)
		Me.SendPropertyChanging
		entity.Liquidacion_Medico = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_PedidosProveedor")>  _
Partial Public Class N_PedidosProveedor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_PedidoProveedor As Long
	
	Private _Codigo As String
	
	Private _ID_TipoPedidoProveedor As System.Nullable(Of Integer)
	
	Private _Referencia As String
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _ID_Estado As System.Nullable(Of Integer)
	
	Private _ID_Proveedor As System.Nullable(Of Integer)
	
	Private _ID_FormaPago As String
	
	Private _IRPFPorciento As System.Nullable(Of Double)
	
	Private _IRPFCantidad As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _Observaciones As String
	
	Private _PlazoEntrega As System.Nullable(Of Date)
	
	Private _Validez As String
	
	Private _PortePagado As System.Nullable(Of Boolean)
	
	Private _PorteDebido As System.Nullable(Of Boolean)
	
	Private _PorteTexto As String
	
	Private _Privado As String
	
	Private _DocumentacionAsociada As String
	
	Private _Comentarios As String
	
	Private _Imagen As System.Data.Linq.Binary
	
	Private _N_PedidosProveedor_Totales As EntitySet(Of N_PedidosProveedor_Totale)
	
	Private _N_PedidosProveedor_Lineas As EntitySet(Of N_PedidosProveedor_Linea)
	
	Private _FORMASPAGO As EntityRef(Of FORMASPAGO)
	
	Private _N_PedidosProveedor_Tipo As EntityRef(Of N_PedidosProveedor_Tipo)
	
	Private _N_Proveedor As EntityRef(Of N_Proveedor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PedidoProveedorChanging(value As Long)
    End Sub
    Partial Private Sub OnID_PedidoProveedorChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnID_TipoPedidoProveedorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_TipoPedidoProveedorChanged()
    End Sub
    Partial Private Sub OnReferenciaChanging(value As String)
    End Sub
    Partial Private Sub OnReferenciaChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnID_EstadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_EstadoChanged()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnID_FormaPagoChanging(value As String)
    End Sub
    Partial Private Sub OnID_FormaPagoChanged()
    End Sub
    Partial Private Sub OnIRPFPorcientoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnIRPFPorcientoChanged()
    End Sub
    Partial Private Sub OnIRPFCantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnIRPFCantidadChanged()
    End Sub
    Partial Private Sub OnTotalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnPlazoEntregaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPlazoEntregaChanged()
    End Sub
    Partial Private Sub OnValidezChanging(value As String)
    End Sub
    Partial Private Sub OnValidezChanged()
    End Sub
    Partial Private Sub OnPortePagadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPortePagadoChanged()
    End Sub
    Partial Private Sub OnPorteDebidoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPorteDebidoChanged()
    End Sub
    Partial Private Sub OnPorteTextoChanging(value As String)
    End Sub
    Partial Private Sub OnPorteTextoChanged()
    End Sub
    Partial Private Sub OnPrivadoChanging(value As String)
    End Sub
    Partial Private Sub OnPrivadoChanged()
    End Sub
    Partial Private Sub OnDocumentacionAsociadaChanging(value As String)
    End Sub
    Partial Private Sub OnDocumentacionAsociadaChanged()
    End Sub
    Partial Private Sub OnComentariosChanging(value As String)
    End Sub
    Partial Private Sub OnComentariosChanged()
    End Sub
    Partial Private Sub OnImagenChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImagenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_PedidosProveedor_Totales = New EntitySet(Of N_PedidosProveedor_Totale)(AddressOf Me.attach_N_PedidosProveedor_Totales, AddressOf Me.detach_N_PedidosProveedor_Totales)
		Me._N_PedidosProveedor_Lineas = New EntitySet(Of N_PedidosProveedor_Linea)(AddressOf Me.attach_N_PedidosProveedor_Lineas, AddressOf Me.detach_N_PedidosProveedor_Lineas)
		Me._FORMASPAGO = CType(Nothing, EntityRef(Of FORMASPAGO))
		Me._N_PedidosProveedor_Tipo = CType(Nothing, EntityRef(Of N_PedidosProveedor_Tipo))
		Me._N_Proveedor = CType(Nothing, EntityRef(Of N_Proveedor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PedidoProveedor", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_PedidoProveedor() As Long
		Get
			Return Me._ID_PedidoProveedor
		End Get
		Set
			If ((Me._ID_PedidoProveedor = value)  _
						= false) Then
				Me.OnID_PedidoProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_PedidoProveedor = value
				Me.SendPropertyChanged("ID_PedidoProveedor")
				Me.OnID_PedidoProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(50)")>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoPedidoProveedor", DbType:="Int")>  _
	Public Property ID_TipoPedidoProveedor() As System.Nullable(Of Integer)
		Get
			Return Me._ID_TipoPedidoProveedor
		End Get
		Set
			If (Me._ID_TipoPedidoProveedor.Equals(value) = false) Then
				If Me._N_PedidosProveedor_Tipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_TipoPedidoProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoPedidoProveedor = value
				Me.SendPropertyChanged("ID_TipoPedidoProveedor")
				Me.OnID_TipoPedidoProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Referencia", DbType:="NVarChar(50)")>  _
	Public Property Referencia() As String
		Get
			Return Me._Referencia
		End Get
		Set
			If (String.Equals(Me._Referencia, value) = false) Then
				Me.OnReferenciaChanging(value)
				Me.SendPropertyChanging
				Me._Referencia = value
				Me.SendPropertyChanged("Referencia")
				Me.OnReferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="DateTime")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Estado", DbType:="Int")>  _
	Public Property ID_Estado() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Estado
		End Get
		Set
			If (Me._ID_Estado.Equals(value) = false) Then
				Me.OnID_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Estado = value
				Me.SendPropertyChanged("ID_Estado")
				Me.OnID_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", DbType:="Int")>  _
	Public Property ID_Proveedor() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If (Me._ID_Proveedor.Equals(value) = false) Then
				If Me._N_Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormaPago", DbType:="VarChar(10)")>  _
	Public Property ID_FormaPago() As String
		Get
			Return Me._ID_FormaPago
		End Get
		Set
			If (String.Equals(Me._ID_FormaPago, value) = false) Then
				If Me._FORMASPAGO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormaPago = value
				Me.SendPropertyChanged("ID_FormaPago")
				Me.OnID_FormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IRPFPorciento", DbType:="Float")>  _
	Public Property IRPFPorciento() As System.Nullable(Of Double)
		Get
			Return Me._IRPFPorciento
		End Get
		Set
			If (Me._IRPFPorciento.Equals(value) = false) Then
				Me.OnIRPFPorcientoChanging(value)
				Me.SendPropertyChanging
				Me._IRPFPorciento = value
				Me.SendPropertyChanged("IRPFPorciento")
				Me.OnIRPFPorcientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IRPFCantidad", DbType:="Float")>  _
	Public Property IRPFCantidad() As System.Nullable(Of Double)
		Get
			Return Me._IRPFCantidad
		End Get
		Set
			If (Me._IRPFCantidad.Equals(value) = false) Then
				Me.OnIRPFCantidadChanging(value)
				Me.SendPropertyChanging
				Me._IRPFCantidad = value
				Me.SendPropertyChanged("IRPFCantidad")
				Me.OnIRPFCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(200)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlazoEntrega", DbType:="DateTime")>  _
	Public Property PlazoEntrega() As System.Nullable(Of Date)
		Get
			Return Me._PlazoEntrega
		End Get
		Set
			If (Me._PlazoEntrega.Equals(value) = false) Then
				Me.OnPlazoEntregaChanging(value)
				Me.SendPropertyChanging
				Me._PlazoEntrega = value
				Me.SendPropertyChanged("PlazoEntrega")
				Me.OnPlazoEntregaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validez", DbType:="NVarChar(50)")>  _
	Public Property Validez() As String
		Get
			Return Me._Validez
		End Get
		Set
			If (String.Equals(Me._Validez, value) = false) Then
				Me.OnValidezChanging(value)
				Me.SendPropertyChanging
				Me._Validez = value
				Me.SendPropertyChanged("Validez")
				Me.OnValidezChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortePagado", DbType:="Bit")>  _
	Public Property PortePagado() As System.Nullable(Of Boolean)
		Get
			Return Me._PortePagado
		End Get
		Set
			If (Me._PortePagado.Equals(value) = false) Then
				Me.OnPortePagadoChanging(value)
				Me.SendPropertyChanging
				Me._PortePagado = value
				Me.SendPropertyChanged("PortePagado")
				Me.OnPortePagadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PorteDebido", DbType:="Bit")>  _
	Public Property PorteDebido() As System.Nullable(Of Boolean)
		Get
			Return Me._PorteDebido
		End Get
		Set
			If (Me._PorteDebido.Equals(value) = false) Then
				Me.OnPorteDebidoChanging(value)
				Me.SendPropertyChanging
				Me._PorteDebido = value
				Me.SendPropertyChanged("PorteDebido")
				Me.OnPorteDebidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PorteTexto", DbType:="NVarChar(50)")>  _
	Public Property PorteTexto() As String
		Get
			Return Me._PorteTexto
		End Get
		Set
			If (String.Equals(Me._PorteTexto, value) = false) Then
				Me.OnPorteTextoChanging(value)
				Me.SendPropertyChanging
				Me._PorteTexto = value
				Me.SendPropertyChanged("PorteTexto")
				Me.OnPorteTextoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Privado", DbType:="NVarChar(200)")>  _
	Public Property Privado() As String
		Get
			Return Me._Privado
		End Get
		Set
			If (String.Equals(Me._Privado, value) = false) Then
				Me.OnPrivadoChanging(value)
				Me.SendPropertyChanging
				Me._Privado = value
				Me.SendPropertyChanged("Privado")
				Me.OnPrivadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentacionAsociada", DbType:="NVarChar(200)")>  _
	Public Property DocumentacionAsociada() As String
		Get
			Return Me._DocumentacionAsociada
		End Get
		Set
			If (String.Equals(Me._DocumentacionAsociada, value) = false) Then
				Me.OnDocumentacionAsociadaChanging(value)
				Me.SendPropertyChanging
				Me._DocumentacionAsociada = value
				Me.SendPropertyChanged("DocumentacionAsociada")
				Me.OnDocumentacionAsociadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comentarios", DbType:="NVarChar(200)")>  _
	Public Property Comentarios() As String
		Get
			Return Me._Comentarios
		End Get
		Set
			If (String.Equals(Me._Comentarios, value) = false) Then
				Me.OnComentariosChanging(value)
				Me.SendPropertyChanging
				Me._Comentarios = value
				Me.SendPropertyChanged("Comentarios")
				Me.OnComentariosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Imagen", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Imagen() As System.Data.Linq.Binary
		Get
			Return Me._Imagen
		End Get
		Set
			If (Object.Equals(Me._Imagen, value) = false) Then
				Me.OnImagenChanging(value)
				Me.SendPropertyChanging
				Me._Imagen = value
				Me.SendPropertyChanged("Imagen")
				Me.OnImagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_PedidosProveedor_N_PedidosProveedor_Totale", Storage:="_N_PedidosProveedor_Totales", ThisKey:="ID_PedidoProveedor", OtherKey:="ID_PedidoProveedor")>  _
	Public Property N_PedidosProveedor_Totales() As EntitySet(Of N_PedidosProveedor_Totale)
		Get
			Return Me._N_PedidosProveedor_Totales
		End Get
		Set
			Me._N_PedidosProveedor_Totales.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_PedidosProveedor_N_PedidosProveedor_Linea", Storage:="_N_PedidosProveedor_Lineas", ThisKey:="ID_PedidoProveedor", OtherKey:="ID_PedidoProveedor")>  _
	Public Property N_PedidosProveedor_Lineas() As EntitySet(Of N_PedidosProveedor_Linea)
		Get
			Return Me._N_PedidosProveedor_Lineas
		End Get
		Set
			Me._N_PedidosProveedor_Lineas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_N_PedidosProveedor", Storage:="_FORMASPAGO", ThisKey:="ID_FormaPago", OtherKey:="CODIGO", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property FORMASPAGO() As FORMASPAGO
		Get
			Return Me._FORMASPAGO.Entity
		End Get
		Set
			Dim previousValue As FORMASPAGO = Me._FORMASPAGO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FORMASPAGO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FORMASPAGO.Entity = Nothing
					previousValue.N_PedidosProveedors.Remove(Me)
				End If
				Me._FORMASPAGO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_PedidosProveedors.Add(Me)
					Me._ID_FormaPago = value.CODIGO
				Else
					Me._ID_FormaPago = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("FORMASPAGO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_PedidosProveedor_Tipo_N_PedidosProveedor", Storage:="_N_PedidosProveedor_Tipo", ThisKey:="ID_TipoPedidoProveedor", OtherKey:="ID_TipoPedidoProveedor", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property N_PedidosProveedor_Tipo() As N_PedidosProveedor_Tipo
		Get
			Return Me._N_PedidosProveedor_Tipo.Entity
		End Get
		Set
			Dim previousValue As N_PedidosProveedor_Tipo = Me._N_PedidosProveedor_Tipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_PedidosProveedor_Tipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_PedidosProveedor_Tipo.Entity = Nothing
					previousValue.N_PedidosProveedors.Remove(Me)
				End If
				Me._N_PedidosProveedor_Tipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_PedidosProveedors.Add(Me)
					Me._ID_TipoPedidoProveedor = value.ID_TipoPedidoProveedor
				Else
					Me._ID_TipoPedidoProveedor = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("N_PedidosProveedor_Tipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Proveedor_N_PedidosProveedor", Storage:="_N_Proveedor", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor", IsForeignKey:=true)>  _
	Public Property N_Proveedor() As N_Proveedor
		Get
			Return Me._N_Proveedor.Entity
		End Get
		Set
			Dim previousValue As N_Proveedor = Me._N_Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_Proveedor.Entity = Nothing
					previousValue.N_PedidosProveedors.Remove(Me)
				End If
				Me._N_Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_PedidosProveedors.Add(Me)
					Me._ID_Proveedor = value.ID_Proveedor
				Else
					Me._ID_Proveedor = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("N_Proveedor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_N_PedidosProveedor_Totales(ByVal entity As N_PedidosProveedor_Totale)
		Me.SendPropertyChanging
		entity.N_PedidosProveedor = Me
	End Sub
	
	Private Sub detach_N_PedidosProveedor_Totales(ByVal entity As N_PedidosProveedor_Totale)
		Me.SendPropertyChanging
		entity.N_PedidosProveedor = Nothing
	End Sub
	
	Private Sub attach_N_PedidosProveedor_Lineas(ByVal entity As N_PedidosProveedor_Linea)
		Me.SendPropertyChanging
		entity.N_PedidosProveedor = Me
	End Sub
	
	Private Sub detach_N_PedidosProveedor_Lineas(ByVal entity As N_PedidosProveedor_Linea)
		Me.SendPropertyChanging
		entity.N_PedidosProveedor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_PedidosProveedor_Totales")>  _
Partial Public Class N_PedidosProveedor_Totale
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_PedidoProveedor As Long
	
	Private _ID_TipoIVA As Integer
	
	Private _DescuentoPorciento As System.Nullable(Of Double)
	
	Private _DescuentoCantidad As System.Nullable(Of Double)
	
	Private _ProntoPagoPorciento As System.Nullable(Of Double)
	
	Private _ProntoPagoCantidad As System.Nullable(Of Double)
	
	Private _PortesPorciento As System.Nullable(Of Double)
	
	Private _PortesCantidad As System.Nullable(Of Double)
	
	Private _FinanciacionPorciento As System.Nullable(Of Double)
	
	Private _FinanciacionCantidad As System.Nullable(Of Double)
	
	Private _ImporteNeto As System.Nullable(Of Double)
	
	Private _SubTotal As System.Nullable(Of Double)
	
	Private _IVAPorciento As System.Nullable(Of Double)
	
	Private _IVACantidad As System.Nullable(Of Double)
	
	Private _REPorciento As System.Nullable(Of Double)
	
	Private _RECantidad As System.Nullable(Of Double)
	
	Private _N_PedidosProveedor As EntityRef(Of N_PedidosProveedor)
	
	Private _N_TipoIVA As EntityRef(Of N_TipoIVA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PedidoProveedorChanging(value As Long)
    End Sub
    Partial Private Sub OnID_PedidoProveedorChanged()
    End Sub
    Partial Private Sub OnID_TipoIVAChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_TipoIVAChanged()
    End Sub
    Partial Private Sub OnDescuentoPorcientoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuentoPorcientoChanged()
    End Sub
    Partial Private Sub OnDescuentoCantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuentoCantidadChanged()
    End Sub
    Partial Private Sub OnProntoPagoPorcientoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnProntoPagoPorcientoChanged()
    End Sub
    Partial Private Sub OnProntoPagoCantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnProntoPagoCantidadChanged()
    End Sub
    Partial Private Sub OnPortesPorcientoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPortesPorcientoChanged()
    End Sub
    Partial Private Sub OnPortesCantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPortesCantidadChanged()
    End Sub
    Partial Private Sub OnFinanciacionPorcientoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnFinanciacionPorcientoChanged()
    End Sub
    Partial Private Sub OnFinanciacionCantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnFinanciacionCantidadChanged()
    End Sub
    Partial Private Sub OnImporteNetoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnImporteNetoChanged()
    End Sub
    Partial Private Sub OnSubTotalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnSubTotalChanged()
    End Sub
    Partial Private Sub OnIVAPorcientoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnIVAPorcientoChanged()
    End Sub
    Partial Private Sub OnIVACantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnIVACantidadChanged()
    End Sub
    Partial Private Sub OnREPorcientoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnREPorcientoChanged()
    End Sub
    Partial Private Sub OnRECantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRECantidadChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_PedidosProveedor = CType(Nothing, EntityRef(Of N_PedidosProveedor))
		Me._N_TipoIVA = CType(Nothing, EntityRef(Of N_TipoIVA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PedidoProveedor", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_PedidoProveedor() As Long
		Get
			Return Me._ID_PedidoProveedor
		End Get
		Set
			If ((Me._ID_PedidoProveedor = value)  _
						= false) Then
				If Me._N_PedidosProveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PedidoProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_PedidoProveedor = value
				Me.SendPropertyChanged("ID_PedidoProveedor")
				Me.OnID_PedidoProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoIVA", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_TipoIVA() As Integer
		Get
			Return Me._ID_TipoIVA
		End Get
		Set
			If ((Me._ID_TipoIVA = value)  _
						= false) Then
				If Me._N_TipoIVA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_TipoIVAChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoIVA = value
				Me.SendPropertyChanged("ID_TipoIVA")
				Me.OnID_TipoIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescuentoPorciento", DbType:="Float")>  _
	Public Property DescuentoPorciento() As System.Nullable(Of Double)
		Get
			Return Me._DescuentoPorciento
		End Get
		Set
			If (Me._DescuentoPorciento.Equals(value) = false) Then
				Me.OnDescuentoPorcientoChanging(value)
				Me.SendPropertyChanging
				Me._DescuentoPorciento = value
				Me.SendPropertyChanged("DescuentoPorciento")
				Me.OnDescuentoPorcientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescuentoCantidad", DbType:="Float")>  _
	Public Property DescuentoCantidad() As System.Nullable(Of Double)
		Get
			Return Me._DescuentoCantidad
		End Get
		Set
			If (Me._DescuentoCantidad.Equals(value) = false) Then
				Me.OnDescuentoCantidadChanging(value)
				Me.SendPropertyChanging
				Me._DescuentoCantidad = value
				Me.SendPropertyChanged("DescuentoCantidad")
				Me.OnDescuentoCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProntoPagoPorciento", DbType:="Float")>  _
	Public Property ProntoPagoPorciento() As System.Nullable(Of Double)
		Get
			Return Me._ProntoPagoPorciento
		End Get
		Set
			If (Me._ProntoPagoPorciento.Equals(value) = false) Then
				Me.OnProntoPagoPorcientoChanging(value)
				Me.SendPropertyChanging
				Me._ProntoPagoPorciento = value
				Me.SendPropertyChanged("ProntoPagoPorciento")
				Me.OnProntoPagoPorcientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProntoPagoCantidad", DbType:="Float")>  _
	Public Property ProntoPagoCantidad() As System.Nullable(Of Double)
		Get
			Return Me._ProntoPagoCantidad
		End Get
		Set
			If (Me._ProntoPagoCantidad.Equals(value) = false) Then
				Me.OnProntoPagoCantidadChanging(value)
				Me.SendPropertyChanging
				Me._ProntoPagoCantidad = value
				Me.SendPropertyChanged("ProntoPagoCantidad")
				Me.OnProntoPagoCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortesPorciento", DbType:="Float")>  _
	Public Property PortesPorciento() As System.Nullable(Of Double)
		Get
			Return Me._PortesPorciento
		End Get
		Set
			If (Me._PortesPorciento.Equals(value) = false) Then
				Me.OnPortesPorcientoChanging(value)
				Me.SendPropertyChanging
				Me._PortesPorciento = value
				Me.SendPropertyChanged("PortesPorciento")
				Me.OnPortesPorcientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortesCantidad", DbType:="Float")>  _
	Public Property PortesCantidad() As System.Nullable(Of Double)
		Get
			Return Me._PortesCantidad
		End Get
		Set
			If (Me._PortesCantidad.Equals(value) = false) Then
				Me.OnPortesCantidadChanging(value)
				Me.SendPropertyChanging
				Me._PortesCantidad = value
				Me.SendPropertyChanged("PortesCantidad")
				Me.OnPortesCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinanciacionPorciento", DbType:="Float")>  _
	Public Property FinanciacionPorciento() As System.Nullable(Of Double)
		Get
			Return Me._FinanciacionPorciento
		End Get
		Set
			If (Me._FinanciacionPorciento.Equals(value) = false) Then
				Me.OnFinanciacionPorcientoChanging(value)
				Me.SendPropertyChanging
				Me._FinanciacionPorciento = value
				Me.SendPropertyChanged("FinanciacionPorciento")
				Me.OnFinanciacionPorcientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinanciacionCantidad", DbType:="Float")>  _
	Public Property FinanciacionCantidad() As System.Nullable(Of Double)
		Get
			Return Me._FinanciacionCantidad
		End Get
		Set
			If (Me._FinanciacionCantidad.Equals(value) = false) Then
				Me.OnFinanciacionCantidadChanging(value)
				Me.SendPropertyChanging
				Me._FinanciacionCantidad = value
				Me.SendPropertyChanged("FinanciacionCantidad")
				Me.OnFinanciacionCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImporteNeto", DbType:="Float")>  _
	Public Property ImporteNeto() As System.Nullable(Of Double)
		Get
			Return Me._ImporteNeto
		End Get
		Set
			If (Me._ImporteNeto.Equals(value) = false) Then
				Me.OnImporteNetoChanging(value)
				Me.SendPropertyChanging
				Me._ImporteNeto = value
				Me.SendPropertyChanged("ImporteNeto")
				Me.OnImporteNetoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubTotal", DbType:="Float")>  _
	Public Property SubTotal() As System.Nullable(Of Double)
		Get
			Return Me._SubTotal
		End Get
		Set
			If (Me._SubTotal.Equals(value) = false) Then
				Me.OnSubTotalChanging(value)
				Me.SendPropertyChanging
				Me._SubTotal = value
				Me.SendPropertyChanged("SubTotal")
				Me.OnSubTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IVAPorciento", DbType:="Float")>  _
	Public Property IVAPorciento() As System.Nullable(Of Double)
		Get
			Return Me._IVAPorciento
		End Get
		Set
			If (Me._IVAPorciento.Equals(value) = false) Then
				Me.OnIVAPorcientoChanging(value)
				Me.SendPropertyChanging
				Me._IVAPorciento = value
				Me.SendPropertyChanged("IVAPorciento")
				Me.OnIVAPorcientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IVACantidad", DbType:="Float")>  _
	Public Property IVACantidad() As System.Nullable(Of Double)
		Get
			Return Me._IVACantidad
		End Get
		Set
			If (Me._IVACantidad.Equals(value) = false) Then
				Me.OnIVACantidadChanging(value)
				Me.SendPropertyChanging
				Me._IVACantidad = value
				Me.SendPropertyChanged("IVACantidad")
				Me.OnIVACantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REPorciento", DbType:="Float")>  _
	Public Property REPorciento() As System.Nullable(Of Double)
		Get
			Return Me._REPorciento
		End Get
		Set
			If (Me._REPorciento.Equals(value) = false) Then
				Me.OnREPorcientoChanging(value)
				Me.SendPropertyChanging
				Me._REPorciento = value
				Me.SendPropertyChanged("REPorciento")
				Me.OnREPorcientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RECantidad", DbType:="Float")>  _
	Public Property RECantidad() As System.Nullable(Of Double)
		Get
			Return Me._RECantidad
		End Get
		Set
			If (Me._RECantidad.Equals(value) = false) Then
				Me.OnRECantidadChanging(value)
				Me.SendPropertyChanging
				Me._RECantidad = value
				Me.SendPropertyChanged("RECantidad")
				Me.OnRECantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_PedidosProveedor_N_PedidosProveedor_Totale", Storage:="_N_PedidosProveedor", ThisKey:="ID_PedidoProveedor", OtherKey:="ID_PedidoProveedor", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property N_PedidosProveedor() As N_PedidosProveedor
		Get
			Return Me._N_PedidosProveedor.Entity
		End Get
		Set
			Dim previousValue As N_PedidosProveedor = Me._N_PedidosProveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_PedidosProveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_PedidosProveedor.Entity = Nothing
					previousValue.N_PedidosProveedor_Totales.Remove(Me)
				End If
				Me._N_PedidosProveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_PedidosProveedor_Totales.Add(Me)
					Me._ID_PedidoProveedor = value.ID_PedidoProveedor
				Else
					Me._ID_PedidoProveedor = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("N_PedidosProveedor")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_TipoIVA_N_PedidosProveedor_Totale", Storage:="_N_TipoIVA", ThisKey:="ID_TipoIVA", OtherKey:="ID_TipoIVA", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property N_TipoIVA() As N_TipoIVA
		Get
			Return Me._N_TipoIVA.Entity
		End Get
		Set
			Dim previousValue As N_TipoIVA = Me._N_TipoIVA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_TipoIVA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_TipoIVA.Entity = Nothing
					previousValue.N_PedidosProveedor_Totales.Remove(Me)
				End If
				Me._N_TipoIVA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_PedidosProveedor_Totales.Add(Me)
					Me._ID_TipoIVA = value.ID_TipoIVA
				Else
					Me._ID_TipoIVA = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("N_TipoIVA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_PedidosProveedor_Lineas")>  _
Partial Public Class N_PedidosProveedor_Linea
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_PedidoProveedorLineas As Long
	
	Private _ID_PedidoProveedor As Long
	
	Private _Codigo As String
	
	Private _ID_Articulo As System.Nullable(Of Long)
	
	Private _Descripcion As String
	
	Private _Cantidad As System.Nullable(Of Double)
	
	Private _Precio As System.Nullable(Of Double)
	
	Private _Descuento1 As System.Nullable(Of Double)
	
	Private _Descuento2 As System.Nullable(Of Double)
	
	Private _Descuento3 As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _ID_TipoIVA As System.Nullable(Of Integer)
	
	Private _IVAIncluido As Boolean
	
	Private _Costo As System.Nullable(Of Double)
	
	Private _Imagen As System.Data.Linq.Binary
	
	Private _Observaciones As String
	
	Private _ID_Almacen As System.Nullable(Of Integer)
	
	Private _Validado As System.Nullable(Of Boolean)
	
	Private _Pendiente As System.Nullable(Of Long)
	
	Private _N_PedidosProveedor As EntityRef(Of N_PedidosProveedor)
	
	Private _N_TipoIVA As EntityRef(Of N_TipoIVA)
	
	Private _N_Almacen As EntityRef(Of N_Almacen)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PedidoProveedorLineasChanging(value As Long)
    End Sub
    Partial Private Sub OnID_PedidoProveedorLineasChanged()
    End Sub
    Partial Private Sub OnID_PedidoProveedorChanging(value As Long)
    End Sub
    Partial Private Sub OnID_PedidoProveedorChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnID_ArticuloChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnID_ArticuloChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnCantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCantidadChanged()
    End Sub
    Partial Private Sub OnPrecioChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPrecioChanged()
    End Sub
    Partial Private Sub OnDescuento1Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuento1Changed()
    End Sub
    Partial Private Sub OnDescuento2Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuento2Changed()
    End Sub
    Partial Private Sub OnDescuento3Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuento3Changed()
    End Sub
    Partial Private Sub OnTotalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnID_TipoIVAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_TipoIVAChanged()
    End Sub
    Partial Private Sub OnIVAIncluidoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIVAIncluidoChanged()
    End Sub
    Partial Private Sub OnCostoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCostoChanged()
    End Sub
    Partial Private Sub OnImagenChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImagenChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnID_AlmacenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_AlmacenChanged()
    End Sub
    Partial Private Sub OnValidadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnValidadoChanged()
    End Sub
    Partial Private Sub OnPendienteChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnPendienteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_PedidosProveedor = CType(Nothing, EntityRef(Of N_PedidosProveedor))
		Me._N_TipoIVA = CType(Nothing, EntityRef(Of N_TipoIVA))
		Me._N_Almacen = CType(Nothing, EntityRef(Of N_Almacen))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PedidoProveedorLineas", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_PedidoProveedorLineas() As Long
		Get
			Return Me._ID_PedidoProveedorLineas
		End Get
		Set
			If ((Me._ID_PedidoProveedorLineas = value)  _
						= false) Then
				Me.OnID_PedidoProveedorLineasChanging(value)
				Me.SendPropertyChanging
				Me._ID_PedidoProveedorLineas = value
				Me.SendPropertyChanged("ID_PedidoProveedorLineas")
				Me.OnID_PedidoProveedorLineasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PedidoProveedor", DbType:="BigInt NOT NULL")>  _
	Public Property ID_PedidoProveedor() As Long
		Get
			Return Me._ID_PedidoProveedor
		End Get
		Set
			If ((Me._ID_PedidoProveedor = value)  _
						= false) Then
				If Me._N_PedidosProveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PedidoProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_PedidoProveedor = value
				Me.SendPropertyChanged("ID_PedidoProveedor")
				Me.OnID_PedidoProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(50)")>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Articulo", DbType:="BigInt")>  _
	Public Property ID_Articulo() As System.Nullable(Of Long)
		Get
			Return Me._ID_Articulo
		End Get
		Set
			If (Me._ID_Articulo.Equals(value) = false) Then
				Me.OnID_ArticuloChanging(value)
				Me.SendPropertyChanging
				Me._ID_Articulo = value
				Me.SendPropertyChanged("ID_Articulo")
				Me.OnID_ArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Float")>  _
	Public Property Cantidad() As System.Nullable(Of Double)
		Get
			Return Me._Cantidad
		End Get
		Set
			If (Me._Cantidad.Equals(value) = false) Then
				Me.OnCantidadChanging(value)
				Me.SendPropertyChanging
				Me._Cantidad = value
				Me.SendPropertyChanged("Cantidad")
				Me.OnCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio", DbType:="Float")>  _
	Public Property Precio() As System.Nullable(Of Double)
		Get
			Return Me._Precio
		End Get
		Set
			If (Me._Precio.Equals(value) = false) Then
				Me.OnPrecioChanging(value)
				Me.SendPropertyChanging
				Me._Precio = value
				Me.SendPropertyChanged("Precio")
				Me.OnPrecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento1", DbType:="Float")>  _
	Public Property Descuento1() As System.Nullable(Of Double)
		Get
			Return Me._Descuento1
		End Get
		Set
			If (Me._Descuento1.Equals(value) = false) Then
				Me.OnDescuento1Changing(value)
				Me.SendPropertyChanging
				Me._Descuento1 = value
				Me.SendPropertyChanged("Descuento1")
				Me.OnDescuento1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento2", DbType:="Float")>  _
	Public Property Descuento2() As System.Nullable(Of Double)
		Get
			Return Me._Descuento2
		End Get
		Set
			If (Me._Descuento2.Equals(value) = false) Then
				Me.OnDescuento2Changing(value)
				Me.SendPropertyChanging
				Me._Descuento2 = value
				Me.SendPropertyChanged("Descuento2")
				Me.OnDescuento2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento3", DbType:="Float")>  _
	Public Property Descuento3() As System.Nullable(Of Double)
		Get
			Return Me._Descuento3
		End Get
		Set
			If (Me._Descuento3.Equals(value) = false) Then
				Me.OnDescuento3Changing(value)
				Me.SendPropertyChanging
				Me._Descuento3 = value
				Me.SendPropertyChanged("Descuento3")
				Me.OnDescuento3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoIVA", DbType:="Int")>  _
	Public Property ID_TipoIVA() As System.Nullable(Of Integer)
		Get
			Return Me._ID_TipoIVA
		End Get
		Set
			If (Me._ID_TipoIVA.Equals(value) = false) Then
				If Me._N_TipoIVA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_TipoIVAChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoIVA = value
				Me.SendPropertyChanged("ID_TipoIVA")
				Me.OnID_TipoIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IVAIncluido", DbType:="Bit NOT NULL")>  _
	Public Property IVAIncluido() As Boolean
		Get
			Return Me._IVAIncluido
		End Get
		Set
			If ((Me._IVAIncluido = value)  _
						= false) Then
				Me.OnIVAIncluidoChanging(value)
				Me.SendPropertyChanging
				Me._IVAIncluido = value
				Me.SendPropertyChanged("IVAIncluido")
				Me.OnIVAIncluidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Costo", DbType:="Float")>  _
	Public Property Costo() As System.Nullable(Of Double)
		Get
			Return Me._Costo
		End Get
		Set
			If (Me._Costo.Equals(value) = false) Then
				Me.OnCostoChanging(value)
				Me.SendPropertyChanging
				Me._Costo = value
				Me.SendPropertyChanged("Costo")
				Me.OnCostoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Imagen", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Imagen() As System.Data.Linq.Binary
		Get
			Return Me._Imagen
		End Get
		Set
			If (Object.Equals(Me._Imagen, value) = false) Then
				Me.OnImagenChanging(value)
				Me.SendPropertyChanging
				Me._Imagen = value
				Me.SendPropertyChanged("Imagen")
				Me.OnImagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Almacen", DbType:="Int")>  _
	Public Property ID_Almacen() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Almacen
		End Get
		Set
			If (Me._ID_Almacen.Equals(value) = false) Then
				If Me._N_Almacen.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AlmacenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Almacen = value
				Me.SendPropertyChanged("ID_Almacen")
				Me.OnID_AlmacenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validado", DbType:="Bit")>  _
	Public Property Validado() As System.Nullable(Of Boolean)
		Get
			Return Me._Validado
		End Get
		Set
			If (Me._Validado.Equals(value) = false) Then
				Me.OnValidadoChanging(value)
				Me.SendPropertyChanging
				Me._Validado = value
				Me.SendPropertyChanged("Validado")
				Me.OnValidadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pendiente", DbType:="BigInt")>  _
	Public Property Pendiente() As System.Nullable(Of Long)
		Get
			Return Me._Pendiente
		End Get
		Set
			If (Me._Pendiente.Equals(value) = false) Then
				Me.OnPendienteChanging(value)
				Me.SendPropertyChanging
				Me._Pendiente = value
				Me.SendPropertyChanged("Pendiente")
				Me.OnPendienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_PedidosProveedor_N_PedidosProveedor_Linea", Storage:="_N_PedidosProveedor", ThisKey:="ID_PedidoProveedor", OtherKey:="ID_PedidoProveedor", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property N_PedidosProveedor() As N_PedidosProveedor
		Get
			Return Me._N_PedidosProveedor.Entity
		End Get
		Set
			Dim previousValue As N_PedidosProveedor = Me._N_PedidosProveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_PedidosProveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_PedidosProveedor.Entity = Nothing
					previousValue.N_PedidosProveedor_Lineas.Remove(Me)
				End If
				Me._N_PedidosProveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_PedidosProveedor_Lineas.Add(Me)
					Me._ID_PedidoProveedor = value.ID_PedidoProveedor
				Else
					Me._ID_PedidoProveedor = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("N_PedidosProveedor")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_TipoIVA_N_PedidosProveedor_Linea", Storage:="_N_TipoIVA", ThisKey:="ID_TipoIVA", OtherKey:="ID_TipoIVA", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property N_TipoIVA() As N_TipoIVA
		Get
			Return Me._N_TipoIVA.Entity
		End Get
		Set
			Dim previousValue As N_TipoIVA = Me._N_TipoIVA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_TipoIVA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_TipoIVA.Entity = Nothing
					previousValue.N_PedidosProveedor_Lineas.Remove(Me)
				End If
				Me._N_TipoIVA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_PedidosProveedor_Lineas.Add(Me)
					Me._ID_TipoIVA = value.ID_TipoIVA
				Else
					Me._ID_TipoIVA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("N_TipoIVA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Almacen_N_PedidosProveedor_Linea", Storage:="_N_Almacen", ThisKey:="ID_Almacen", OtherKey:="ID_Almacen", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property N_Almacen() As N_Almacen
		Get
			Return Me._N_Almacen.Entity
		End Get
		Set
			Dim previousValue As N_Almacen = Me._N_Almacen.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_Almacen.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_Almacen.Entity = Nothing
					previousValue.N_PedidosProveedor_Lineas.Remove(Me)
				End If
				Me._N_Almacen.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_PedidosProveedor_Lineas.Add(Me)
					Me._ID_Almacen = value.ID_Almacen
				Else
					Me._ID_Almacen = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("N_Almacen")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_PedidosProveedor_Tipos")>  _
Partial Public Class N_PedidosProveedor_Tipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_TipoPedidoProveedor As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _N_PedidosProveedors As EntitySet(Of N_PedidosProveedor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_TipoPedidoProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_TipoPedidoProveedorChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_PedidosProveedors = New EntitySet(Of N_PedidosProveedor)(AddressOf Me.attach_N_PedidosProveedors, AddressOf Me.detach_N_PedidosProveedors)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoPedidoProveedor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_TipoPedidoProveedor() As Integer
		Get
			Return Me._ID_TipoPedidoProveedor
		End Get
		Set
			If ((Me._ID_TipoPedidoProveedor = value)  _
						= false) Then
				Me.OnID_TipoPedidoProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoPedidoProveedor = value
				Me.SendPropertyChanged("ID_TipoPedidoProveedor")
				Me.OnID_TipoPedidoProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(50)")>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_PedidosProveedor_Tipo_N_PedidosProveedor", Storage:="_N_PedidosProveedors", ThisKey:="ID_TipoPedidoProveedor", OtherKey:="ID_TipoPedidoProveedor")>  _
	Public Property N_PedidosProveedors() As EntitySet(Of N_PedidosProveedor)
		Get
			Return Me._N_PedidosProveedors
		End Get
		Set
			Me._N_PedidosProveedors.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_N_PedidosProveedors(ByVal entity As N_PedidosProveedor)
		Me.SendPropertyChanging
		entity.N_PedidosProveedor_Tipo = Me
	End Sub
	
	Private Sub detach_N_PedidosProveedors(ByVal entity As N_PedidosProveedor)
		Me.SendPropertyChanging
		entity.N_PedidosProveedor_Tipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_Poblaciones")>  _
Partial Public Class N_Poblacione
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Poblacion As Integer
	
	Private _Nombre As String
	
	Private _ID_Provincia As Integer
	
	Private _N_Provincia As EntityRef(Of N_Provincia)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PoblacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PoblacionChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnID_ProvinciaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProvinciaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_Provincia = CType(Nothing, EntityRef(Of N_Provincia))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Poblacion", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_Poblacion() As Integer
		Get
			Return Me._ID_Poblacion
		End Get
		Set
			If ((Me._ID_Poblacion = value)  _
						= false) Then
				Me.OnID_PoblacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Poblacion = value
				Me.SendPropertyChanged("ID_Poblacion")
				Me.OnID_PoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(50)")>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Provincia", DbType:="Int NOT NULL")>  _
	Public Property ID_Provincia() As Integer
		Get
			Return Me._ID_Provincia
		End Get
		Set
			If ((Me._ID_Provincia = value)  _
						= false) Then
				If Me._N_Provincia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Provincia = value
				Me.SendPropertyChanged("ID_Provincia")
				Me.OnID_ProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Provincia_N_Poblacione", Storage:="_N_Provincia", ThisKey:="ID_Provincia", OtherKey:="ID_Provincias", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property N_Provincia() As N_Provincia
		Get
			Return Me._N_Provincia.Entity
		End Get
		Set
			Dim previousValue As N_Provincia = Me._N_Provincia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_Provincia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_Provincia.Entity = Nothing
					previousValue.N_Poblaciones.Remove(Me)
				End If
				Me._N_Provincia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Poblaciones.Add(Me)
					Me._ID_Provincia = value.ID_Provincias
				Else
					Me._ID_Provincia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("N_Provincia")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_Procesos")>  _
Partial Public Class N_Proceso
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Proceso As Long
	
	Private _ID_Paciente As Integer
	
	Private _FechaInicio As Date
	
	Private _FechaFinal As System.Nullable(Of Date)
	
	Private _Finalizado As Boolean
	
	Private _ID_Empresa As System.Nullable(Of Integer)
	
	Private _ID_Mutua As System.Nullable(Of Integer)
	
	Private _ID_UsuarioCreador As System.Nullable(Of Integer)
	
	Private _FACTURAs As EntitySet(Of FACTURA)
	
	Private _N_Partes As EntitySet(Of N_Parte)
	
	Private _N_Partes_Asistencias As EntitySet(Of N_Partes_Asistencia)
	
	Private _CITAs As EntitySet(Of CITA)
	
	Private _EMPRESA As EntityRef(Of EMPRESA)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
	Private _MUTUA As EntityRef(Of MUTUA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ProcesoChanging(value As Long)
    End Sub
    Partial Private Sub OnID_ProcesoChanged()
    End Sub
    Partial Private Sub OnID_PacienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PacienteChanged()
    End Sub
    Partial Private Sub OnFechaInicioChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaInicioChanged()
    End Sub
    Partial Private Sub OnFechaFinalChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaFinalChanged()
    End Sub
    Partial Private Sub OnFinalizadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFinalizadoChanged()
    End Sub
    Partial Private Sub OnID_EmpresaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_EmpresaChanged()
    End Sub
    Partial Private Sub OnID_MutuaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_MutuaChanged()
    End Sub
    Partial Private Sub OnID_UsuarioCreadorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_UsuarioCreadorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FACTURAs = New EntitySet(Of FACTURA)(AddressOf Me.attach_FACTURAs, AddressOf Me.detach_FACTURAs)
		Me._N_Partes = New EntitySet(Of N_Parte)(AddressOf Me.attach_N_Partes, AddressOf Me.detach_N_Partes)
		Me._N_Partes_Asistencias = New EntitySet(Of N_Partes_Asistencia)(AddressOf Me.attach_N_Partes_Asistencias, AddressOf Me.detach_N_Partes_Asistencias)
		Me._CITAs = New EntitySet(Of CITA)(AddressOf Me.attach_CITAs, AddressOf Me.detach_CITAs)
		Me._EMPRESA = CType(Nothing, EntityRef(Of EMPRESA))
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		Me._MUTUA = CType(Nothing, EntityRef(Of MUTUA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proceso", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Proceso() As Long
		Get
			Return Me._ID_Proceso
		End Get
		Set
			If ((Me._ID_Proceso = value)  _
						= false) Then
				Me.OnID_ProcesoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proceso = value
				Me.SendPropertyChanged("ID_Proceso")
				Me.OnID_ProcesoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Paciente", DbType:="Int NOT NULL")>  _
	Public Property ID_Paciente() As Integer
		Get
			Return Me._ID_Paciente
		End Get
		Set
			If ((Me._ID_Paciente = value)  _
						= false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PacienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Paciente = value
				Me.SendPropertyChanged("ID_Paciente")
				Me.OnID_PacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaInicio", DbType:="DateTime NOT NULL")>  _
	Public Property FechaInicio() As Date
		Get
			Return Me._FechaInicio
		End Get
		Set
			If ((Me._FechaInicio = value)  _
						= false) Then
				Me.OnFechaInicioChanging(value)
				Me.SendPropertyChanging
				Me._FechaInicio = value
				Me.SendPropertyChanged("FechaInicio")
				Me.OnFechaInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaFinal", DbType:="DateTime")>  _
	Public Property FechaFinal() As System.Nullable(Of Date)
		Get
			Return Me._FechaFinal
		End Get
		Set
			If (Me._FechaFinal.Equals(value) = false) Then
				Me.OnFechaFinalChanging(value)
				Me.SendPropertyChanging
				Me._FechaFinal = value
				Me.SendPropertyChanged("FechaFinal")
				Me.OnFechaFinalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Finalizado", DbType:="Bit NOT NULL")>  _
	Public Property Finalizado() As Boolean
		Get
			Return Me._Finalizado
		End Get
		Set
			If ((Me._Finalizado = value)  _
						= false) Then
				Me.OnFinalizadoChanging(value)
				Me.SendPropertyChanging
				Me._Finalizado = value
				Me.SendPropertyChanged("Finalizado")
				Me.OnFinalizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa", DbType:="Int")>  _
	Public Property ID_Empresa() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Empresa
		End Get
		Set
			If (Me._ID_Empresa.Equals(value) = false) Then
				If Me._EMPRESA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa = value
				Me.SendPropertyChanged("ID_Empresa")
				Me.OnID_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Mutua", DbType:="Int")>  _
	Public Property ID_Mutua() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Mutua
		End Get
		Set
			If (Me._ID_Mutua.Equals(value) = false) Then
				If Me._MUTUA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_MutuaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Mutua = value
				Me.SendPropertyChanged("ID_Mutua")
				Me.OnID_MutuaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_UsuarioCreador", DbType:="Int")>  _
	Public Property ID_UsuarioCreador() As System.Nullable(Of Integer)
		Get
			Return Me._ID_UsuarioCreador
		End Get
		Set
			If (Me._ID_UsuarioCreador.Equals(value) = false) Then
				Me.OnID_UsuarioCreadorChanging(value)
				Me.SendPropertyChanging
				Me._ID_UsuarioCreador = value
				Me.SendPropertyChanged("ID_UsuarioCreador")
				Me.OnID_UsuarioCreadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Proceso_FACTURA", Storage:="_FACTURAs", ThisKey:="ID_Proceso", OtherKey:="ID_Proceso")>  _
	Public Property FACTURAs() As EntitySet(Of FACTURA)
		Get
			Return Me._FACTURAs
		End Get
		Set
			Me._FACTURAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Proceso_N_Parte", Storage:="_N_Partes", ThisKey:="ID_Proceso", OtherKey:="ID_Proceso")>  _
	Public Property N_Partes() As EntitySet(Of N_Parte)
		Get
			Return Me._N_Partes
		End Get
		Set
			Me._N_Partes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Proceso_N_Partes_Asistencia", Storage:="_N_Partes_Asistencias", ThisKey:="ID_Proceso", OtherKey:="ID_Proceso")>  _
	Public Property N_Partes_Asistencias() As EntitySet(Of N_Partes_Asistencia)
		Get
			Return Me._N_Partes_Asistencias
		End Get
		Set
			Me._N_Partes_Asistencias.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Proceso_CITA", Storage:="_CITAs", ThisKey:="ID_Proceso", OtherKey:="ID_Proceso")>  _
	Public Property CITAs() As EntitySet(Of CITA)
		Get
			Return Me._CITAs
		End Get
		Set
			Me._CITAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_N_Proceso", Storage:="_EMPRESA", ThisKey:="ID_Empresa", OtherKey:="CEMPRESA", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property EMPRESA() As EMPRESA
		Get
			Return Me._EMPRESA.Entity
		End Get
		Set
			Dim previousValue As EMPRESA = Me._EMPRESA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EMPRESA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EMPRESA.Entity = Nothing
					previousValue.N_Procesos.Remove(Me)
				End If
				Me._EMPRESA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Procesos.Add(Me)
					Me._ID_Empresa = value.CEMPRESA
				Else
					Me._ID_Empresa = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("EMPRESA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_N_Proceso", Storage:="_PACIENTE", ThisKey:="ID_Paciente", OtherKey:="CPACIENTE", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.N_Procesos.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Procesos.Add(Me)
					Me._ID_Paciente = value.CPACIENTE
				Else
					Me._ID_Paciente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MUTUA_N_Proceso", Storage:="_MUTUA", ThisKey:="ID_Mutua", OtherKey:="CMUTUA", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property MUTUA() As MUTUA
		Get
			Return Me._MUTUA.Entity
		End Get
		Set
			Dim previousValue As MUTUA = Me._MUTUA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MUTUA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MUTUA.Entity = Nothing
					previousValue.N_Procesos.Remove(Me)
				End If
				Me._MUTUA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Procesos.Add(Me)
					Me._ID_Mutua = value.CMUTUA
				Else
					Me._ID_Mutua = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MUTUA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FACTURAs(ByVal entity As FACTURA)
		Me.SendPropertyChanging
		entity.N_Proceso = Me
	End Sub
	
	Private Sub detach_FACTURAs(ByVal entity As FACTURA)
		Me.SendPropertyChanging
		entity.N_Proceso = Nothing
	End Sub
	
	Private Sub attach_N_Partes(ByVal entity As N_Parte)
		Me.SendPropertyChanging
		entity.N_Proceso = Me
	End Sub
	
	Private Sub detach_N_Partes(ByVal entity As N_Parte)
		Me.SendPropertyChanging
		entity.N_Proceso = Nothing
	End Sub
	
	Private Sub attach_N_Partes_Asistencias(ByVal entity As N_Partes_Asistencia)
		Me.SendPropertyChanging
		entity.N_Proceso = Me
	End Sub
	
	Private Sub detach_N_Partes_Asistencias(ByVal entity As N_Partes_Asistencia)
		Me.SendPropertyChanging
		entity.N_Proceso = Nothing
	End Sub
	
	Private Sub attach_CITAs(ByVal entity As CITA)
		Me.SendPropertyChanging
		entity.N_Proceso = Me
	End Sub
	
	Private Sub detach_CITAs(ByVal entity As CITA)
		Me.SendPropertyChanging
		entity.N_Proceso = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_Proveedores")>  _
Partial Public Class N_Proveedor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Proveedor As Integer
	
	Private _Codigo As String
	
	Private _CodigoContabilidad As System.Nullable(Of Integer)
	
	Private _TipoProveedor As Integer
	
	Private _NIF As String
	
	Private _NombreFiscal As String
	
	Private _NombreComercial As String
	
	Private _Domicilio As String
	
	Private _ID_Poblacion As System.Nullable(Of Integer)
	
	Private _CodigoPostal As String
	
	Private _Telefono As String
	
	Private _Fax As String
	
	Private _Movil As String
	
	Private _ID_Banco As System.Nullable(Of Integer)
	
	Private _CCC As String
	
	Private _ID_FormaPago As String
	
	Private _DiasPago1 As System.Nullable(Of Integer)
	
	Private _DiasPago2 As System.Nullable(Of Integer)
	
	Private _DiasPago3 As System.Nullable(Of Integer)
	
	Private _AprovisionamientoMeses As System.Nullable(Of Integer)
	
	Private _AprovisionamientoDias As System.Nullable(Of Integer)
	
	Private _TarifaEnActivo As String
	
	Private _DescuentoFijo1 As System.Nullable(Of Double)
	
	Private _DescuentoFijo2 As System.Nullable(Of Double)
	
	Private _DescuentoFijo3 As System.Nullable(Of Double)
	
	Private _PorcentajeRetension As System.Nullable(Of Double)
	
	Private _TipoPorte As System.Nullable(Of Integer)
	
	Private _Porte As String
	
	Private _RappelFijo As System.Nullable(Of Double)
	
	Private _PagoRapels As String
	
	Private _FechaAlta As System.Nullable(Of Date)
	
	Private _Web As String
	
	Private _Email As String
	
	Private _Observaciones As String
	
	Private _Horario As String
	
	Private _VacacionesDesde As String
	
	Private _VacacionesHasta As String
	
	Private _NoVenderArticulos As System.Nullable(Of Boolean)
	
	Private _NoRealizarPagos As System.Nullable(Of Boolean)
	
	Private _NoImprimir As System.Nullable(Of Boolean)
	
	Private _TipoIVA As System.Nullable(Of Integer)
	
	Private _RE As System.Nullable(Of Boolean)
	
	Private _N_Articulos As EntitySet(Of N_Articulo)
	
	Private _N_PedidosProveedors As EntitySet(Of N_PedidosProveedor)
	
	Private _FORMASPAGO As EntityRef(Of FORMASPAGO)
	
	Private _BANCO As EntityRef(Of BANCO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnCodigoContabilidadChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCodigoContabilidadChanged()
    End Sub
    Partial Private Sub OnTipoProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnTipoProveedorChanged()
    End Sub
    Partial Private Sub OnNIFChanging(value As String)
    End Sub
    Partial Private Sub OnNIFChanged()
    End Sub
    Partial Private Sub OnNombreFiscalChanging(value As String)
    End Sub
    Partial Private Sub OnNombreFiscalChanged()
    End Sub
    Partial Private Sub OnNombreComercialChanging(value As String)
    End Sub
    Partial Private Sub OnNombreComercialChanged()
    End Sub
    Partial Private Sub OnDomicilioChanging(value As String)
    End Sub
    Partial Private Sub OnDomicilioChanged()
    End Sub
    Partial Private Sub OnID_PoblacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PoblacionChanged()
    End Sub
    Partial Private Sub OnCodigoPostalChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoPostalChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnFaxChanging(value As String)
    End Sub
    Partial Private Sub OnFaxChanged()
    End Sub
    Partial Private Sub OnMovilChanging(value As String)
    End Sub
    Partial Private Sub OnMovilChanged()
    End Sub
    Partial Private Sub OnID_BancoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_BancoChanged()
    End Sub
    Partial Private Sub OnCCCChanging(value As String)
    End Sub
    Partial Private Sub OnCCCChanged()
    End Sub
    Partial Private Sub OnID_FormaPagoChanging(value As String)
    End Sub
    Partial Private Sub OnID_FormaPagoChanged()
    End Sub
    Partial Private Sub OnDiasPago1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDiasPago1Changed()
    End Sub
    Partial Private Sub OnDiasPago2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDiasPago2Changed()
    End Sub
    Partial Private Sub OnDiasPago3Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDiasPago3Changed()
    End Sub
    Partial Private Sub OnAprovisionamientoMesesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAprovisionamientoMesesChanged()
    End Sub
    Partial Private Sub OnAprovisionamientoDiasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAprovisionamientoDiasChanged()
    End Sub
    Partial Private Sub OnTarifaEnActivoChanging(value As String)
    End Sub
    Partial Private Sub OnTarifaEnActivoChanged()
    End Sub
    Partial Private Sub OnDescuentoFijo1Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuentoFijo1Changed()
    End Sub
    Partial Private Sub OnDescuentoFijo2Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuentoFijo2Changed()
    End Sub
    Partial Private Sub OnDescuentoFijo3Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuentoFijo3Changed()
    End Sub
    Partial Private Sub OnPorcentajeRetensionChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPorcentajeRetensionChanged()
    End Sub
    Partial Private Sub OnTipoPorteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTipoPorteChanged()
    End Sub
    Partial Private Sub OnPorteChanging(value As String)
    End Sub
    Partial Private Sub OnPorteChanged()
    End Sub
    Partial Private Sub OnRappelFijoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRappelFijoChanged()
    End Sub
    Partial Private Sub OnPagoRapelsChanging(value As String)
    End Sub
    Partial Private Sub OnPagoRapelsChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnWebChanging(value As String)
    End Sub
    Partial Private Sub OnWebChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnHorarioChanging(value As String)
    End Sub
    Partial Private Sub OnHorarioChanged()
    End Sub
    Partial Private Sub OnVacacionesDesdeChanging(value As String)
    End Sub
    Partial Private Sub OnVacacionesDesdeChanged()
    End Sub
    Partial Private Sub OnVacacionesHastaChanging(value As String)
    End Sub
    Partial Private Sub OnVacacionesHastaChanged()
    End Sub
    Partial Private Sub OnNoVenderArticulosChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNoVenderArticulosChanged()
    End Sub
    Partial Private Sub OnNoRealizarPagosChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNoRealizarPagosChanged()
    End Sub
    Partial Private Sub OnNoImprimirChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNoImprimirChanged()
    End Sub
    Partial Private Sub OnTipoIVAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTipoIVAChanged()
    End Sub
    Partial Private Sub OnREChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnREChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_Articulos = New EntitySet(Of N_Articulo)(AddressOf Me.attach_N_Articulos, AddressOf Me.detach_N_Articulos)
		Me._N_PedidosProveedors = New EntitySet(Of N_PedidosProveedor)(AddressOf Me.attach_N_PedidosProveedors, AddressOf Me.detach_N_PedidosProveedors)
		Me._FORMASPAGO = CType(Nothing, EntityRef(Of FORMASPAGO))
		Me._BANCO = CType(Nothing, EntityRef(Of BANCO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Proveedor() As Integer
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If ((Me._ID_Proveedor = value)  _
						= false) Then
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoContabilidad", DbType:="Int")>  _
	Public Property CodigoContabilidad() As System.Nullable(Of Integer)
		Get
			Return Me._CodigoContabilidad
		End Get
		Set
			If (Me._CodigoContabilidad.Equals(value) = false) Then
				Me.OnCodigoContabilidadChanging(value)
				Me.SendPropertyChanging
				Me._CodigoContabilidad = value
				Me.SendPropertyChanged("CodigoContabilidad")
				Me.OnCodigoContabilidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoProveedor", DbType:="Int NOT NULL")>  _
	Public Property TipoProveedor() As Integer
		Get
			Return Me._TipoProveedor
		End Get
		Set
			If ((Me._TipoProveedor = value)  _
						= false) Then
				Me.OnTipoProveedorChanging(value)
				Me.SendPropertyChanging
				Me._TipoProveedor = value
				Me.SendPropertyChanged("TipoProveedor")
				Me.OnTipoProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NIF", DbType:="NVarChar(20)")>  _
	Public Property NIF() As String
		Get
			Return Me._NIF
		End Get
		Set
			If (String.Equals(Me._NIF, value) = false) Then
				Me.OnNIFChanging(value)
				Me.SendPropertyChanging
				Me._NIF = value
				Me.SendPropertyChanged("NIF")
				Me.OnNIFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreFiscal", DbType:="NVarChar(50)")>  _
	Public Property NombreFiscal() As String
		Get
			Return Me._NombreFiscal
		End Get
		Set
			If (String.Equals(Me._NombreFiscal, value) = false) Then
				Me.OnNombreFiscalChanging(value)
				Me.SendPropertyChanging
				Me._NombreFiscal = value
				Me.SendPropertyChanged("NombreFiscal")
				Me.OnNombreFiscalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreComercial", DbType:="NVarChar(50)")>  _
	Public Property NombreComercial() As String
		Get
			Return Me._NombreComercial
		End Get
		Set
			If (String.Equals(Me._NombreComercial, value) = false) Then
				Me.OnNombreComercialChanging(value)
				Me.SendPropertyChanging
				Me._NombreComercial = value
				Me.SendPropertyChanged("NombreComercial")
				Me.OnNombreComercialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Domicilio", DbType:="NVarChar(50)")>  _
	Public Property Domicilio() As String
		Get
			Return Me._Domicilio
		End Get
		Set
			If (String.Equals(Me._Domicilio, value) = false) Then
				Me.OnDomicilioChanging(value)
				Me.SendPropertyChanging
				Me._Domicilio = value
				Me.SendPropertyChanged("Domicilio")
				Me.OnDomicilioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Poblacion", DbType:="Int")>  _
	Public Property ID_Poblacion() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Poblacion
		End Get
		Set
			If (Me._ID_Poblacion.Equals(value) = false) Then
				Me.OnID_PoblacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Poblacion = value
				Me.SendPropertyChanged("ID_Poblacion")
				Me.OnID_PoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoPostal", DbType:="NVarChar(20)")>  _
	Public Property CodigoPostal() As String
		Get
			Return Me._CodigoPostal
		End Get
		Set
			If (String.Equals(Me._CodigoPostal, value) = false) Then
				Me.OnCodigoPostalChanging(value)
				Me.SendPropertyChanging
				Me._CodigoPostal = value
				Me.SendPropertyChanged("CodigoPostal")
				Me.OnCodigoPostalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(20)")>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="NVarChar(20)")>  _
	Public Property Fax() As String
		Get
			Return Me._Fax
		End Get
		Set
			If (String.Equals(Me._Fax, value) = false) Then
				Me.OnFaxChanging(value)
				Me.SendPropertyChanging
				Me._Fax = value
				Me.SendPropertyChanged("Fax")
				Me.OnFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Movil", DbType:="NVarChar(20)")>  _
	Public Property Movil() As String
		Get
			Return Me._Movil
		End Get
		Set
			If (String.Equals(Me._Movil, value) = false) Then
				Me.OnMovilChanging(value)
				Me.SendPropertyChanging
				Me._Movil = value
				Me.SendPropertyChanged("Movil")
				Me.OnMovilChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Banco", DbType:="Int")>  _
	Public Property ID_Banco() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Banco
		End Get
		Set
			If (Me._ID_Banco.Equals(value) = false) Then
				If Me._BANCO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_BancoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Banco = value
				Me.SendPropertyChanged("ID_Banco")
				Me.OnID_BancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCC", DbType:="NVarChar(50)")>  _
	Public Property CCC() As String
		Get
			Return Me._CCC
		End Get
		Set
			If (String.Equals(Me._CCC, value) = false) Then
				Me.OnCCCChanging(value)
				Me.SendPropertyChanging
				Me._CCC = value
				Me.SendPropertyChanged("CCC")
				Me.OnCCCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormaPago", DbType:="VarChar(10)")>  _
	Public Property ID_FormaPago() As String
		Get
			Return Me._ID_FormaPago
		End Get
		Set
			If (String.Equals(Me._ID_FormaPago, value) = false) Then
				If Me._FORMASPAGO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormaPago = value
				Me.SendPropertyChanged("ID_FormaPago")
				Me.OnID_FormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiasPago1", DbType:="Int")>  _
	Public Property DiasPago1() As System.Nullable(Of Integer)
		Get
			Return Me._DiasPago1
		End Get
		Set
			If (Me._DiasPago1.Equals(value) = false) Then
				Me.OnDiasPago1Changing(value)
				Me.SendPropertyChanging
				Me._DiasPago1 = value
				Me.SendPropertyChanged("DiasPago1")
				Me.OnDiasPago1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiasPago2", DbType:="Int")>  _
	Public Property DiasPago2() As System.Nullable(Of Integer)
		Get
			Return Me._DiasPago2
		End Get
		Set
			If (Me._DiasPago2.Equals(value) = false) Then
				Me.OnDiasPago2Changing(value)
				Me.SendPropertyChanging
				Me._DiasPago2 = value
				Me.SendPropertyChanged("DiasPago2")
				Me.OnDiasPago2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiasPago3", DbType:="Int")>  _
	Public Property DiasPago3() As System.Nullable(Of Integer)
		Get
			Return Me._DiasPago3
		End Get
		Set
			If (Me._DiasPago3.Equals(value) = false) Then
				Me.OnDiasPago3Changing(value)
				Me.SendPropertyChanging
				Me._DiasPago3 = value
				Me.SendPropertyChanged("DiasPago3")
				Me.OnDiasPago3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AprovisionamientoMeses", DbType:="Int")>  _
	Public Property AprovisionamientoMeses() As System.Nullable(Of Integer)
		Get
			Return Me._AprovisionamientoMeses
		End Get
		Set
			If (Me._AprovisionamientoMeses.Equals(value) = false) Then
				Me.OnAprovisionamientoMesesChanging(value)
				Me.SendPropertyChanging
				Me._AprovisionamientoMeses = value
				Me.SendPropertyChanged("AprovisionamientoMeses")
				Me.OnAprovisionamientoMesesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AprovisionamientoDias", DbType:="Int")>  _
	Public Property AprovisionamientoDias() As System.Nullable(Of Integer)
		Get
			Return Me._AprovisionamientoDias
		End Get
		Set
			If (Me._AprovisionamientoDias.Equals(value) = false) Then
				Me.OnAprovisionamientoDiasChanging(value)
				Me.SendPropertyChanging
				Me._AprovisionamientoDias = value
				Me.SendPropertyChanged("AprovisionamientoDias")
				Me.OnAprovisionamientoDiasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TarifaEnActivo", DbType:="NVarChar(50)")>  _
	Public Property TarifaEnActivo() As String
		Get
			Return Me._TarifaEnActivo
		End Get
		Set
			If (String.Equals(Me._TarifaEnActivo, value) = false) Then
				Me.OnTarifaEnActivoChanging(value)
				Me.SendPropertyChanging
				Me._TarifaEnActivo = value
				Me.SendPropertyChanged("TarifaEnActivo")
				Me.OnTarifaEnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescuentoFijo1", DbType:="Float")>  _
	Public Property DescuentoFijo1() As System.Nullable(Of Double)
		Get
			Return Me._DescuentoFijo1
		End Get
		Set
			If (Me._DescuentoFijo1.Equals(value) = false) Then
				Me.OnDescuentoFijo1Changing(value)
				Me.SendPropertyChanging
				Me._DescuentoFijo1 = value
				Me.SendPropertyChanged("DescuentoFijo1")
				Me.OnDescuentoFijo1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescuentoFijo2", DbType:="Float")>  _
	Public Property DescuentoFijo2() As System.Nullable(Of Double)
		Get
			Return Me._DescuentoFijo2
		End Get
		Set
			If (Me._DescuentoFijo2.Equals(value) = false) Then
				Me.OnDescuentoFijo2Changing(value)
				Me.SendPropertyChanging
				Me._DescuentoFijo2 = value
				Me.SendPropertyChanged("DescuentoFijo2")
				Me.OnDescuentoFijo2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescuentoFijo3", DbType:="Float")>  _
	Public Property DescuentoFijo3() As System.Nullable(Of Double)
		Get
			Return Me._DescuentoFijo3
		End Get
		Set
			If (Me._DescuentoFijo3.Equals(value) = false) Then
				Me.OnDescuentoFijo3Changing(value)
				Me.SendPropertyChanging
				Me._DescuentoFijo3 = value
				Me.SendPropertyChanged("DescuentoFijo3")
				Me.OnDescuentoFijo3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PorcentajeRetension", DbType:="Float")>  _
	Public Property PorcentajeRetension() As System.Nullable(Of Double)
		Get
			Return Me._PorcentajeRetension
		End Get
		Set
			If (Me._PorcentajeRetension.Equals(value) = false) Then
				Me.OnPorcentajeRetensionChanging(value)
				Me.SendPropertyChanging
				Me._PorcentajeRetension = value
				Me.SendPropertyChanged("PorcentajeRetension")
				Me.OnPorcentajeRetensionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoPorte", DbType:="Int")>  _
	Public Property TipoPorte() As System.Nullable(Of Integer)
		Get
			Return Me._TipoPorte
		End Get
		Set
			If (Me._TipoPorte.Equals(value) = false) Then
				Me.OnTipoPorteChanging(value)
				Me.SendPropertyChanging
				Me._TipoPorte = value
				Me.SendPropertyChanged("TipoPorte")
				Me.OnTipoPorteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Porte", DbType:="NVarChar(50)")>  _
	Public Property Porte() As String
		Get
			Return Me._Porte
		End Get
		Set
			If (String.Equals(Me._Porte, value) = false) Then
				Me.OnPorteChanging(value)
				Me.SendPropertyChanging
				Me._Porte = value
				Me.SendPropertyChanged("Porte")
				Me.OnPorteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RappelFijo", DbType:="Float")>  _
	Public Property RappelFijo() As System.Nullable(Of Double)
		Get
			Return Me._RappelFijo
		End Get
		Set
			If (Me._RappelFijo.Equals(value) = false) Then
				Me.OnRappelFijoChanging(value)
				Me.SendPropertyChanging
				Me._RappelFijo = value
				Me.SendPropertyChanged("RappelFijo")
				Me.OnRappelFijoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PagoRapels", DbType:="NVarChar(100)")>  _
	Public Property PagoRapels() As String
		Get
			Return Me._PagoRapels
		End Get
		Set
			If (String.Equals(Me._PagoRapels, value) = false) Then
				Me.OnPagoRapelsChanging(value)
				Me.SendPropertyChanging
				Me._PagoRapels = value
				Me.SendPropertyChanged("PagoRapels")
				Me.OnPagoRapelsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="DateTime")>  _
	Public Property FechaAlta() As System.Nullable(Of Date)
		Get
			Return Me._FechaAlta
		End Get
		Set
			If (Me._FechaAlta.Equals(value) = false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Web", DbType:="NVarChar(200)")>  _
	Public Property Web() As String
		Get
			Return Me._Web
		End Get
		Set
			If (String.Equals(Me._Web, value) = false) Then
				Me.OnWebChanging(value)
				Me.SendPropertyChanging
				Me._Web = value
				Me.SendPropertyChanged("Web")
				Me.OnWebChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Horario", DbType:="NVarChar(50)")>  _
	Public Property Horario() As String
		Get
			Return Me._Horario
		End Get
		Set
			If (String.Equals(Me._Horario, value) = false) Then
				Me.OnHorarioChanging(value)
				Me.SendPropertyChanging
				Me._Horario = value
				Me.SendPropertyChanged("Horario")
				Me.OnHorarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VacacionesDesde", DbType:="NVarChar(50)")>  _
	Public Property VacacionesDesde() As String
		Get
			Return Me._VacacionesDesde
		End Get
		Set
			If (String.Equals(Me._VacacionesDesde, value) = false) Then
				Me.OnVacacionesDesdeChanging(value)
				Me.SendPropertyChanging
				Me._VacacionesDesde = value
				Me.SendPropertyChanged("VacacionesDesde")
				Me.OnVacacionesDesdeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VacacionesHasta", DbType:="NVarChar(50)")>  _
	Public Property VacacionesHasta() As String
		Get
			Return Me._VacacionesHasta
		End Get
		Set
			If (String.Equals(Me._VacacionesHasta, value) = false) Then
				Me.OnVacacionesHastaChanging(value)
				Me.SendPropertyChanging
				Me._VacacionesHasta = value
				Me.SendPropertyChanged("VacacionesHasta")
				Me.OnVacacionesHastaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoVenderArticulos", DbType:="Bit")>  _
	Public Property NoVenderArticulos() As System.Nullable(Of Boolean)
		Get
			Return Me._NoVenderArticulos
		End Get
		Set
			If (Me._NoVenderArticulos.Equals(value) = false) Then
				Me.OnNoVenderArticulosChanging(value)
				Me.SendPropertyChanging
				Me._NoVenderArticulos = value
				Me.SendPropertyChanged("NoVenderArticulos")
				Me.OnNoVenderArticulosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoRealizarPagos", DbType:="Bit")>  _
	Public Property NoRealizarPagos() As System.Nullable(Of Boolean)
		Get
			Return Me._NoRealizarPagos
		End Get
		Set
			If (Me._NoRealizarPagos.Equals(value) = false) Then
				Me.OnNoRealizarPagosChanging(value)
				Me.SendPropertyChanging
				Me._NoRealizarPagos = value
				Me.SendPropertyChanged("NoRealizarPagos")
				Me.OnNoRealizarPagosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoImprimir", DbType:="Bit")>  _
	Public Property NoImprimir() As System.Nullable(Of Boolean)
		Get
			Return Me._NoImprimir
		End Get
		Set
			If (Me._NoImprimir.Equals(value) = false) Then
				Me.OnNoImprimirChanging(value)
				Me.SendPropertyChanging
				Me._NoImprimir = value
				Me.SendPropertyChanged("NoImprimir")
				Me.OnNoImprimirChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoIVA", DbType:="Int")>  _
	Public Property TipoIVA() As System.Nullable(Of Integer)
		Get
			Return Me._TipoIVA
		End Get
		Set
			If (Me._TipoIVA.Equals(value) = false) Then
				Me.OnTipoIVAChanging(value)
				Me.SendPropertyChanging
				Me._TipoIVA = value
				Me.SendPropertyChanged("TipoIVA")
				Me.OnTipoIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RE", DbType:="Bit")>  _
	Public Property RE() As System.Nullable(Of Boolean)
		Get
			Return Me._RE
		End Get
		Set
			If (Me._RE.Equals(value) = false) Then
				Me.OnREChanging(value)
				Me.SendPropertyChanging
				Me._RE = value
				Me.SendPropertyChanged("RE")
				Me.OnREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Proveedor_N_Articulo", Storage:="_N_Articulos", ThisKey:="ID_Proveedor", OtherKey:="ID_ProveedorHabitual")>  _
	Public Property N_Articulos() As EntitySet(Of N_Articulo)
		Get
			Return Me._N_Articulos
		End Get
		Set
			Me._N_Articulos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Proveedor_N_PedidosProveedor", Storage:="_N_PedidosProveedors", ThisKey:="ID_Proveedor", OtherKey:="ID_Proveedor")>  _
	Public Property N_PedidosProveedors() As EntitySet(Of N_PedidosProveedor)
		Get
			Return Me._N_PedidosProveedors
		End Get
		Set
			Me._N_PedidosProveedors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_N_Proveedor", Storage:="_FORMASPAGO", ThisKey:="ID_FormaPago", OtherKey:="CODIGO", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property FORMASPAGO() As FORMASPAGO
		Get
			Return Me._FORMASPAGO.Entity
		End Get
		Set
			Dim previousValue As FORMASPAGO = Me._FORMASPAGO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FORMASPAGO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FORMASPAGO.Entity = Nothing
					previousValue.N_Proveedors.Remove(Me)
				End If
				Me._FORMASPAGO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Proveedors.Add(Me)
					Me._ID_FormaPago = value.CODIGO
				Else
					Me._ID_FormaPago = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("FORMASPAGO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BANCO_N_Proveedor", Storage:="_BANCO", ThisKey:="ID_Banco", OtherKey:="IdBanco", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property BANCO() As BANCO
		Get
			Return Me._BANCO.Entity
		End Get
		Set
			Dim previousValue As BANCO = Me._BANCO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BANCO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BANCO.Entity = Nothing
					previousValue.N_Proveedors.Remove(Me)
				End If
				Me._BANCO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Proveedors.Add(Me)
					Me._ID_Banco = value.IdBanco
				Else
					Me._ID_Banco = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("BANCO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_N_Articulos(ByVal entity As N_Articulo)
		Me.SendPropertyChanging
		entity.N_Proveedor = Me
	End Sub
	
	Private Sub detach_N_Articulos(ByVal entity As N_Articulo)
		Me.SendPropertyChanging
		entity.N_Proveedor = Nothing
	End Sub
	
	Private Sub attach_N_PedidosProveedors(ByVal entity As N_PedidosProveedor)
		Me.SendPropertyChanging
		entity.N_Proveedor = Me
	End Sub
	
	Private Sub detach_N_PedidosProveedors(ByVal entity As N_PedidosProveedor)
		Me.SendPropertyChanging
		entity.N_Proveedor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_Provincias")>  _
Partial Public Class N_Provincia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Provincias As Integer
	
	Private _Nombre As String
	
	Private _ID_Pais As Integer
	
	Private _N_Poblaciones As EntitySet(Of N_Poblacione)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ProvinciasChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProvinciasChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnID_PaisChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PaisChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_Poblaciones = New EntitySet(Of N_Poblacione)(AddressOf Me.attach_N_Poblaciones, AddressOf Me.detach_N_Poblaciones)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Provincias", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Provincias() As Integer
		Get
			Return Me._ID_Provincias
		End Get
		Set
			If ((Me._ID_Provincias = value)  _
						= false) Then
				Me.OnID_ProvinciasChanging(value)
				Me.SendPropertyChanging
				Me._ID_Provincias = value
				Me.SendPropertyChanged("ID_Provincias")
				Me.OnID_ProvinciasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Pais", DbType:="Int NOT NULL")>  _
	Public Property ID_Pais() As Integer
		Get
			Return Me._ID_Pais
		End Get
		Set
			If ((Me._ID_Pais = value)  _
						= false) Then
				Me.OnID_PaisChanging(value)
				Me.SendPropertyChanging
				Me._ID_Pais = value
				Me.SendPropertyChanged("ID_Pais")
				Me.OnID_PaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Provincia_N_Poblacione", Storage:="_N_Poblaciones", ThisKey:="ID_Provincias", OtherKey:="ID_Provincia")>  _
	Public Property N_Poblaciones() As EntitySet(Of N_Poblacione)
		Get
			Return Me._N_Poblaciones
		End Get
		Set
			Me._N_Poblaciones.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_N_Poblaciones(ByVal entity As N_Poblacione)
		Me.SendPropertyChanging
		entity.N_Provincia = Me
	End Sub
	
	Private Sub detach_N_Poblaciones(ByVal entity As N_Poblacione)
		Me.SendPropertyChanging
		entity.N_Provincia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CALENDARIO_GLOBAL")>  _
Partial Public Class CALENDARIO_GLOBAL
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Anno As System.Nullable(Of Integer)
	
	Private _Calendario As System.Xml.Linq.XElement
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnAnnoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAnnoChanged()
    End Sub
    Partial Private Sub OnCalendarioChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnCalendarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Anno", DbType:="Int")>  _
	Public Property Anno() As System.Nullable(Of Integer)
		Get
			Return Me._Anno
		End Get
		Set
			If (Me._Anno.Equals(value) = false) Then
				Me.OnAnnoChanging(value)
				Me.SendPropertyChanging
				Me._Anno = value
				Me.SendPropertyChanged("Anno")
				Me.OnAnnoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendario", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Calendario() As System.Xml.Linq.XElement
		Get
			Return Me._Calendario
		End Get
		Set
			If (Object.Equals(Me._Calendario, value) = false) Then
				Me.OnCalendarioChanging(value)
				Me.SendPropertyChanging
				Me._Calendario = value
				Me.SendPropertyChanged("Calendario")
				Me.OnCalendarioChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CALENDARIO_USUARIOS")>  _
Partial Public Class CALENDARIO_USUARIO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ID_Usuario As Integer
	
	Private _Anno As System.Nullable(Of Integer)
	
	Private _Calendario As System.Xml.Linq.XElement
	
	Private _USUARIO As EntityRef(Of USUARIO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnAnnoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAnnoChanged()
    End Sub
    Partial Private Sub OnCalendarioChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnCalendarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._USUARIO = CType(Nothing, EntityRef(Of USUARIO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL")>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._USUARIO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Anno", DbType:="Int")>  _
	Public Property Anno() As System.Nullable(Of Integer)
		Get
			Return Me._Anno
		End Get
		Set
			If (Me._Anno.Equals(value) = false) Then
				Me.OnAnnoChanging(value)
				Me.SendPropertyChanging
				Me._Anno = value
				Me.SendPropertyChanged("Anno")
				Me.OnAnnoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendario", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Calendario() As System.Xml.Linq.XElement
		Get
			Return Me._Calendario
		End Get
		Set
			If (Object.Equals(Me._Calendario, value) = false) Then
				Me.OnCalendarioChanging(value)
				Me.SendPropertyChanging
				Me._Calendario = value
				Me.SendPropertyChanged("Calendario")
				Me.OnCalendarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIO_CALENDARIO_USUARIO", Storage:="_USUARIO", ThisKey:="ID_Usuario", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property USUARIO() As USUARIO
		Get
			Return Me._USUARIO.Entity
		End Get
		Set
			Dim previousValue As USUARIO = Me._USUARIO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._USUARIO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._USUARIO.Entity = Nothing
					previousValue.CALENDARIO_USUARIOs.Remove(Me)
				End If
				Me._USUARIO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CALENDARIO_USUARIOs.Add(Me)
					Me._ID_Usuario = value.CODIGO
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("USUARIO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CALENDARIO_MEDICOS")>  _
Partial Public Class CALENDARIO_MEDICO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ID_MEDICO As System.Nullable(Of Integer)
	
	Private _Anno As System.Nullable(Of Integer)
	
	Private _Calendario As System.Xml.Linq.XElement
	
	Private _MEDICO As EntityRef(Of MEDICO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnID_MEDICOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_MEDICOChanged()
    End Sub
    Partial Private Sub OnAnnoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAnnoChanged()
    End Sub
    Partial Private Sub OnCalendarioChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnCalendarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MEDICO = CType(Nothing, EntityRef(Of MEDICO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_MEDICO", DbType:="Int")>  _
	Public Property ID_MEDICO() As System.Nullable(Of Integer)
		Get
			Return Me._ID_MEDICO
		End Get
		Set
			If (Me._ID_MEDICO.Equals(value) = false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_MEDICOChanging(value)
				Me.SendPropertyChanging
				Me._ID_MEDICO = value
				Me.SendPropertyChanged("ID_MEDICO")
				Me.OnID_MEDICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Anno", DbType:="Int")>  _
	Public Property Anno() As System.Nullable(Of Integer)
		Get
			Return Me._Anno
		End Get
		Set
			If (Me._Anno.Equals(value) = false) Then
				Me.OnAnnoChanging(value)
				Me.SendPropertyChanging
				Me._Anno = value
				Me.SendPropertyChanged("Anno")
				Me.OnAnnoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendario", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Calendario() As System.Xml.Linq.XElement
		Get
			Return Me._Calendario
		End Get
		Set
			If (Object.Equals(Me._Calendario, value) = false) Then
				Me.OnCalendarioChanging(value)
				Me.SendPropertyChanging
				Me._Calendario = value
				Me.SendPropertyChanged("Calendario")
				Me.OnCalendarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_CALENDARIO_MEDICO", Storage:="_MEDICO", ThisKey:="ID_MEDICO", OtherKey:="CMEDICO", IsForeignKey:=true)>  _
	Public Property MEDICO() As MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.CALENDARIO_MEDICOs.Remove(Me)
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CALENDARIO_MEDICOs.Add(Me)
					Me._ID_MEDICO = value.CMEDICO
				Else
					Me._ID_MEDICO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MEDICO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AntecedentesDiagnosticos")>  _
Partial Public Class AntecedentesDiagnostico
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDANTECEDENTEDX As Integer
	
	Private _IDDIAGNOSTICO As Integer
	
	Private _DIAGNOSTICO As String
	
	Private _OBSERVACIONES As String
	
	Private _CIE10 As String
	
	Private _CPACIENTE As Integer
	
	Private _DIAGNOSTICO1 As EntityRef(Of DIAGNOSTICO)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDANTECEDENTEDXChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDANTECEDENTEDXChanged()
    End Sub
    Partial Private Sub OnIDDIAGNOSTICOChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDDIAGNOSTICOChanged()
    End Sub
    Partial Private Sub OnDIAGNOSTICOChanging(value As String)
    End Sub
    Partial Private Sub OnDIAGNOSTICOChanged()
    End Sub
    Partial Private Sub OnOBSERVACIONESChanging(value As String)
    End Sub
    Partial Private Sub OnOBSERVACIONESChanged()
    End Sub
    Partial Private Sub OnCIE10Changing(value As String)
    End Sub
    Partial Private Sub OnCIE10Changed()
    End Sub
    Partial Private Sub OnCPACIENTEChanging(value As Integer)
    End Sub
    Partial Private Sub OnCPACIENTEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DIAGNOSTICO1 = CType(Nothing, EntityRef(Of DIAGNOSTICO))
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDANTECEDENTEDX", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDANTECEDENTEDX() As Integer
		Get
			Return Me._IDANTECEDENTEDX
		End Get
		Set
			If ((Me._IDANTECEDENTEDX = value)  _
						= false) Then
				Me.OnIDANTECEDENTEDXChanging(value)
				Me.SendPropertyChanging
				Me._IDANTECEDENTEDX = value
				Me.SendPropertyChanged("IDANTECEDENTEDX")
				Me.OnIDANTECEDENTEDXChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDDIAGNOSTICO", DbType:="Int NOT NULL")>  _
	Public Property IDDIAGNOSTICO() As Integer
		Get
			Return Me._IDDIAGNOSTICO
		End Get
		Set
			If ((Me._IDDIAGNOSTICO = value)  _
						= false) Then
				If Me._DIAGNOSTICO1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDDIAGNOSTICOChanging(value)
				Me.SendPropertyChanging
				Me._IDDIAGNOSTICO = value
				Me.SendPropertyChanged("IDDIAGNOSTICO")
				Me.OnIDDIAGNOSTICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIAGNOSTICO", DbType:="VarChar(70) NOT NULL", CanBeNull:=false)>  _
	Public Property DIAGNOSTICO() As String
		Get
			Return Me._DIAGNOSTICO
		End Get
		Set
			If (String.Equals(Me._DIAGNOSTICO, value) = false) Then
				Me.OnDIAGNOSTICOChanging(value)
				Me.SendPropertyChanging
				Me._DIAGNOSTICO = value
				Me.SendPropertyChanged("DIAGNOSTICO")
				Me.OnDIAGNOSTICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OBSERVACIONES", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OBSERVACIONES() As String
		Get
			Return Me._OBSERVACIONES
		End Get
		Set
			If (String.Equals(Me._OBSERVACIONES, value) = false) Then
				Me.OnOBSERVACIONESChanging(value)
				Me.SendPropertyChanging
				Me._OBSERVACIONES = value
				Me.SendPropertyChanged("OBSERVACIONES")
				Me.OnOBSERVACIONESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIE10", DbType:="VarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property CIE10() As String
		Get
			Return Me._CIE10
		End Get
		Set
			If (String.Equals(Me._CIE10, value) = false) Then
				Me.OnCIE10Changing(value)
				Me.SendPropertyChanging
				Me._CIE10 = value
				Me.SendPropertyChanged("CIE10")
				Me.OnCIE10Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CPACIENTE", DbType:="Int NOT NULL")>  _
	Public Property CPACIENTE() As Integer
		Get
			Return Me._CPACIENTE
		End Get
		Set
			If ((Me._CPACIENTE = value)  _
						= false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._CPACIENTE = value
				Me.SendPropertyChanged("CPACIENTE")
				Me.OnCPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DIAGNOSTICO_AntecedentesDiagnostico", Storage:="_DIAGNOSTICO1", ThisKey:="IDDIAGNOSTICO", OtherKey:="IDDIAGNOSTICO", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property DIAGNOSTICO1() As DIAGNOSTICO
		Get
			Return Me._DIAGNOSTICO1.Entity
		End Get
		Set
			Dim previousValue As DIAGNOSTICO = Me._DIAGNOSTICO1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DIAGNOSTICO1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DIAGNOSTICO1.Entity = Nothing
					previousValue.AntecedentesDiagnosticos.Remove(Me)
				End If
				Me._DIAGNOSTICO1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AntecedentesDiagnosticos.Add(Me)
					Me._IDDIAGNOSTICO = value.IDDIAGNOSTICO
				Else
					Me._IDDIAGNOSTICO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DIAGNOSTICO1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_AntecedentesDiagnostico", Storage:="_PACIENTE", ThisKey:="CPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.AntecedentesDiagnosticos.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AntecedentesDiagnosticos.Add(Me)
					Me._CPACIENTE = value.CPACIENTE
				Else
					Me._CPACIENTE = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.COMPARATIVAS")>  _
Partial Public Class COMPARATIVA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As Integer
	
	Private _REFPACIENTE As System.Nullable(Of Integer)
	
	Private _DESCRIPCION As String
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _NOTAS As String
	
	Private _REFMODELOCOMPARATIVA As String
	
	Private _FECHATERMINADA As System.Nullable(Of Date)
	
	Private _IMAGEN As System.Data.Linq.Binary
	
	Private _LCOMPARATIVAs As EntitySet(Of LCOMPARATIVA)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
	Private _MODELOSCOMPARATIVA As EntityRef(Of MODELOSCOMPARATIVA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As Integer)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    Partial Private Sub OnREFMODELOCOMPARATIVAChanging(value As String)
    End Sub
    Partial Private Sub OnREFMODELOCOMPARATIVAChanged()
    End Sub
    Partial Private Sub OnFECHATERMINADAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHATERMINADAChanged()
    End Sub
    Partial Private Sub OnIMAGENChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnIMAGENChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LCOMPARATIVAs = New EntitySet(Of LCOMPARATIVA)(AddressOf Me.attach_LCOMPARATIVAs, AddressOf Me.detach_LCOMPARATIVAs)
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		Me._MODELOSCOMPARATIVA = CType(Nothing, EntityRef(Of MODELOSCOMPARATIVA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CODIGO() As Integer
		Get
			Return Me._CODIGO
		End Get
		Set
			If ((Me._CODIGO = value)  _
						= false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int")>  _
	Public Property REFPACIENTE() As System.Nullable(Of Integer)
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If (Me._REFPACIENTE.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(100)")>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime")>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMODELOCOMPARATIVA", DbType:="VarChar(12)")>  _
	Public Property REFMODELOCOMPARATIVA() As String
		Get
			Return Me._REFMODELOCOMPARATIVA
		End Get
		Set
			If (String.Equals(Me._REFMODELOCOMPARATIVA, value) = false) Then
				If Me._MODELOSCOMPARATIVA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMODELOCOMPARATIVAChanging(value)
				Me.SendPropertyChanging
				Me._REFMODELOCOMPARATIVA = value
				Me.SendPropertyChanged("REFMODELOCOMPARATIVA")
				Me.OnREFMODELOCOMPARATIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHATERMINADA", DbType:="DateTime")>  _
	Public Property FECHATERMINADA() As System.Nullable(Of Date)
		Get
			Return Me._FECHATERMINADA
		End Get
		Set
			If (Me._FECHATERMINADA.Equals(value) = false) Then
				Me.OnFECHATERMINADAChanging(value)
				Me.SendPropertyChanging
				Me._FECHATERMINADA = value
				Me.SendPropertyChanged("FECHATERMINADA")
				Me.OnFECHATERMINADAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMAGEN", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IMAGEN() As System.Data.Linq.Binary
		Get
			Return Me._IMAGEN
		End Get
		Set
			If (Object.Equals(Me._IMAGEN, value) = false) Then
				Me.OnIMAGENChanging(value)
				Me.SendPropertyChanging
				Me._IMAGEN = value
				Me.SendPropertyChanged("IMAGEN")
				Me.OnIMAGENChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="COMPARATIVA_LCOMPARATIVA", Storage:="_LCOMPARATIVAs", ThisKey:="CODIGO", OtherKey:="REFCOMPARATIVA")>  _
	Public Property LCOMPARATIVAs() As EntitySet(Of LCOMPARATIVA)
		Get
			Return Me._LCOMPARATIVAs
		End Get
		Set
			Me._LCOMPARATIVAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_COMPARATIVA", Storage:="_PACIENTE", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.COMPARATIVAs.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.COMPARATIVAs.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MODELOSCOMPARATIVA_COMPARATIVA", Storage:="_MODELOSCOMPARATIVA", ThisKey:="REFMODELOCOMPARATIVA", OtherKey:="CODIGO", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property MODELOSCOMPARATIVA() As MODELOSCOMPARATIVA
		Get
			Return Me._MODELOSCOMPARATIVA.Entity
		End Get
		Set
			Dim previousValue As MODELOSCOMPARATIVA = Me._MODELOSCOMPARATIVA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MODELOSCOMPARATIVA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MODELOSCOMPARATIVA.Entity = Nothing
					previousValue.COMPARATIVAs.Remove(Me)
				End If
				Me._MODELOSCOMPARATIVA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.COMPARATIVAs.Add(Me)
					Me._REFMODELOCOMPARATIVA = value.CODIGO
				Else
					Me._REFMODELOCOMPARATIVA = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MODELOSCOMPARATIVA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LCOMPARATIVAs(ByVal entity As LCOMPARATIVA)
		Me.SendPropertyChanging
		entity.COMPARATIVA = Me
	End Sub
	
	Private Sub detach_LCOMPARATIVAs(ByVal entity As LCOMPARATIVA)
		Me.SendPropertyChanging
		entity.COMPARATIVA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DATOSCOMPARATIVA")>  _
Partial Public Class DATOSCOMPARATIVA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _REFLCOMPARATIVA As System.Nullable(Of Integer)
	
	Private _DFLOAT As System.Nullable(Of Single)
	
	Private _DBOOLEAN As String
	
	Private _DVARCHAR As String
	
	Private _REFMODELODATO As System.Nullable(Of Integer)
	
	Private _DXML As System.Xml.Linq.XElement
	
	Private _OcultarImpresionCliente As System.Nullable(Of Boolean)
	
	Private _LCOMPARATIVA As EntityRef(Of LCOMPARATIVA)
	
	Private _MODELOSDATO As EntityRef(Of MODELOSDATO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnREFLCOMPARATIVAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFLCOMPARATIVAChanged()
    End Sub
    Partial Private Sub OnDFLOATChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnDFLOATChanged()
    End Sub
    Partial Private Sub OnDBOOLEANChanging(value As String)
    End Sub
    Partial Private Sub OnDBOOLEANChanged()
    End Sub
    Partial Private Sub OnDVARCHARChanging(value As String)
    End Sub
    Partial Private Sub OnDVARCHARChanged()
    End Sub
    Partial Private Sub OnREFMODELODATOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFMODELODATOChanged()
    End Sub
    Partial Private Sub OnDXMLChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnDXMLChanged()
    End Sub
    Partial Private Sub OnOcultarImpresionClienteChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnOcultarImpresionClienteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LCOMPARATIVA = CType(Nothing, EntityRef(Of LCOMPARATIVA))
		Me._MODELOSDATO = CType(Nothing, EntityRef(Of MODELOSDATO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFLCOMPARATIVA", DbType:="Int")>  _
	Public Property REFLCOMPARATIVA() As System.Nullable(Of Integer)
		Get
			Return Me._REFLCOMPARATIVA
		End Get
		Set
			If (Me._REFLCOMPARATIVA.Equals(value) = false) Then
				If Me._LCOMPARATIVA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFLCOMPARATIVAChanging(value)
				Me.SendPropertyChanging
				Me._REFLCOMPARATIVA = value
				Me.SendPropertyChanged("REFLCOMPARATIVA")
				Me.OnREFLCOMPARATIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DFLOAT", DbType:="Real")>  _
	Public Property DFLOAT() As System.Nullable(Of Single)
		Get
			Return Me._DFLOAT
		End Get
		Set
			If (Me._DFLOAT.Equals(value) = false) Then
				Me.OnDFLOATChanging(value)
				Me.SendPropertyChanging
				Me._DFLOAT = value
				Me.SendPropertyChanged("DFLOAT")
				Me.OnDFLOATChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DBOOLEAN", DbType:="VarChar(1)")>  _
	Public Property DBOOLEAN() As String
		Get
			Return Me._DBOOLEAN
		End Get
		Set
			If (String.Equals(Me._DBOOLEAN, value) = false) Then
				Me.OnDBOOLEANChanging(value)
				Me.SendPropertyChanging
				Me._DBOOLEAN = value
				Me.SendPropertyChanged("DBOOLEAN")
				Me.OnDBOOLEANChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DVARCHAR", DbType:="VarChar(90)")>  _
	Public Property DVARCHAR() As String
		Get
			Return Me._DVARCHAR
		End Get
		Set
			If (String.Equals(Me._DVARCHAR, value) = false) Then
				Me.OnDVARCHARChanging(value)
				Me.SendPropertyChanging
				Me._DVARCHAR = value
				Me.SendPropertyChanged("DVARCHAR")
				Me.OnDVARCHARChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMODELODATO", DbType:="Int")>  _
	Public Property REFMODELODATO() As System.Nullable(Of Integer)
		Get
			Return Me._REFMODELODATO
		End Get
		Set
			If (Me._REFMODELODATO.Equals(value) = false) Then
				If Me._MODELOSDATO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMODELODATOChanging(value)
				Me.SendPropertyChanging
				Me._REFMODELODATO = value
				Me.SendPropertyChanged("REFMODELODATO")
				Me.OnREFMODELODATOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DXML", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DXML() As System.Xml.Linq.XElement
		Get
			Return Me._DXML
		End Get
		Set
			If (Object.Equals(Me._DXML, value) = false) Then
				Me.OnDXMLChanging(value)
				Me.SendPropertyChanging
				Me._DXML = value
				Me.SendPropertyChanged("DXML")
				Me.OnDXMLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OcultarImpresionCliente", DbType:="bit")>  _
	Public Property OcultarImpresionCliente() As System.Nullable(Of Boolean)
		Get
			Return Me._OcultarImpresionCliente
		End Get
		Set
			If (Me._OcultarImpresionCliente.Equals(value) = false) Then
				Me.OnOcultarImpresionClienteChanging(value)
				Me.SendPropertyChanging
				Me._OcultarImpresionCliente = value
				Me.SendPropertyChanged("OcultarImpresionCliente")
				Me.OnOcultarImpresionClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LCOMPARATIVA_DATOSCOMPARATIVA", Storage:="_LCOMPARATIVA", ThisKey:="REFLCOMPARATIVA", OtherKey:="ID", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property LCOMPARATIVA() As LCOMPARATIVA
		Get
			Return Me._LCOMPARATIVA.Entity
		End Get
		Set
			Dim previousValue As LCOMPARATIVA = Me._LCOMPARATIVA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LCOMPARATIVA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LCOMPARATIVA.Entity = Nothing
					previousValue.DATOSCOMPARATIVAs.Remove(Me)
				End If
				Me._LCOMPARATIVA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DATOSCOMPARATIVAs.Add(Me)
					Me._REFLCOMPARATIVA = value.ID
				Else
					Me._REFLCOMPARATIVA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("LCOMPARATIVA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MODELOSDATO_DATOSCOMPARATIVA", Storage:="_MODELOSDATO", ThisKey:="REFMODELODATO", OtherKey:="CODIGO", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property MODELOSDATO() As MODELOSDATO
		Get
			Return Me._MODELOSDATO.Entity
		End Get
		Set
			Dim previousValue As MODELOSDATO = Me._MODELOSDATO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MODELOSDATO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MODELOSDATO.Entity = Nothing
					previousValue.DATOSCOMPARATIVAs.Remove(Me)
				End If
				Me._MODELOSDATO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DATOSCOMPARATIVAs.Add(Me)
					Me._REFMODELODATO = value.CODIGO
				Else
					Me._REFMODELODATO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MODELOSDATO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RC_Categorias_GaleriaImagenes")>  _
Partial Public Class RC_Categorias_GaleriaImagene
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Categoria As Integer
	
	Private _Titulo As String
	
	Private _ID_Grupo As System.Nullable(Of Integer)
	
	Private _Descripcion As String
	
	Private _DisplayOrder As System.Nullable(Of Integer)
	
	Private _ID_Parent As System.Nullable(Of Integer)
	
	Private _RC_Categorias_GaleriaImagenes As EntitySet(Of RC_Categorias_GaleriaImagene)
	
	Private _RC_Categorias_Imagenes As EntitySet(Of RC_Categorias_Imagene)
	
	Private _RC_Categorias_GaleriaImagene As EntityRef(Of RC_Categorias_GaleriaImagene)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_CategoriaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_CategoriaChanged()
    End Sub
    Partial Private Sub OnTituloChanging(value As String)
    End Sub
    Partial Private Sub OnTituloChanged()
    End Sub
    Partial Private Sub OnID_GrupoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_GrupoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnDisplayOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDisplayOrderChanged()
    End Sub
    Partial Private Sub OnID_ParentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ParentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RC_Categorias_GaleriaImagenes = New EntitySet(Of RC_Categorias_GaleriaImagene)(AddressOf Me.attach_RC_Categorias_GaleriaImagenes, AddressOf Me.detach_RC_Categorias_GaleriaImagenes)
		Me._RC_Categorias_Imagenes = New EntitySet(Of RC_Categorias_Imagene)(AddressOf Me.attach_RC_Categorias_Imagenes, AddressOf Me.detach_RC_Categorias_Imagenes)
		Me._RC_Categorias_GaleriaImagene = CType(Nothing, EntityRef(Of RC_Categorias_GaleriaImagene))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Categoria", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_Categoria() As Integer
		Get
			Return Me._ID_Categoria
		End Get
		Set
			If ((Me._ID_Categoria = value)  _
						= false) Then
				Me.OnID_CategoriaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Categoria = value
				Me.SendPropertyChanged("ID_Categoria")
				Me.OnID_CategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titulo", DbType:="NVarChar(50)")>  _
	Public Property Titulo() As String
		Get
			Return Me._Titulo
		End Get
		Set
			If (String.Equals(Me._Titulo, value) = false) Then
				Me.OnTituloChanging(value)
				Me.SendPropertyChanging
				Me._Titulo = value
				Me.SendPropertyChanged("Titulo")
				Me.OnTituloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Grupo", DbType:="Int")>  _
	Public Property ID_Grupo() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Grupo
		End Get
		Set
			If (Me._ID_Grupo.Equals(value) = false) Then
				Me.OnID_GrupoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Grupo = value
				Me.SendPropertyChanged("ID_Grupo")
				Me.OnID_GrupoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayOrder", DbType:="Int")>  _
	Public Property DisplayOrder() As System.Nullable(Of Integer)
		Get
			Return Me._DisplayOrder
		End Get
		Set
			If (Me._DisplayOrder.Equals(value) = false) Then
				Me.OnDisplayOrderChanging(value)
				Me.SendPropertyChanging
				Me._DisplayOrder = value
				Me.SendPropertyChanged("DisplayOrder")
				Me.OnDisplayOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parent", DbType:="Int")>  _
	Public Property ID_Parent() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Parent
		End Get
		Set
			If (Me._ID_Parent.Equals(value) = false) Then
				If Me._RC_Categorias_GaleriaImagene.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParentChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parent = value
				Me.SendPropertyChanged("ID_Parent")
				Me.OnID_ParentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RC_Categorias_GaleriaImagene_RC_Categorias_GaleriaImagene", Storage:="_RC_Categorias_GaleriaImagenes", ThisKey:="ID_Categoria", OtherKey:="ID_Parent")>  _
	Public Property RC_Categorias_GaleriaImagenes() As EntitySet(Of RC_Categorias_GaleriaImagene)
		Get
			Return Me._RC_Categorias_GaleriaImagenes
		End Get
		Set
			Me._RC_Categorias_GaleriaImagenes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RC_Categorias_GaleriaImagene_RC_Categorias_Imagene", Storage:="_RC_Categorias_Imagenes", ThisKey:="ID_Categoria", OtherKey:="ID_Categoria")>  _
	Public Property RC_Categorias_Imagenes() As EntitySet(Of RC_Categorias_Imagene)
		Get
			Return Me._RC_Categorias_Imagenes
		End Get
		Set
			Me._RC_Categorias_Imagenes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RC_Categorias_GaleriaImagene_RC_Categorias_GaleriaImagene", Storage:="_RC_Categorias_GaleriaImagene", ThisKey:="ID_Parent", OtherKey:="ID_Categoria", IsForeignKey:=true)>  _
	Public Property RC_Categorias_GaleriaImagene() As RC_Categorias_GaleriaImagene
		Get
			Return Me._RC_Categorias_GaleriaImagene.Entity
		End Get
		Set
			Dim previousValue As RC_Categorias_GaleriaImagene = Me._RC_Categorias_GaleriaImagene.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RC_Categorias_GaleriaImagene.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RC_Categorias_GaleriaImagene.Entity = Nothing
					previousValue.RC_Categorias_GaleriaImagenes.Remove(Me)
				End If
				Me._RC_Categorias_GaleriaImagene.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RC_Categorias_GaleriaImagenes.Add(Me)
					Me._ID_Parent = value.ID_Categoria
				Else
					Me._ID_Parent = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("RC_Categorias_GaleriaImagene")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RC_Categorias_GaleriaImagenes(ByVal entity As RC_Categorias_GaleriaImagene)
		Me.SendPropertyChanging
		entity.RC_Categorias_GaleriaImagene = Me
	End Sub
	
	Private Sub detach_RC_Categorias_GaleriaImagenes(ByVal entity As RC_Categorias_GaleriaImagene)
		Me.SendPropertyChanging
		entity.RC_Categorias_GaleriaImagene = Nothing
	End Sub
	
	Private Sub attach_RC_Categorias_Imagenes(ByVal entity As RC_Categorias_Imagene)
		Me.SendPropertyChanging
		entity.RC_Categorias_GaleriaImagene = Me
	End Sub
	
	Private Sub detach_RC_Categorias_Imagenes(ByVal entity As RC_Categorias_Imagene)
		Me.SendPropertyChanging
		entity.RC_Categorias_GaleriaImagene = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RC_Categorias_Imagenes")>  _
Partial Public Class RC_Categorias_Imagene
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_IMAGEN As Integer
	
	Private _ID_Categoria As System.Nullable(Of Integer)
	
	Private _Titulo As String
	
	Private _Descripcion As String
	
	Private _Image As System.Data.Linq.Binary
	
	Private _RC_Categorias_GaleriaImagene As EntityRef(Of RC_Categorias_GaleriaImagene)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_IMAGENChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_IMAGENChanged()
    End Sub
    Partial Private Sub OnID_CategoriaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_CategoriaChanged()
    End Sub
    Partial Private Sub OnTituloChanging(value As String)
    End Sub
    Partial Private Sub OnTituloChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RC_Categorias_GaleriaImagene = CType(Nothing, EntityRef(Of RC_Categorias_GaleriaImagene))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_IMAGEN", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_IMAGEN() As Integer
		Get
			Return Me._ID_IMAGEN
		End Get
		Set
			If ((Me._ID_IMAGEN = value)  _
						= false) Then
				Me.OnID_IMAGENChanging(value)
				Me.SendPropertyChanging
				Me._ID_IMAGEN = value
				Me.SendPropertyChanged("ID_IMAGEN")
				Me.OnID_IMAGENChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Categoria", DbType:="Int")>  _
	Public Property ID_Categoria() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Categoria
		End Get
		Set
			If (Me._ID_Categoria.Equals(value) = false) Then
				If Me._RC_Categorias_GaleriaImagene.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_CategoriaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Categoria = value
				Me.SendPropertyChanged("ID_Categoria")
				Me.OnID_CategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titulo", DbType:="NVarChar(50)")>  _
	Public Property Titulo() As String
		Get
			Return Me._Titulo
		End Get
		Set
			If (String.Equals(Me._Titulo, value) = false) Then
				Me.OnTituloChanging(value)
				Me.SendPropertyChanging
				Me._Titulo = value
				Me.SendPropertyChanged("Titulo")
				Me.OnTituloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Image() As System.Data.Linq.Binary
		Get
			Return Me._Image
		End Get
		Set
			If (Object.Equals(Me._Image, value) = false) Then
				Me.OnImageChanging(value)
				Me.SendPropertyChanging
				Me._Image = value
				Me.SendPropertyChanged("Image")
				Me.OnImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RC_Categorias_GaleriaImagene_RC_Categorias_Imagene", Storage:="_RC_Categorias_GaleriaImagene", ThisKey:="ID_Categoria", OtherKey:="ID_Categoria", IsForeignKey:=true)>  _
	Public Property RC_Categorias_GaleriaImagene() As RC_Categorias_GaleriaImagene
		Get
			Return Me._RC_Categorias_GaleriaImagene.Entity
		End Get
		Set
			Dim previousValue As RC_Categorias_GaleriaImagene = Me._RC_Categorias_GaleriaImagene.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RC_Categorias_GaleriaImagene.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RC_Categorias_GaleriaImagene.Entity = Nothing
					previousValue.RC_Categorias_Imagenes.Remove(Me)
				End If
				Me._RC_Categorias_GaleriaImagene.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RC_Categorias_Imagenes.Add(Me)
					Me._ID_Categoria = value.ID_Categoria
				Else
					Me._ID_Categoria = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("RC_Categorias_GaleriaImagene")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MODELOSCOMPARATIVA")>  _
Partial Public Class MODELOSCOMPARATIVA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As String
	
	Private _MODELO As String
	
	Private _IMAGEN As System.Data.Linq.Binary
	
	Private _COMPARATIVAs As EntitySet(Of COMPARATIVA)
	
	Private _LCOMPARATIVAs As EntitySet(Of LCOMPARATIVA)
	
	Private _MODELOSDATOs As EntitySet(Of MODELOSDATO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As String)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnMODELOChanging(value As String)
    End Sub
    Partial Private Sub OnMODELOChanged()
    End Sub
    Partial Private Sub OnIMAGENChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnIMAGENChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._COMPARATIVAs = New EntitySet(Of COMPARATIVA)(AddressOf Me.attach_COMPARATIVAs, AddressOf Me.detach_COMPARATIVAs)
		Me._LCOMPARATIVAs = New EntitySet(Of LCOMPARATIVA)(AddressOf Me.attach_LCOMPARATIVAs, AddressOf Me.detach_LCOMPARATIVAs)
		Me._MODELOSDATOs = New EntitySet(Of MODELOSDATO)(AddressOf Me.attach_MODELOSDATOs, AddressOf Me.detach_MODELOSDATOs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", DbType:="VarChar(12) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODIGO() As String
		Get
			Return Me._CODIGO
		End Get
		Set
			If (String.Equals(Me._CODIGO, value) = false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODELO", DbType:="VarChar(120)")>  _
	Public Property MODELO() As String
		Get
			Return Me._MODELO
		End Get
		Set
			If (String.Equals(Me._MODELO, value) = false) Then
				Me.OnMODELOChanging(value)
				Me.SendPropertyChanging
				Me._MODELO = value
				Me.SendPropertyChanged("MODELO")
				Me.OnMODELOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMAGEN", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IMAGEN() As System.Data.Linq.Binary
		Get
			Return Me._IMAGEN
		End Get
		Set
			If (Object.Equals(Me._IMAGEN, value) = false) Then
				Me.OnIMAGENChanging(value)
				Me.SendPropertyChanging
				Me._IMAGEN = value
				Me.SendPropertyChanged("IMAGEN")
				Me.OnIMAGENChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MODELOSCOMPARATIVA_COMPARATIVA", Storage:="_COMPARATIVAs", ThisKey:="CODIGO", OtherKey:="REFMODELOCOMPARATIVA")>  _
	Public Property COMPARATIVAs() As EntitySet(Of COMPARATIVA)
		Get
			Return Me._COMPARATIVAs
		End Get
		Set
			Me._COMPARATIVAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MODELOSCOMPARATIVA_LCOMPARATIVA", Storage:="_LCOMPARATIVAs", ThisKey:="CODIGO", OtherKey:="REFMODELOCOMPARATIVA")>  _
	Public Property LCOMPARATIVAs() As EntitySet(Of LCOMPARATIVA)
		Get
			Return Me._LCOMPARATIVAs
		End Get
		Set
			Me._LCOMPARATIVAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MODELOSCOMPARATIVA_MODELOSDATO", Storage:="_MODELOSDATOs", ThisKey:="CODIGO", OtherKey:="REFMODELOCOMPARATIVA")>  _
	Public Property MODELOSDATOs() As EntitySet(Of MODELOSDATO)
		Get
			Return Me._MODELOSDATOs
		End Get
		Set
			Me._MODELOSDATOs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_COMPARATIVAs(ByVal entity As COMPARATIVA)
		Me.SendPropertyChanging
		entity.MODELOSCOMPARATIVA = Me
	End Sub
	
	Private Sub detach_COMPARATIVAs(ByVal entity As COMPARATIVA)
		Me.SendPropertyChanging
		entity.MODELOSCOMPARATIVA = Nothing
	End Sub
	
	Private Sub attach_LCOMPARATIVAs(ByVal entity As LCOMPARATIVA)
		Me.SendPropertyChanging
		entity.MODELOSCOMPARATIVA = Me
	End Sub
	
	Private Sub detach_LCOMPARATIVAs(ByVal entity As LCOMPARATIVA)
		Me.SendPropertyChanging
		entity.MODELOSCOMPARATIVA = Nothing
	End Sub
	
	Private Sub attach_MODELOSDATOs(ByVal entity As MODELOSDATO)
		Me.SendPropertyChanging
		entity.MODELOSCOMPARATIVA = Me
	End Sub
	
	Private Sub detach_MODELOSDATOs(ByVal entity As MODELOSDATO)
		Me.SendPropertyChanging
		entity.MODELOSCOMPARATIVA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LCOMPARATIVAS")>  _
Partial Public Class LCOMPARATIVA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _REFCOMPARATIVA As System.Nullable(Of Integer)
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _HORA As System.Nullable(Of Date)
	
	Private _REFMODELOCOMPARATIVA As String
	
	Private _DESCRIPCION As String
	
	Private _NOTAS As String
	
	Private _REFMEDICO As System.Nullable(Of Integer)
	
	Private _NOMBREMEDICO As String
	
	Private _ESPECIALIDAD As String
	
	Private _IMAGEN As System.Data.Linq.Binary
	
	Private _DATOSCOMPARATIVAs As EntitySet(Of DATOSCOMPARATIVA)
	
	Private _LCOMPARATIVAS_TRATAMIENTOs As EntitySet(Of LCOMPARATIVAS_TRATAMIENTO)
	
	Private _MEDICO As EntityRef(Of MEDICO)
	
	Private _MODELOSCOMPARATIVA As EntityRef(Of MODELOSCOMPARATIVA)
	
	Private _COMPARATIVA As EntityRef(Of COMPARATIVA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnREFCOMPARATIVAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFCOMPARATIVAChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnHORAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHORAChanged()
    End Sub
    Partial Private Sub OnREFMODELOCOMPARATIVAChanging(value As String)
    End Sub
    Partial Private Sub OnREFMODELOCOMPARATIVAChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    Partial Private Sub OnREFMEDICOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFMEDICOChanged()
    End Sub
    Partial Private Sub OnNOMBREMEDICOChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREMEDICOChanged()
    End Sub
    Partial Private Sub OnESPECIALIDADChanging(value As String)
    End Sub
    Partial Private Sub OnESPECIALIDADChanged()
    End Sub
    Partial Private Sub OnIMAGENChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnIMAGENChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DATOSCOMPARATIVAs = New EntitySet(Of DATOSCOMPARATIVA)(AddressOf Me.attach_DATOSCOMPARATIVAs, AddressOf Me.detach_DATOSCOMPARATIVAs)
		Me._LCOMPARATIVAS_TRATAMIENTOs = New EntitySet(Of LCOMPARATIVAS_TRATAMIENTO)(AddressOf Me.attach_LCOMPARATIVAS_TRATAMIENTOs, AddressOf Me.detach_LCOMPARATIVAS_TRATAMIENTOs)
		Me._MEDICO = CType(Nothing, EntityRef(Of MEDICO))
		Me._MODELOSCOMPARATIVA = CType(Nothing, EntityRef(Of MODELOSCOMPARATIVA))
		Me._COMPARATIVA = CType(Nothing, EntityRef(Of COMPARATIVA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFCOMPARATIVA", DbType:="Int")>  _
	Public Property REFCOMPARATIVA() As System.Nullable(Of Integer)
		Get
			Return Me._REFCOMPARATIVA
		End Get
		Set
			If (Me._REFCOMPARATIVA.Equals(value) = false) Then
				If Me._COMPARATIVA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFCOMPARATIVAChanging(value)
				Me.SendPropertyChanging
				Me._REFCOMPARATIVA = value
				Me.SendPropertyChanged("REFCOMPARATIVA")
				Me.OnREFCOMPARATIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime")>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HORA", DbType:="DateTime")>  _
	Public Property HORA() As System.Nullable(Of Date)
		Get
			Return Me._HORA
		End Get
		Set
			If (Me._HORA.Equals(value) = false) Then
				Me.OnHORAChanging(value)
				Me.SendPropertyChanging
				Me._HORA = value
				Me.SendPropertyChanged("HORA")
				Me.OnHORAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMODELOCOMPARATIVA", DbType:="VarChar(12)")>  _
	Public Property REFMODELOCOMPARATIVA() As String
		Get
			Return Me._REFMODELOCOMPARATIVA
		End Get
		Set
			If (String.Equals(Me._REFMODELOCOMPARATIVA, value) = false) Then
				If Me._MODELOSCOMPARATIVA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMODELOCOMPARATIVAChanging(value)
				Me.SendPropertyChanging
				Me._REFMODELOCOMPARATIVA = value
				Me.SendPropertyChanged("REFMODELOCOMPARATIVA")
				Me.OnREFMODELOCOMPARATIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(90)")>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMEDICO", DbType:="Int")>  _
	Public Property REFMEDICO() As System.Nullable(Of Integer)
		Get
			Return Me._REFMEDICO
		End Get
		Set
			If (Me._REFMEDICO.Equals(value) = false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMEDICOChanging(value)
				Me.SendPropertyChanging
				Me._REFMEDICO = value
				Me.SendPropertyChanged("REFMEDICO")
				Me.OnREFMEDICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBREMEDICO", DbType:="NVarChar(50)")>  _
	Public Property NOMBREMEDICO() As String
		Get
			Return Me._NOMBREMEDICO
		End Get
		Set
			If (String.Equals(Me._NOMBREMEDICO, value) = false) Then
				Me.OnNOMBREMEDICOChanging(value)
				Me.SendPropertyChanging
				Me._NOMBREMEDICO = value
				Me.SendPropertyChanged("NOMBREMEDICO")
				Me.OnNOMBREMEDICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ESPECIALIDAD", DbType:="NVarChar(50)")>  _
	Public Property ESPECIALIDAD() As String
		Get
			Return Me._ESPECIALIDAD
		End Get
		Set
			If (String.Equals(Me._ESPECIALIDAD, value) = false) Then
				Me.OnESPECIALIDADChanging(value)
				Me.SendPropertyChanging
				Me._ESPECIALIDAD = value
				Me.SendPropertyChanged("ESPECIALIDAD")
				Me.OnESPECIALIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMAGEN", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IMAGEN() As System.Data.Linq.Binary
		Get
			Return Me._IMAGEN
		End Get
		Set
			If (Object.Equals(Me._IMAGEN, value) = false) Then
				Me.OnIMAGENChanging(value)
				Me.SendPropertyChanging
				Me._IMAGEN = value
				Me.SendPropertyChanged("IMAGEN")
				Me.OnIMAGENChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LCOMPARATIVA_DATOSCOMPARATIVA", Storage:="_DATOSCOMPARATIVAs", ThisKey:="ID", OtherKey:="REFLCOMPARATIVA")>  _
	Public Property DATOSCOMPARATIVAs() As EntitySet(Of DATOSCOMPARATIVA)
		Get
			Return Me._DATOSCOMPARATIVAs
		End Get
		Set
			Me._DATOSCOMPARATIVAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LCOMPARATIVA_LCOMPARATIVAS_TRATAMIENTO", Storage:="_LCOMPARATIVAS_TRATAMIENTOs", ThisKey:="ID", OtherKey:="ID_LCOMPARATIVA")>  _
	Public Property LCOMPARATIVAS_TRATAMIENTOs() As EntitySet(Of LCOMPARATIVAS_TRATAMIENTO)
		Get
			Return Me._LCOMPARATIVAS_TRATAMIENTOs
		End Get
		Set
			Me._LCOMPARATIVAS_TRATAMIENTOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_LCOMPARATIVA", Storage:="_MEDICO", ThisKey:="REFMEDICO", OtherKey:="CMEDICO", IsForeignKey:=true)>  _
	Public Property MEDICO() As MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.LCOMPARATIVAs.Remove(Me)
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LCOMPARATIVAs.Add(Me)
					Me._REFMEDICO = value.CMEDICO
				Else
					Me._REFMEDICO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MEDICO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MODELOSCOMPARATIVA_LCOMPARATIVA", Storage:="_MODELOSCOMPARATIVA", ThisKey:="REFMODELOCOMPARATIVA", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property MODELOSCOMPARATIVA() As MODELOSCOMPARATIVA
		Get
			Return Me._MODELOSCOMPARATIVA.Entity
		End Get
		Set
			Dim previousValue As MODELOSCOMPARATIVA = Me._MODELOSCOMPARATIVA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MODELOSCOMPARATIVA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MODELOSCOMPARATIVA.Entity = Nothing
					previousValue.LCOMPARATIVAs.Remove(Me)
				End If
				Me._MODELOSCOMPARATIVA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LCOMPARATIVAs.Add(Me)
					Me._REFMODELOCOMPARATIVA = value.CODIGO
				Else
					Me._REFMODELOCOMPARATIVA = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MODELOSCOMPARATIVA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="COMPARATIVA_LCOMPARATIVA", Storage:="_COMPARATIVA", ThisKey:="REFCOMPARATIVA", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property COMPARATIVA() As COMPARATIVA
		Get
			Return Me._COMPARATIVA.Entity
		End Get
		Set
			Dim previousValue As COMPARATIVA = Me._COMPARATIVA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._COMPARATIVA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._COMPARATIVA.Entity = Nothing
					previousValue.LCOMPARATIVAs.Remove(Me)
				End If
				Me._COMPARATIVA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LCOMPARATIVAs.Add(Me)
					Me._REFCOMPARATIVA = value.CODIGO
				Else
					Me._REFCOMPARATIVA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("COMPARATIVA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DATOSCOMPARATIVAs(ByVal entity As DATOSCOMPARATIVA)
		Me.SendPropertyChanging
		entity.LCOMPARATIVA = Me
	End Sub
	
	Private Sub detach_DATOSCOMPARATIVAs(ByVal entity As DATOSCOMPARATIVA)
		Me.SendPropertyChanging
		entity.LCOMPARATIVA = Nothing
	End Sub
	
	Private Sub attach_LCOMPARATIVAS_TRATAMIENTOs(ByVal entity As LCOMPARATIVAS_TRATAMIENTO)
		Me.SendPropertyChanging
		entity.LCOMPARATIVA = Me
	End Sub
	
	Private Sub detach_LCOMPARATIVAS_TRATAMIENTOs(ByVal entity As LCOMPARATIVAS_TRATAMIENTO)
		Me.SendPropertyChanging
		entity.LCOMPARATIVA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NOTAS")>  _
Partial Public Class NOTA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_NOTA As Long
	
	Private _ID_Usuario As System.Nullable(Of Integer)
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _NOTA As String
	
	Private _ID_ParentNota As System.Nullable(Of Long)
	
	Private _Categoria As System.Nullable(Of Integer)
	
	Private _USUARIO As EntityRef(Of USUARIO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_NOTAChanging(value As Long)
    End Sub
    Partial Private Sub OnID_NOTAChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnNOTAChanging(value As String)
    End Sub
    Partial Private Sub OnNOTAChanged()
    End Sub
    Partial Private Sub OnID_ParentNotaChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnID_ParentNotaChanged()
    End Sub
    Partial Private Sub OnCategoriaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoriaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._USUARIO = CType(Nothing, EntityRef(Of USUARIO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_NOTA", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_NOTA() As Long
		Get
			Return Me._ID_NOTA
		End Get
		Set
			If ((Me._ID_NOTA = value)  _
						= false) Then
				Me.OnID_NOTAChanging(value)
				Me.SendPropertyChanging
				Me._ID_NOTA = value
				Me.SendPropertyChanged("ID_NOTA")
				Me.OnID_NOTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int")>  _
	Public Property ID_Usuario() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If (Me._ID_Usuario.Equals(value) = false) Then
				If Me._USUARIO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="DateTime")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTA", DbType:="NVarChar(MAX)")>  _
	Public Property NOTA() As String
		Get
			Return Me._NOTA
		End Get
		Set
			If (String.Equals(Me._NOTA, value) = false) Then
				Me.OnNOTAChanging(value)
				Me.SendPropertyChanging
				Me._NOTA = value
				Me.SendPropertyChanged("NOTA")
				Me.OnNOTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ParentNota", DbType:="BigInt")>  _
	Public Property ID_ParentNota() As System.Nullable(Of Long)
		Get
			Return Me._ID_ParentNota
		End Get
		Set
			If (Me._ID_ParentNota.Equals(value) = false) Then
				Me.OnID_ParentNotaChanging(value)
				Me.SendPropertyChanging
				Me._ID_ParentNota = value
				Me.SendPropertyChanged("ID_ParentNota")
				Me.OnID_ParentNotaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Categoria", DbType:="Int")>  _
	Public Property Categoria() As System.Nullable(Of Integer)
		Get
			Return Me._Categoria
		End Get
		Set
			If (Me._Categoria.Equals(value) = false) Then
				Me.OnCategoriaChanging(value)
				Me.SendPropertyChanging
				Me._Categoria = value
				Me.SendPropertyChanged("Categoria")
				Me.OnCategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIO_NOTA", Storage:="_USUARIO", ThisKey:="ID_Usuario", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property USUARIO() As USUARIO
		Get
			Return Me._USUARIO.Entity
		End Get
		Set
			Dim previousValue As USUARIO = Me._USUARIO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._USUARIO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._USUARIO.Entity = Nothing
					previousValue.NOTAs.Remove(Me)
				End If
				Me._USUARIO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NOTAs.Add(Me)
					Me._ID_Usuario = value.CODIGO
				Else
					Me._ID_Usuario = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("USUARIO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LMUTUAS")>  _
Partial Public Class LMUTUA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As Integer
	
	Private _REFPACIENTE As System.Nullable(Of Integer)
	
	Private _REFMUTUA As System.Nullable(Of Integer)
	
	Private _FECHAALTA As System.Nullable(Of Date)
	
	Private _FECHABAJA As System.Nullable(Of Date)
	
	Private _TIPO As String
	
	Private _NOTAS As String
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
	Private _MUTUA As EntityRef(Of MUTUA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As Integer)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnREFMUTUAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFMUTUAChanged()
    End Sub
    Partial Private Sub OnFECHAALTAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAALTAChanged()
    End Sub
    Partial Private Sub OnFECHABAJAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHABAJAChanged()
    End Sub
    Partial Private Sub OnTIPOChanging(value As String)
    End Sub
    Partial Private Sub OnTIPOChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		Me._MUTUA = CType(Nothing, EntityRef(Of MUTUA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CODIGO() As Integer
		Get
			Return Me._CODIGO
		End Get
		Set
			If ((Me._CODIGO = value)  _
						= false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int")>  _
	Public Property REFPACIENTE() As System.Nullable(Of Integer)
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If (Me._REFPACIENTE.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMUTUA", DbType:="Int")>  _
	Public Property REFMUTUA() As System.Nullable(Of Integer)
		Get
			Return Me._REFMUTUA
		End Get
		Set
			If (Me._REFMUTUA.Equals(value) = false) Then
				If Me._MUTUA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMUTUAChanging(value)
				Me.SendPropertyChanging
				Me._REFMUTUA = value
				Me.SendPropertyChanged("REFMUTUA")
				Me.OnREFMUTUAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHAALTA", DbType:="DateTime")>  _
	Public Property FECHAALTA() As System.Nullable(Of Date)
		Get
			Return Me._FECHAALTA
		End Get
		Set
			If (Me._FECHAALTA.Equals(value) = false) Then
				Me.OnFECHAALTAChanging(value)
				Me.SendPropertyChanging
				Me._FECHAALTA = value
				Me.SendPropertyChanged("FECHAALTA")
				Me.OnFECHAALTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHABAJA", DbType:="DateTime")>  _
	Public Property FECHABAJA() As System.Nullable(Of Date)
		Get
			Return Me._FECHABAJA
		End Get
		Set
			If (Me._FECHABAJA.Equals(value) = false) Then
				Me.OnFECHABAJAChanging(value)
				Me.SendPropertyChanging
				Me._FECHABAJA = value
				Me.SendPropertyChanged("FECHABAJA")
				Me.OnFECHABAJAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TIPO", DbType:="VarChar(1)")>  _
	Public Property TIPO() As String
		Get
			Return Me._TIPO
		End Get
		Set
			If (String.Equals(Me._TIPO, value) = false) Then
				Me.OnTIPOChanging(value)
				Me.SendPropertyChanging
				Me._TIPO = value
				Me.SendPropertyChanged("TIPO")
				Me.OnTIPOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_LMUTUA", Storage:="_PACIENTE", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.LMUTUAs.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LMUTUAs.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MUTUA_LMUTUA", Storage:="_MUTUA", ThisKey:="REFMUTUA", OtherKey:="CMUTUA", IsForeignKey:=true)>  _
	Public Property MUTUA() As MUTUA
		Get
			Return Me._MUTUA.Entity
		End Get
		Set
			Dim previousValue As MUTUA = Me._MUTUA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MUTUA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MUTUA.Entity = Nothing
					previousValue.LMUTUAs.Remove(Me)
				End If
				Me._MUTUA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LMUTUAs.Add(Me)
					Me._REFMUTUA = value.CMUTUA
				Else
					Me._REFMUTUA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MUTUA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LCOMPARATIVAS_TRATAMIENTOS")>  _
Partial Public Class LCOMPARATIVAS_TRATAMIENTO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ID_LCOMPARATIVA As System.Nullable(Of Integer)
	
	Private _REFCONCEPTOFRA As String
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _Tratamiento As String
	
	Private _Valor_Unidad As String
	
	Private _Unidad As String
	
	Private _Comentarios As String
	
	Private _Layout As System.Xml.Linq.XElement
	
	Private _Facturada As System.Nullable(Of Boolean)
	
	Private _ID_Cita As System.Nullable(Of Integer)
	
	Private _ID_LineaFactura As System.Nullable(Of Integer)
	
	Private _ID_LineaCita As System.Nullable(Of Long)
	
	Private _LineasCitas As EntitySet(Of LineasCita)
	
	Private _LCOMPARATIVA As EntityRef(Of LCOMPARATIVA)
	
	Private _LINEASFACTURA As EntityRef(Of LINEASFACTURA)
	
	Private _CITA As EntityRef(Of CITA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnID_LCOMPARATIVAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_LCOMPARATIVAChanged()
    End Sub
    Partial Private Sub OnREFCONCEPTOFRAChanging(value As String)
    End Sub
    Partial Private Sub OnREFCONCEPTOFRAChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnTratamientoChanging(value As String)
    End Sub
    Partial Private Sub OnTratamientoChanged()
    End Sub
    Partial Private Sub OnValor_UnidadChanging(value As String)
    End Sub
    Partial Private Sub OnValor_UnidadChanged()
    End Sub
    Partial Private Sub OnUnidadChanging(value As String)
    End Sub
    Partial Private Sub OnUnidadChanged()
    End Sub
    Partial Private Sub OnComentariosChanging(value As String)
    End Sub
    Partial Private Sub OnComentariosChanged()
    End Sub
    Partial Private Sub OnLayoutChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnLayoutChanged()
    End Sub
    Partial Private Sub OnFacturadaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnFacturadaChanged()
    End Sub
    Partial Private Sub OnID_CitaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_CitaChanged()
    End Sub
    Partial Private Sub OnID_LineaFacturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_LineaFacturaChanged()
    End Sub
    Partial Private Sub OnID_LineaCitaChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnID_LineaCitaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LineasCitas = New EntitySet(Of LineasCita)(AddressOf Me.attach_LineasCitas, AddressOf Me.detach_LineasCitas)
		Me._LCOMPARATIVA = CType(Nothing, EntityRef(Of LCOMPARATIVA))
		Me._LINEASFACTURA = CType(Nothing, EntityRef(Of LINEASFACTURA))
		Me._CITA = CType(Nothing, EntityRef(Of CITA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_LCOMPARATIVA", DbType:="Int")>  _
	Public Property ID_LCOMPARATIVA() As System.Nullable(Of Integer)
		Get
			Return Me._ID_LCOMPARATIVA
		End Get
		Set
			If (Me._ID_LCOMPARATIVA.Equals(value) = false) Then
				If Me._LCOMPARATIVA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_LCOMPARATIVAChanging(value)
				Me.SendPropertyChanging
				Me._ID_LCOMPARATIVA = value
				Me.SendPropertyChanged("ID_LCOMPARATIVA")
				Me.OnID_LCOMPARATIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFCONCEPTOFRA", DbType:="VarChar(10)")>  _
	Public Property REFCONCEPTOFRA() As String
		Get
			Return Me._REFCONCEPTOFRA
		End Get
		Set
			If (String.Equals(Me._REFCONCEPTOFRA, value) = false) Then
				Me.OnREFCONCEPTOFRAChanging(value)
				Me.SendPropertyChanging
				Me._REFCONCEPTOFRA = value
				Me.SendPropertyChanged("REFCONCEPTOFRA")
				Me.OnREFCONCEPTOFRAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="DateTime")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tratamiento", DbType:="NVarChar(200)")>  _
	Public Property Tratamiento() As String
		Get
			Return Me._Tratamiento
		End Get
		Set
			If (String.Equals(Me._Tratamiento, value) = false) Then
				Me.OnTratamientoChanging(value)
				Me.SendPropertyChanging
				Me._Tratamiento = value
				Me.SendPropertyChanged("Tratamiento")
				Me.OnTratamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor_Unidad", DbType:="NVarChar(50)")>  _
	Public Property Valor_Unidad() As String
		Get
			Return Me._Valor_Unidad
		End Get
		Set
			If (String.Equals(Me._Valor_Unidad, value) = false) Then
				Me.OnValor_UnidadChanging(value)
				Me.SendPropertyChanging
				Me._Valor_Unidad = value
				Me.SendPropertyChanged("Valor_Unidad")
				Me.OnValor_UnidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unidad", DbType:="NVarChar(50)")>  _
	Public Property Unidad() As String
		Get
			Return Me._Unidad
		End Get
		Set
			If (String.Equals(Me._Unidad, value) = false) Then
				Me.OnUnidadChanging(value)
				Me.SendPropertyChanging
				Me._Unidad = value
				Me.SendPropertyChanged("Unidad")
				Me.OnUnidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comentarios", DbType:="NVarChar(200)")>  _
	Public Property Comentarios() As String
		Get
			Return Me._Comentarios
		End Get
		Set
			If (String.Equals(Me._Comentarios, value) = false) Then
				Me.OnComentariosChanging(value)
				Me.SendPropertyChanging
				Me._Comentarios = value
				Me.SendPropertyChanged("Comentarios")
				Me.OnComentariosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Layout", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Layout() As System.Xml.Linq.XElement
		Get
			Return Me._Layout
		End Get
		Set
			If (Object.Equals(Me._Layout, value) = false) Then
				Me.OnLayoutChanging(value)
				Me.SendPropertyChanging
				Me._Layout = value
				Me.SendPropertyChanged("Layout")
				Me.OnLayoutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Facturada", DbType:="Bit")>  _
	Public Property Facturada() As System.Nullable(Of Boolean)
		Get
			Return Me._Facturada
		End Get
		Set
			If (Me._Facturada.Equals(value) = false) Then
				Me.OnFacturadaChanging(value)
				Me.SendPropertyChanging
				Me._Facturada = value
				Me.SendPropertyChanged("Facturada")
				Me.OnFacturadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cita", DbType:="Int")>  _
	Public Property ID_Cita() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Cita
		End Get
		Set
			If (Me._ID_Cita.Equals(value) = false) Then
				If Me._CITA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_CitaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cita = value
				Me.SendPropertyChanged("ID_Cita")
				Me.OnID_CitaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_LineaFactura", DbType:="Int")>  _
	Public Property ID_LineaFactura() As System.Nullable(Of Integer)
		Get
			Return Me._ID_LineaFactura
		End Get
		Set
			If (Me._ID_LineaFactura.Equals(value) = false) Then
				If Me._LINEASFACTURA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_LineaFacturaChanging(value)
				Me.SendPropertyChanging
				Me._ID_LineaFactura = value
				Me.SendPropertyChanged("ID_LineaFactura")
				Me.OnID_LineaFacturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_LineaCita", DbType:="BigInt")>  _
	Public Property ID_LineaCita() As System.Nullable(Of Long)
		Get
			Return Me._ID_LineaCita
		End Get
		Set
			If (Me._ID_LineaCita.Equals(value) = false) Then
				Me.OnID_LineaCitaChanging(value)
				Me.SendPropertyChanging
				Me._ID_LineaCita = value
				Me.SendPropertyChanged("ID_LineaCita")
				Me.OnID_LineaCitaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LCOMPARATIVAS_TRATAMIENTO_LineasCita", Storage:="_LineasCitas", ThisKey:="ID", OtherKey:="RefLineaTratamiento")>  _
	Public Property LineasCitas() As EntitySet(Of LineasCita)
		Get
			Return Me._LineasCitas
		End Get
		Set
			Me._LineasCitas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LCOMPARATIVA_LCOMPARATIVAS_TRATAMIENTO", Storage:="_LCOMPARATIVA", ThisKey:="ID_LCOMPARATIVA", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property LCOMPARATIVA() As LCOMPARATIVA
		Get
			Return Me._LCOMPARATIVA.Entity
		End Get
		Set
			Dim previousValue As LCOMPARATIVA = Me._LCOMPARATIVA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LCOMPARATIVA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LCOMPARATIVA.Entity = Nothing
					previousValue.LCOMPARATIVAS_TRATAMIENTOs.Remove(Me)
				End If
				Me._LCOMPARATIVA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LCOMPARATIVAS_TRATAMIENTOs.Add(Me)
					Me._ID_LCOMPARATIVA = value.ID
				Else
					Me._ID_LCOMPARATIVA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("LCOMPARATIVA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LINEASFACTURA_LCOMPARATIVAS_TRATAMIENTO", Storage:="_LINEASFACTURA", ThisKey:="ID_LineaFactura", OtherKey:="IDLINEAFACTURA", IsForeignKey:=true)>  _
	Public Property LINEASFACTURA() As LINEASFACTURA
		Get
			Return Me._LINEASFACTURA.Entity
		End Get
		Set
			Dim previousValue As LINEASFACTURA = Me._LINEASFACTURA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LINEASFACTURA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LINEASFACTURA.Entity = Nothing
					previousValue.LCOMPARATIVAS_TRATAMIENTOs.Remove(Me)
				End If
				Me._LINEASFACTURA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LCOMPARATIVAS_TRATAMIENTOs.Add(Me)
					Me._ID_LineaFactura = value.IDLINEAFACTURA
				Else
					Me._ID_LineaFactura = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("LINEASFACTURA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CITA_LCOMPARATIVAS_TRATAMIENTO", Storage:="_CITA", ThisKey:="ID_Cita", OtherKey:="IDCITA", IsForeignKey:=true)>  _
	Public Property CITA() As CITA
		Get
			Return Me._CITA.Entity
		End Get
		Set
			Dim previousValue As CITA = Me._CITA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CITA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CITA.Entity = Nothing
					previousValue.LCOMPARATIVAS_TRATAMIENTOs.Remove(Me)
				End If
				Me._CITA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LCOMPARATIVAS_TRATAMIENTOs.Add(Me)
					Me._ID_Cita = value.IDCITA
				Else
					Me._ID_Cita = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CITA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LineasCitas(ByVal entity As LineasCita)
		Me.SendPropertyChanging
		entity.LCOMPARATIVAS_TRATAMIENTO = Me
	End Sub
	
	Private Sub detach_LineasCitas(ByVal entity As LineasCita)
		Me.SendPropertyChanging
		entity.LCOMPARATIVAS_TRATAMIENTO = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LineasCitas")>  _
Partial Public Class LineasCita
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdLinea As Long
	
	Private _IdCita As Integer
	
	Private _RefConcepto As String
	
	Private _DESCRIPCION As String
	
	Private _Cantidad As Double
	
	Private _ImporteClinica As Double
	
	Private _ImporteDr As Double
	
	Private _Duracion As System.Nullable(Of Date)
	
	Private _RefLineaPresupuestoDental As System.Nullable(Of Long)
	
	Private _DescuentoPercent As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _Liquidada_al_Medico As System.Nullable(Of Boolean)
	
	Private _RefLineaTratamiento As System.Nullable(Of Integer)
	
	Private _LINEASFACTURAs As EntitySet(Of LINEASFACTURA)
	
	Private _LCOMPARATIVAS_TRATAMIENTO As EntityRef(Of LCOMPARATIVAS_TRATAMIENTO)
	
	Private _CITA As EntityRef(Of CITA)
	
	Private _d_PresupuestoLinea As EntityRef(Of d_PresupuestoLinea)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdLineaChanging(value As Long)
    End Sub
    Partial Private Sub OnIdLineaChanged()
    End Sub
    Partial Private Sub OnIdCitaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdCitaChanged()
    End Sub
    Partial Private Sub OnRefConceptoChanging(value As String)
    End Sub
    Partial Private Sub OnRefConceptoChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnCantidadChanging(value As Double)
    End Sub
    Partial Private Sub OnCantidadChanged()
    End Sub
    Partial Private Sub OnImporteClinicaChanging(value As Double)
    End Sub
    Partial Private Sub OnImporteClinicaChanged()
    End Sub
    Partial Private Sub OnImporteDrChanging(value As Double)
    End Sub
    Partial Private Sub OnImporteDrChanged()
    End Sub
    Partial Private Sub OnDuracionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDuracionChanged()
    End Sub
    Partial Private Sub OnRefLineaPresupuestoDentalChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnRefLineaPresupuestoDentalChanged()
    End Sub
    Partial Private Sub OnDescuentoPercentChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuentoPercentChanged()
    End Sub
    Partial Private Sub OnTotalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnLiquidada_al_MedicoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnLiquidada_al_MedicoChanged()
    End Sub
    Partial Private Sub OnRefLineaTratamientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRefLineaTratamientoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LINEASFACTURAs = New EntitySet(Of LINEASFACTURA)(AddressOf Me.attach_LINEASFACTURAs, AddressOf Me.detach_LINEASFACTURAs)
		Me._LCOMPARATIVAS_TRATAMIENTO = CType(Nothing, EntityRef(Of LCOMPARATIVAS_TRATAMIENTO))
		Me._CITA = CType(Nothing, EntityRef(Of CITA))
		Me._d_PresupuestoLinea = CType(Nothing, EntityRef(Of d_PresupuestoLinea))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdLinea", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdLinea() As Long
		Get
			Return Me._IdLinea
		End Get
		Set
			If ((Me._IdLinea = value)  _
						= false) Then
				Me.OnIdLineaChanging(value)
				Me.SendPropertyChanging
				Me._IdLinea = value
				Me.SendPropertyChanged("IdLinea")
				Me.OnIdLineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCita", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdCita() As Integer
		Get
			Return Me._IdCita
		End Get
		Set
			If ((Me._IdCita = value)  _
						= false) Then
				If Me._CITA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdCitaChanging(value)
				Me.SendPropertyChanging
				Me._IdCita = value
				Me.SendPropertyChanged("IdCita")
				Me.OnIdCitaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RefConcepto", DbType:="VarChar(50)")>  _
	Public Property RefConcepto() As String
		Get
			Return Me._RefConcepto
		End Get
		Set
			If (String.Equals(Me._RefConcepto, value) = false) Then
				Me.OnRefConceptoChanging(value)
				Me.SendPropertyChanging
				Me._RefConcepto = value
				Me.SendPropertyChanged("RefConcepto")
				Me.OnRefConceptoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Float NOT NULL")>  _
	Public Property Cantidad() As Double
		Get
			Return Me._Cantidad
		End Get
		Set
			If ((Me._Cantidad = value)  _
						= false) Then
				Me.OnCantidadChanging(value)
				Me.SendPropertyChanging
				Me._Cantidad = value
				Me.SendPropertyChanged("Cantidad")
				Me.OnCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImporteClinica", DbType:="Float NOT NULL")>  _
	Public Property ImporteClinica() As Double
		Get
			Return Me._ImporteClinica
		End Get
		Set
			If ((Me._ImporteClinica = value)  _
						= false) Then
				Me.OnImporteClinicaChanging(value)
				Me.SendPropertyChanging
				Me._ImporteClinica = value
				Me.SendPropertyChanged("ImporteClinica")
				Me.OnImporteClinicaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImporteDr", DbType:="Float NOT NULL")>  _
	Public Property ImporteDr() As Double
		Get
			Return Me._ImporteDr
		End Get
		Set
			If ((Me._ImporteDr = value)  _
						= false) Then
				Me.OnImporteDrChanging(value)
				Me.SendPropertyChanging
				Me._ImporteDr = value
				Me.SendPropertyChanged("ImporteDr")
				Me.OnImporteDrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duracion", DbType:="DateTime")>  _
	Public Property Duracion() As System.Nullable(Of Date)
		Get
			Return Me._Duracion
		End Get
		Set
			If (Me._Duracion.Equals(value) = false) Then
				Me.OnDuracionChanging(value)
				Me.SendPropertyChanging
				Me._Duracion = value
				Me.SendPropertyChanged("Duracion")
				Me.OnDuracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RefLineaPresupuestoDental", DbType:="BigInt")>  _
	Public Property RefLineaPresupuestoDental() As System.Nullable(Of Long)
		Get
			Return Me._RefLineaPresupuestoDental
		End Get
		Set
			If (Me._RefLineaPresupuestoDental.Equals(value) = false) Then
				If Me._d_PresupuestoLinea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRefLineaPresupuestoDentalChanging(value)
				Me.SendPropertyChanging
				Me._RefLineaPresupuestoDental = value
				Me.SendPropertyChanged("RefLineaPresupuestoDental")
				Me.OnRefLineaPresupuestoDentalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescuentoPercent", DbType:="Float")>  _
	Public Property DescuentoPercent() As System.Nullable(Of Double)
		Get
			Return Me._DescuentoPercent
		End Get
		Set
			If (Me._DescuentoPercent.Equals(value) = false) Then
				Me.OnDescuentoPercentChanging(value)
				Me.SendPropertyChanging
				Me._DescuentoPercent = value
				Me.SendPropertyChanged("DescuentoPercent")
				Me.OnDescuentoPercentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Liquidada_al_Medico", DbType:="Bit")>  _
	Public Property Liquidada_al_Medico() As System.Nullable(Of Boolean)
		Get
			Return Me._Liquidada_al_Medico
		End Get
		Set
			If (Me._Liquidada_al_Medico.Equals(value) = false) Then
				Me.OnLiquidada_al_MedicoChanging(value)
				Me.SendPropertyChanging
				Me._Liquidada_al_Medico = value
				Me.SendPropertyChanged("Liquidada_al_Medico")
				Me.OnLiquidada_al_MedicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RefLineaTratamiento", DbType:="Int")>  _
	Public Property RefLineaTratamiento() As System.Nullable(Of Integer)
		Get
			Return Me._RefLineaTratamiento
		End Get
		Set
			If (Me._RefLineaTratamiento.Equals(value) = false) Then
				If Me._LCOMPARATIVAS_TRATAMIENTO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRefLineaTratamientoChanging(value)
				Me.SendPropertyChanging
				Me._RefLineaTratamiento = value
				Me.SendPropertyChanged("RefLineaTratamiento")
				Me.OnRefLineaTratamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LineasCita_LINEASFACTURA", Storage:="_LINEASFACTURAs", ThisKey:="IdLinea,IdCita", OtherKey:="RefLineaCita,ID_Cita")>  _
	Public Property LINEASFACTURAs() As EntitySet(Of LINEASFACTURA)
		Get
			Return Me._LINEASFACTURAs
		End Get
		Set
			Me._LINEASFACTURAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LCOMPARATIVAS_TRATAMIENTO_LineasCita", Storage:="_LCOMPARATIVAS_TRATAMIENTO", ThisKey:="RefLineaTratamiento", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property LCOMPARATIVAS_TRATAMIENTO() As LCOMPARATIVAS_TRATAMIENTO
		Get
			Return Me._LCOMPARATIVAS_TRATAMIENTO.Entity
		End Get
		Set
			Dim previousValue As LCOMPARATIVAS_TRATAMIENTO = Me._LCOMPARATIVAS_TRATAMIENTO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LCOMPARATIVAS_TRATAMIENTO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LCOMPARATIVAS_TRATAMIENTO.Entity = Nothing
					previousValue.LineasCitas.Remove(Me)
				End If
				Me._LCOMPARATIVAS_TRATAMIENTO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LineasCitas.Add(Me)
					Me._RefLineaTratamiento = value.ID
				Else
					Me._RefLineaTratamiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("LCOMPARATIVAS_TRATAMIENTO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CITA_LineasCita", Storage:="_CITA", ThisKey:="IdCita", OtherKey:="IDCITA", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property CITA() As CITA
		Get
			Return Me._CITA.Entity
		End Get
		Set
			Dim previousValue As CITA = Me._CITA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CITA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CITA.Entity = Nothing
					previousValue.LineasCitas.Remove(Me)
				End If
				Me._CITA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LineasCitas.Add(Me)
					Me._IdCita = value.IDCITA
				Else
					Me._IdCita = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CITA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="d_PresupuestoLinea_LineasCita", Storage:="_d_PresupuestoLinea", ThisKey:="RefLineaPresupuestoDental", OtherKey:="IDPresupuestoLinea", IsForeignKey:=true, DeleteRule:="SET NULL")>  _
	Public Property d_PresupuestoLinea() As d_PresupuestoLinea
		Get
			Return Me._d_PresupuestoLinea.Entity
		End Get
		Set
			Dim previousValue As d_PresupuestoLinea = Me._d_PresupuestoLinea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._d_PresupuestoLinea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._d_PresupuestoLinea.Entity = Nothing
					previousValue.LineasCitas.Remove(Me)
				End If
				Me._d_PresupuestoLinea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LineasCitas.Add(Me)
					Me._RefLineaPresupuestoDental = value.IDPresupuestoLinea
				Else
					Me._RefLineaPresupuestoDental = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("d_PresupuestoLinea")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LINEASFACTURAs(ByVal entity As LINEASFACTURA)
		Me.SendPropertyChanging
		entity.LineasCita = Me
	End Sub
	
	Private Sub detach_LINEASFACTURAs(ByVal entity As LINEASFACTURA)
		Me.SendPropertyChanging
		entity.LineasCita = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LINEASALARMA")>  _
Partial Public Class LINEASALARMA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDLINEAALARMA As Integer
	
	Private _REFPACIENTE As System.Nullable(Of Integer)
	
	Private _REFALARMA As System.Nullable(Of Integer)
	
	Private _DESCRIPCION As String
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
	Private _ALARMA As EntityRef(Of ALARMA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDLINEAALARMAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDLINEAALARMAChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnREFALARMAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFALARMAChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		Me._ALARMA = CType(Nothing, EntityRef(Of ALARMA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDLINEAALARMA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDLINEAALARMA() As Integer
		Get
			Return Me._IDLINEAALARMA
		End Get
		Set
			If ((Me._IDLINEAALARMA = value)  _
						= false) Then
				Me.OnIDLINEAALARMAChanging(value)
				Me.SendPropertyChanging
				Me._IDLINEAALARMA = value
				Me.SendPropertyChanged("IDLINEAALARMA")
				Me.OnIDLINEAALARMAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int")>  _
	Public Property REFPACIENTE() As System.Nullable(Of Integer)
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If (Me._REFPACIENTE.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFALARMA", DbType:="Int")>  _
	Public Property REFALARMA() As System.Nullable(Of Integer)
		Get
			Return Me._REFALARMA
		End Get
		Set
			If (Me._REFALARMA.Equals(value) = false) Then
				If Me._ALARMA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFALARMAChanging(value)
				Me.SendPropertyChanging
				Me._REFALARMA = value
				Me.SendPropertyChanged("REFALARMA")
				Me.OnREFALARMAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_LINEASALARMA", Storage:="_PACIENTE", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.LINEASALARMAs.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LINEASALARMAs.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ALARMA_LINEASALARMA", Storage:="_ALARMA", ThisKey:="REFALARMA", OtherKey:="CALARMA", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property ALARMA() As ALARMA
		Get
			Return Me._ALARMA.Entity
		End Get
		Set
			Dim previousValue As ALARMA = Me._ALARMA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ALARMA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ALARMA.Entity = Nothing
					previousValue.LINEASALARMAs.Remove(Me)
				End If
				Me._ALARMA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LINEASALARMAs.Add(Me)
					Me._REFALARMA = value.CALARMA
				Else
					Me._REFALARMA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ALARMA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ALARMAS")>  _
Partial Public Class ALARMA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CALARMA As Integer
	
	Private _ALARMA As String
	
	Private _NIVEL As String
	
	Private _DESCRIPCION As String
	
	Private _LINEASALARMAs As EntitySet(Of LINEASALARMA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCALARMAChanging(value As Integer)
    End Sub
    Partial Private Sub OnCALARMAChanged()
    End Sub
    Partial Private Sub OnALARMAChanging(value As String)
    End Sub
    Partial Private Sub OnALARMAChanged()
    End Sub
    Partial Private Sub OnNIVELChanging(value As String)
    End Sub
    Partial Private Sub OnNIVELChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LINEASALARMAs = New EntitySet(Of LINEASALARMA)(AddressOf Me.attach_LINEASALARMAs, AddressOf Me.detach_LINEASALARMAs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CALARMA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CALARMA() As Integer
		Get
			Return Me._CALARMA
		End Get
		Set
			If ((Me._CALARMA = value)  _
						= false) Then
				Me.OnCALARMAChanging(value)
				Me.SendPropertyChanging
				Me._CALARMA = value
				Me.SendPropertyChanged("CALARMA")
				Me.OnCALARMAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ALARMA", DbType:="VarChar(40)")>  _
	Public Property ALARMA() As String
		Get
			Return Me._ALARMA
		End Get
		Set
			If (String.Equals(Me._ALARMA, value) = false) Then
				Me.OnALARMAChanging(value)
				Me.SendPropertyChanging
				Me._ALARMA = value
				Me.SendPropertyChanged("ALARMA")
				Me.OnALARMAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NIVEL", DbType:="VarChar(1)")>  _
	Public Property NIVEL() As String
		Get
			Return Me._NIVEL
		End Get
		Set
			If (String.Equals(Me._NIVEL, value) = false) Then
				Me.OnNIVELChanging(value)
				Me.SendPropertyChanging
				Me._NIVEL = value
				Me.SendPropertyChanged("NIVEL")
				Me.OnNIVELChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ALARMA_LINEASALARMA", Storage:="_LINEASALARMAs", ThisKey:="CALARMA", OtherKey:="REFALARMA")>  _
	Public Property LINEASALARMAs() As EntitySet(Of LINEASALARMA)
		Get
			Return Me._LINEASALARMAs
		End Get
		Set
			Me._LINEASALARMAs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LINEASALARMAs(ByVal entity As LINEASALARMA)
		Me.SendPropertyChanging
		entity.ALARMA = Me
	End Sub
	
	Private Sub detach_LINEASALARMAs(ByVal entity As LINEASALARMA)
		Me.SendPropertyChanging
		entity.ALARMA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.INFORME_MEDICO")>  _
Partial Public Class INFORME_MEDICO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdInforme As Integer
	
	Private _Descripcion As String
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _RefMedico As System.Nullable(Of Integer)
	
	Private _RefPaciente As System.Nullable(Of Integer)
	
	Private _MEDICO As EntityRef(Of MEDICO)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdInformeChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdInformeChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnRefMedicoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRefMedicoChanged()
    End Sub
    Partial Private Sub OnRefPacienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRefPacienteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MEDICO = CType(Nothing, EntityRef(Of MEDICO))
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdInforme", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdInforme() As Integer
		Get
			Return Me._IdInforme
		End Get
		Set
			If ((Me._IdInforme = value)  _
						= false) Then
				Me.OnIdInformeChanging(value)
				Me.SendPropertyChanging
				Me._IdInforme = value
				Me.SendPropertyChanged("IdInforme")
				Me.OnIdInformeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="DateTime")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RefMedico", DbType:="Int")>  _
	Public Property RefMedico() As System.Nullable(Of Integer)
		Get
			Return Me._RefMedico
		End Get
		Set
			If (Me._RefMedico.Equals(value) = false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRefMedicoChanging(value)
				Me.SendPropertyChanging
				Me._RefMedico = value
				Me.SendPropertyChanged("RefMedico")
				Me.OnRefMedicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RefPaciente", DbType:="Int")>  _
	Public Property RefPaciente() As System.Nullable(Of Integer)
		Get
			Return Me._RefPaciente
		End Get
		Set
			If (Me._RefPaciente.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRefPacienteChanging(value)
				Me.SendPropertyChanging
				Me._RefPaciente = value
				Me.SendPropertyChanged("RefPaciente")
				Me.OnRefPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_INFORME_MEDICO", Storage:="_MEDICO", ThisKey:="RefMedico", OtherKey:="CMEDICO", IsForeignKey:=true)>  _
	Public Property MEDICO() As MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.INFORME_MEDICOs.Remove(Me)
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.INFORME_MEDICOs.Add(Me)
					Me._RefMedico = value.CMEDICO
				Else
					Me._RefMedico = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MEDICO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_INFORME_MEDICO", Storage:="_PACIENTE", ThisKey:="RefPaciente", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.INFORME_MEDICOs.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.INFORME_MEDICOs.Add(Me)
					Me._RefPaciente = value.CPACIENTE
				Else
					Me._RefPaciente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.INFORMACIONPRIMARIA")>  _
Partial Public Class INFORMACIONPRIMARIA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _DESCRIPCION As String
	
	Private _TEXTO As String
	
	Private _REFPACIENTE As System.Nullable(Of Integer)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnTEXTOChanging(value As String)
    End Sub
    Partial Private Sub OnTEXTOChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime")>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(150)")>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEXTO", DbType:="VarChar(500)")>  _
	Public Property TEXTO() As String
		Get
			Return Me._TEXTO
		End Get
		Set
			If (String.Equals(Me._TEXTO, value) = false) Then
				Me.OnTEXTOChanging(value)
				Me.SendPropertyChanging
				Me._TEXTO = value
				Me.SendPropertyChanged("TEXTO")
				Me.OnTEXTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int")>  _
	Public Property REFPACIENTE() As System.Nullable(Of Integer)
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If (Me._REFPACIENTE.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_INFORMACIONPRIMARIA", Storage:="_PACIENTE", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.INFORMACIONPRIMARIAs.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.INFORMACIONPRIMARIAs.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RecetasMedicamentos")>  _
Partial Public Class RecetasMedicamento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdLineaReceta As Integer
	
	Private _IdReceta As Integer
	
	Private _REFMEDICAMENTO As String
	
	Private _MEDICAMENTO As EntityRef(Of MEDICAMENTO)
	
	Private _RECETA As EntityRef(Of RECETA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdLineaRecetaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdLineaRecetaChanged()
    End Sub
    Partial Private Sub OnIdRecetaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdRecetaChanged()
    End Sub
    Partial Private Sub OnREFMEDICAMENTOChanging(value As String)
    End Sub
    Partial Private Sub OnREFMEDICAMENTOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MEDICAMENTO = CType(Nothing, EntityRef(Of MEDICAMENTO))
		Me._RECETA = CType(Nothing, EntityRef(Of RECETA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdLineaReceta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdLineaReceta() As Integer
		Get
			Return Me._IdLineaReceta
		End Get
		Set
			If ((Me._IdLineaReceta = value)  _
						= false) Then
				Me.OnIdLineaRecetaChanging(value)
				Me.SendPropertyChanging
				Me._IdLineaReceta = value
				Me.SendPropertyChanged("IdLineaReceta")
				Me.OnIdLineaRecetaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdReceta", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdReceta() As Integer
		Get
			Return Me._IdReceta
		End Get
		Set
			If ((Me._IdReceta = value)  _
						= false) Then
				If Me._RECETA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdRecetaChanging(value)
				Me.SendPropertyChanging
				Me._IdReceta = value
				Me.SendPropertyChanged("IdReceta")
				Me.OnIdRecetaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMEDICAMENTO", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property REFMEDICAMENTO() As String
		Get
			Return Me._REFMEDICAMENTO
		End Get
		Set
			If (String.Equals(Me._REFMEDICAMENTO, value) = false) Then
				If Me._MEDICAMENTO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMEDICAMENTOChanging(value)
				Me.SendPropertyChanging
				Me._REFMEDICAMENTO = value
				Me.SendPropertyChanged("REFMEDICAMENTO")
				Me.OnREFMEDICAMENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICAMENTO_RecetasMedicamento", Storage:="_MEDICAMENTO", ThisKey:="REFMEDICAMENTO", OtherKey:="CMEDICAMENTO", IsForeignKey:=true)>  _
	Public Property MEDICAMENTO() As MEDICAMENTO
		Get
			Return Me._MEDICAMENTO.Entity
		End Get
		Set
			Dim previousValue As MEDICAMENTO = Me._MEDICAMENTO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICAMENTO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICAMENTO.Entity = Nothing
					previousValue.RecetasMedicamentos.Remove(Me)
				End If
				Me._MEDICAMENTO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RecetasMedicamentos.Add(Me)
					Me._REFMEDICAMENTO = value.CMEDICAMENTO
				Else
					Me._REFMEDICAMENTO = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MEDICAMENTO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RECETA_RecetasMedicamento", Storage:="_RECETA", ThisKey:="IdReceta", OtherKey:="IDRECETA", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property RECETA() As RECETA
		Get
			Return Me._RECETA.Entity
		End Get
		Set
			Dim previousValue As RECETA = Me._RECETA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RECETA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RECETA.Entity = Nothing
					previousValue.RecetasMedicamentos.Remove(Me)
				End If
				Me._RECETA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RecetasMedicamentos.Add(Me)
					Me._IdReceta = value.IDRECETA
				Else
					Me._IdReceta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("RECETA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MEDICAMENTOS")>  _
Partial Public Class MEDICAMENTO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CMEDICAMENTO As String
	
	Private _DESCRIPCION As String
	
	Private _POSOLOGIA As String
	
	Private _CANTIDADES As String
	
	Private _INDICACION As String
	
	Private _FAVORITOS As String
	
	Private _CODIGONACIONAL As String
	
	Private _RecetasMedicamentos As EntitySet(Of RecetasMedicamento)
	
	Private _RECETAs As EntitySet(Of RECETA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCMEDICAMENTOChanging(value As String)
    End Sub
    Partial Private Sub OnCMEDICAMENTOChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnPOSOLOGIAChanging(value As String)
    End Sub
    Partial Private Sub OnPOSOLOGIAChanged()
    End Sub
    Partial Private Sub OnCANTIDADESChanging(value As String)
    End Sub
    Partial Private Sub OnCANTIDADESChanged()
    End Sub
    Partial Private Sub OnINDICACIONChanging(value As String)
    End Sub
    Partial Private Sub OnINDICACIONChanged()
    End Sub
    Partial Private Sub OnFAVORITOSChanging(value As String)
    End Sub
    Partial Private Sub OnFAVORITOSChanged()
    End Sub
    Partial Private Sub OnCODIGONACIONALChanging(value As String)
    End Sub
    Partial Private Sub OnCODIGONACIONALChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RecetasMedicamentos = New EntitySet(Of RecetasMedicamento)(AddressOf Me.attach_RecetasMedicamentos, AddressOf Me.detach_RecetasMedicamentos)
		Me._RECETAs = New EntitySet(Of RECETA)(AddressOf Me.attach_RECETAs, AddressOf Me.detach_RECETAs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMEDICAMENTO", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CMEDICAMENTO() As String
		Get
			Return Me._CMEDICAMENTO
		End Get
		Set
			If (String.Equals(Me._CMEDICAMENTO, value) = false) Then
				Me.OnCMEDICAMENTOChanging(value)
				Me.SendPropertyChanging
				Me._CMEDICAMENTO = value
				Me.SendPropertyChanged("CMEDICAMENTO")
				Me.OnCMEDICAMENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(90)")>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POSOLOGIA", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property POSOLOGIA() As String
		Get
			Return Me._POSOLOGIA
		End Get
		Set
			If (String.Equals(Me._POSOLOGIA, value) = false) Then
				Me.OnPOSOLOGIAChanging(value)
				Me.SendPropertyChanging
				Me._POSOLOGIA = value
				Me.SendPropertyChanged("POSOLOGIA")
				Me.OnPOSOLOGIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CANTIDADES", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CANTIDADES() As String
		Get
			Return Me._CANTIDADES
		End Get
		Set
			If (String.Equals(Me._CANTIDADES, value) = false) Then
				Me.OnCANTIDADESChanging(value)
				Me.SendPropertyChanging
				Me._CANTIDADES = value
				Me.SendPropertyChanged("CANTIDADES")
				Me.OnCANTIDADESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INDICACION", DbType:="VarChar(30)")>  _
	Public Property INDICACION() As String
		Get
			Return Me._INDICACION
		End Get
		Set
			If (String.Equals(Me._INDICACION, value) = false) Then
				Me.OnINDICACIONChanging(value)
				Me.SendPropertyChanging
				Me._INDICACION = value
				Me.SendPropertyChanged("INDICACION")
				Me.OnINDICACIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAVORITOS", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property FAVORITOS() As String
		Get
			Return Me._FAVORITOS
		End Get
		Set
			If (String.Equals(Me._FAVORITOS, value) = false) Then
				Me.OnFAVORITOSChanging(value)
				Me.SendPropertyChanging
				Me._FAVORITOS = value
				Me.SendPropertyChanged("FAVORITOS")
				Me.OnFAVORITOSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGONACIONAL", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property CODIGONACIONAL() As String
		Get
			Return Me._CODIGONACIONAL
		End Get
		Set
			If (String.Equals(Me._CODIGONACIONAL, value) = false) Then
				Me.OnCODIGONACIONALChanging(value)
				Me.SendPropertyChanging
				Me._CODIGONACIONAL = value
				Me.SendPropertyChanged("CODIGONACIONAL")
				Me.OnCODIGONACIONALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICAMENTO_RecetasMedicamento", Storage:="_RecetasMedicamentos", ThisKey:="CMEDICAMENTO", OtherKey:="REFMEDICAMENTO")>  _
	Public Property RecetasMedicamentos() As EntitySet(Of RecetasMedicamento)
		Get
			Return Me._RecetasMedicamentos
		End Get
		Set
			Me._RecetasMedicamentos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICAMENTO_RECETA", Storage:="_RECETAs", ThisKey:="CMEDICAMENTO", OtherKey:="REFMEDICAMENTO")>  _
	Public Property RECETAs() As EntitySet(Of RECETA)
		Get
			Return Me._RECETAs
		End Get
		Set
			Me._RECETAs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RecetasMedicamentos(ByVal entity As RecetasMedicamento)
		Me.SendPropertyChanging
		entity.MEDICAMENTO = Me
	End Sub
	
	Private Sub detach_RecetasMedicamentos(ByVal entity As RecetasMedicamento)
		Me.SendPropertyChanging
		entity.MEDICAMENTO = Nothing
	End Sub
	
	Private Sub attach_RECETAs(ByVal entity As RECETA)
		Me.SendPropertyChanging
		entity.MEDICAMENTO = Me
	End Sub
	
	Private Sub detach_RECETAs(ByVal entity As RECETA)
		Me.SendPropertyChanging
		entity.MEDICAMENTO = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ComoConocio")>  _
Partial Public Class ComoConocio
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDConocio As Integer
	
	Private _Descripcion As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDConocioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDConocioChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDConocio", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDConocio() As Integer
		Get
			Return Me._IDConocio
		End Get
		Set
			If ((Me._IDConocio = value)  _
						= false) Then
				Me.OnIDConocioChanging(value)
				Me.SendPropertyChanging
				Me._IDConocio = value
				Me.SendPropertyChanged("IDConocio")
				Me.OnIDConocioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Auditoria")>  _
Partial Public Class Auditoria
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idLog As Long
	
	Private _FechaHora As Date
	
	Private _idUsuario As System.Nullable(Of Integer)
	
	Private _NombreUsuario As String
	
	Private _TipoDocumento As String
	
	Private _CodigoDocumento As String
	
	Private _DetallesDocumento As String
	
	Private _eAccion As Integer
	
	Private _eLocacion As Integer
	
	Private _loginUsuario As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidLogChanging(value As Long)
    End Sub
    Partial Private Sub OnidLogChanged()
    End Sub
    Partial Private Sub OnFechaHoraChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaHoraChanged()
    End Sub
    Partial Private Sub OnidUsuarioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidUsuarioChanged()
    End Sub
    Partial Private Sub OnNombreUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnNombreUsuarioChanged()
    End Sub
    Partial Private Sub OnTipoDocumentoChanging(value As String)
    End Sub
    Partial Private Sub OnTipoDocumentoChanged()
    End Sub
    Partial Private Sub OnCodigoDocumentoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoDocumentoChanged()
    End Sub
    Partial Private Sub OnDetallesDocumentoChanging(value As String)
    End Sub
    Partial Private Sub OnDetallesDocumentoChanged()
    End Sub
    Partial Private Sub OneAccionChanging(value As Integer)
    End Sub
    Partial Private Sub OneAccionChanged()
    End Sub
    Partial Private Sub OneLocacionChanging(value As Integer)
    End Sub
    Partial Private Sub OneLocacionChanged()
    End Sub
    Partial Private Sub OnloginUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnloginUsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idLog", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idLog() As Long
		Get
			Return Me._idLog
		End Get
		Set
			If ((Me._idLog = value)  _
						= false) Then
				Me.OnidLogChanging(value)
				Me.SendPropertyChanging
				Me._idLog = value
				Me.SendPropertyChanged("idLog")
				Me.OnidLogChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaHora", DbType:="DateTime NOT NULL")>  _
	Public Property FechaHora() As Date
		Get
			Return Me._FechaHora
		End Get
		Set
			If ((Me._FechaHora = value)  _
						= false) Then
				Me.OnFechaHoraChanging(value)
				Me.SendPropertyChanging
				Me._FechaHora = value
				Me.SendPropertyChanged("FechaHora")
				Me.OnFechaHoraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idUsuario", DbType:="Int")>  _
	Public Property idUsuario() As System.Nullable(Of Integer)
		Get
			Return Me._idUsuario
		End Get
		Set
			If (Me._idUsuario.Equals(value) = false) Then
				Me.OnidUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._idUsuario = value
				Me.SendPropertyChanged("idUsuario")
				Me.OnidUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreUsuario", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property NombreUsuario() As String
		Get
			Return Me._NombreUsuario
		End Get
		Set
			If (String.Equals(Me._NombreUsuario, value) = false) Then
				Me.OnNombreUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._NombreUsuario = value
				Me.SendPropertyChanged("NombreUsuario")
				Me.OnNombreUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoDocumento", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoDocumento() As String
		Get
			Return Me._TipoDocumento
		End Get
		Set
			If (String.Equals(Me._TipoDocumento, value) = false) Then
				Me.OnTipoDocumentoChanging(value)
				Me.SendPropertyChanging
				Me._TipoDocumento = value
				Me.SendPropertyChanged("TipoDocumento")
				Me.OnTipoDocumentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoDocumento", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CodigoDocumento() As String
		Get
			Return Me._CodigoDocumento
		End Get
		Set
			If (String.Equals(Me._CodigoDocumento, value) = false) Then
				Me.OnCodigoDocumentoChanging(value)
				Me.SendPropertyChanging
				Me._CodigoDocumento = value
				Me.SendPropertyChanged("CodigoDocumento")
				Me.OnCodigoDocumentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DetallesDocumento", DbType:="VarChar(300) NOT NULL", CanBeNull:=false)>  _
	Public Property DetallesDocumento() As String
		Get
			Return Me._DetallesDocumento
		End Get
		Set
			If (String.Equals(Me._DetallesDocumento, value) = false) Then
				Me.OnDetallesDocumentoChanging(value)
				Me.SendPropertyChanging
				Me._DetallesDocumento = value
				Me.SendPropertyChanged("DetallesDocumento")
				Me.OnDetallesDocumentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eAccion", DbType:="Int NOT NULL")>  _
	Public Property eAccion() As Integer
		Get
			Return Me._eAccion
		End Get
		Set
			If ((Me._eAccion = value)  _
						= false) Then
				Me.OneAccionChanging(value)
				Me.SendPropertyChanging
				Me._eAccion = value
				Me.SendPropertyChanged("eAccion")
				Me.OneAccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eLocacion", DbType:="Int NOT NULL")>  _
	Public Property eLocacion() As Integer
		Get
			Return Me._eLocacion
		End Get
		Set
			If ((Me._eLocacion = value)  _
						= false) Then
				Me.OneLocacionChanging(value)
				Me.SendPropertyChanging
				Me._eLocacion = value
				Me.SendPropertyChanged("eLocacion")
				Me.OneLocacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_loginUsuario", DbType:="NVarChar(50)")>  _
	Public Property loginUsuario() As String
		Get
			Return Me._loginUsuario
		End Get
		Set
			If (String.Equals(Me._loginUsuario, value) = false) Then
				Me.OnloginUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._loginUsuario = value
				Me.SendPropertyChanged("loginUsuario")
				Me.OnloginUsuarioChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_Almacen")>  _
Partial Public Class N_Almacen
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Almacen As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Observaciones As String
	
	Private _N_Factura_Lineas As EntitySet(Of N_Factura_Linea)
	
	Private _N_PedidosProveedor_Lineas As EntitySet(Of N_PedidosProveedor_Linea)
	
	Private _N_Ticket_Lineas As EntitySet(Of N_Ticket_Linea)
	
	Private _N_Articulos_ConsolidacionStocks As EntitySet(Of N_Articulos_ConsolidacionStock)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_AlmacenChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AlmacenChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_Factura_Lineas = New EntitySet(Of N_Factura_Linea)(AddressOf Me.attach_N_Factura_Lineas, AddressOf Me.detach_N_Factura_Lineas)
		Me._N_PedidosProveedor_Lineas = New EntitySet(Of N_PedidosProveedor_Linea)(AddressOf Me.attach_N_PedidosProveedor_Lineas, AddressOf Me.detach_N_PedidosProveedor_Lineas)
		Me._N_Ticket_Lineas = New EntitySet(Of N_Ticket_Linea)(AddressOf Me.attach_N_Ticket_Lineas, AddressOf Me.detach_N_Ticket_Lineas)
		Me._N_Articulos_ConsolidacionStocks = New EntitySet(Of N_Articulos_ConsolidacionStock)(AddressOf Me.attach_N_Articulos_ConsolidacionStocks, AddressOf Me.detach_N_Articulos_ConsolidacionStocks)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Almacen", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Almacen() As Integer
		Get
			Return Me._ID_Almacen
		End Get
		Set
			If ((Me._ID_Almacen = value)  _
						= false) Then
				Me.OnID_AlmacenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Almacen = value
				Me.SendPropertyChanged("ID_Almacen")
				Me.OnID_AlmacenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(50)")>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(200)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Almacen_N_Factura_Linea", Storage:="_N_Factura_Lineas", ThisKey:="ID_Almacen", OtherKey:="ID_Almacen")>  _
	Public Property N_Factura_Lineas() As EntitySet(Of N_Factura_Linea)
		Get
			Return Me._N_Factura_Lineas
		End Get
		Set
			Me._N_Factura_Lineas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Almacen_N_PedidosProveedor_Linea", Storage:="_N_PedidosProveedor_Lineas", ThisKey:="ID_Almacen", OtherKey:="ID_Almacen")>  _
	Public Property N_PedidosProveedor_Lineas() As EntitySet(Of N_PedidosProveedor_Linea)
		Get
			Return Me._N_PedidosProveedor_Lineas
		End Get
		Set
			Me._N_PedidosProveedor_Lineas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Almacen_N_Ticket_Linea", Storage:="_N_Ticket_Lineas", ThisKey:="ID_Almacen", OtherKey:="ID_Almacen")>  _
	Public Property N_Ticket_Lineas() As EntitySet(Of N_Ticket_Linea)
		Get
			Return Me._N_Ticket_Lineas
		End Get
		Set
			Me._N_Ticket_Lineas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Almacen_N_Articulos_ConsolidacionStock", Storage:="_N_Articulos_ConsolidacionStocks", ThisKey:="ID_Almacen", OtherKey:="ID_Almacen")>  _
	Public Property N_Articulos_ConsolidacionStocks() As EntitySet(Of N_Articulos_ConsolidacionStock)
		Get
			Return Me._N_Articulos_ConsolidacionStocks
		End Get
		Set
			Me._N_Articulos_ConsolidacionStocks.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_N_Factura_Lineas(ByVal entity As N_Factura_Linea)
		Me.SendPropertyChanging
		entity.N_Almacen = Me
	End Sub
	
	Private Sub detach_N_Factura_Lineas(ByVal entity As N_Factura_Linea)
		Me.SendPropertyChanging
		entity.N_Almacen = Nothing
	End Sub
	
	Private Sub attach_N_PedidosProveedor_Lineas(ByVal entity As N_PedidosProveedor_Linea)
		Me.SendPropertyChanging
		entity.N_Almacen = Me
	End Sub
	
	Private Sub detach_N_PedidosProveedor_Lineas(ByVal entity As N_PedidosProveedor_Linea)
		Me.SendPropertyChanging
		entity.N_Almacen = Nothing
	End Sub
	
	Private Sub attach_N_Ticket_Lineas(ByVal entity As N_Ticket_Linea)
		Me.SendPropertyChanging
		entity.N_Almacen = Me
	End Sub
	
	Private Sub detach_N_Ticket_Lineas(ByVal entity As N_Ticket_Linea)
		Me.SendPropertyChanging
		entity.N_Almacen = Nothing
	End Sub
	
	Private Sub attach_N_Articulos_ConsolidacionStocks(ByVal entity As N_Articulos_ConsolidacionStock)
		Me.SendPropertyChanging
		entity.N_Almacen = Me
	End Sub
	
	Private Sub detach_N_Articulos_ConsolidacionStocks(ByVal entity As N_Articulos_ConsolidacionStock)
		Me.SendPropertyChanging
		entity.N_Almacen = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Liquidacion_Medico_Linea")>  _
Partial Public Class Liquidacion_Medico_Linea
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id_Linea_Liquidacion As Long
	
	Private _ID_Liquidacion As System.Nullable(Of Long)
	
	Private _ID_LineaCita As System.Nullable(Of Long)
	
	Private _Descripcion As String
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _Importe As System.Nullable(Of Double)
	
	Private _ID_Usuario As String
	
	Private _Liquidacion_Medico As EntityRef(Of Liquidacion_Medico)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnId_Linea_LiquidacionChanging(value As Long)
    End Sub
    Partial Private Sub OnId_Linea_LiquidacionChanged()
    End Sub
    Partial Private Sub OnID_LiquidacionChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnID_LiquidacionChanged()
    End Sub
    Partial Private Sub OnID_LineaCitaChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnID_LineaCitaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Liquidacion_Medico = CType(Nothing, EntityRef(Of Liquidacion_Medico))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Linea_Liquidacion", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id_Linea_Liquidacion() As Long
		Get
			Return Me._Id_Linea_Liquidacion
		End Get
		Set
			If ((Me._Id_Linea_Liquidacion = value)  _
						= false) Then
				Me.OnId_Linea_LiquidacionChanging(value)
				Me.SendPropertyChanging
				Me._Id_Linea_Liquidacion = value
				Me.SendPropertyChanged("Id_Linea_Liquidacion")
				Me.OnId_Linea_LiquidacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Liquidacion", DbType:="BigInt")>  _
	Public Property ID_Liquidacion() As System.Nullable(Of Long)
		Get
			Return Me._ID_Liquidacion
		End Get
		Set
			If (Me._ID_Liquidacion.Equals(value) = false) Then
				If Me._Liquidacion_Medico.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_LiquidacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Liquidacion = value
				Me.SendPropertyChanged("ID_Liquidacion")
				Me.OnID_LiquidacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_LineaCita", DbType:="BigInt")>  _
	Public Property ID_LineaCita() As System.Nullable(Of Long)
		Get
			Return Me._ID_LineaCita
		End Get
		Set
			If (Me._ID_LineaCita.Equals(value) = false) Then
				Me.OnID_LineaCitaChanging(value)
				Me.SendPropertyChanging
				Me._ID_LineaCita = value
				Me.SendPropertyChanged("ID_LineaCita")
				Me.OnID_LineaCitaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(MAX)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="DateTime")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Float")>  _
	Public Property Importe() As System.Nullable(Of Double)
		Get
			Return Me._Importe
		End Get
		Set
			If (Me._Importe.Equals(value) = false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="NChar(10)")>  _
	Public Property ID_Usuario() As String
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If (String.Equals(Me._ID_Usuario, value) = false) Then
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Liquidacion_Medico_Liquidacion_Medico_Linea", Storage:="_Liquidacion_Medico", ThisKey:="ID_Liquidacion", OtherKey:="ID_Liquidacion", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property Liquidacion_Medico() As Liquidacion_Medico
		Get
			Return Me._Liquidacion_Medico.Entity
		End Get
		Set
			Dim previousValue As Liquidacion_Medico = Me._Liquidacion_Medico.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Liquidacion_Medico.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Liquidacion_Medico.Entity = Nothing
					previousValue.Liquidacion_Medico_Lineas.Remove(Me)
				End If
				Me._Liquidacion_Medico.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Liquidacion_Medico_Lineas.Add(Me)
					Me._ID_Liquidacion = value.ID_Liquidacion
				Else
					Me._ID_Liquidacion = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Liquidacion_Medico")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_Ticket_Lineas")>  _
Partial Public Class N_Ticket_Linea
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_TicketLineas As Long
	
	Private _ID_Ticket As Long
	
	Private _Codigo As String
	
	Private _ID_Articulo As System.Nullable(Of Long)
	
	Private _Descripcion As String
	
	Private _Cantidad As System.Nullable(Of Double)
	
	Private _Precio As System.Nullable(Of Double)
	
	Private _Descuento1 As System.Nullable(Of Double)
	
	Private _Descuento2 As System.Nullable(Of Double)
	
	Private _Descuento3 As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _IVAIncluido As Boolean
	
	Private _Costo As System.Nullable(Of Double)
	
	Private _Imagen As System.Data.Linq.Binary
	
	Private _Observaciones As String
	
	Private _ID_Almacen As System.Nullable(Of Integer)
	
	Private _Validado As System.Nullable(Of Boolean)
	
	Private _ID_DocOrigen As System.Nullable(Of Long)
	
	Private _ID_TipoDocOrigen As System.Nullable(Of Integer)
	
	Private _IVAPorciento As System.Nullable(Of Double)
	
	Private _IVAImporte As System.Nullable(Of Double)
	
	Private _N_Almacen As EntityRef(Of N_Almacen)
	
	Private _N_Ticket As EntityRef(Of N_Ticket)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_TicketLineasChanging(value As Long)
    End Sub
    Partial Private Sub OnID_TicketLineasChanged()
    End Sub
    Partial Private Sub OnID_TicketChanging(value As Long)
    End Sub
    Partial Private Sub OnID_TicketChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnID_ArticuloChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnID_ArticuloChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnCantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCantidadChanged()
    End Sub
    Partial Private Sub OnPrecioChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPrecioChanged()
    End Sub
    Partial Private Sub OnDescuento1Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuento1Changed()
    End Sub
    Partial Private Sub OnDescuento2Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuento2Changed()
    End Sub
    Partial Private Sub OnDescuento3Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuento3Changed()
    End Sub
    Partial Private Sub OnTotalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnIVAIncluidoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIVAIncluidoChanged()
    End Sub
    Partial Private Sub OnCostoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCostoChanged()
    End Sub
    Partial Private Sub OnImagenChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImagenChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnID_AlmacenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_AlmacenChanged()
    End Sub
    Partial Private Sub OnValidadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnValidadoChanged()
    End Sub
    Partial Private Sub OnID_DocOrigenChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnID_DocOrigenChanged()
    End Sub
    Partial Private Sub OnID_TipoDocOrigenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_TipoDocOrigenChanged()
    End Sub
    Partial Private Sub OnIVAPorcientoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnIVAPorcientoChanged()
    End Sub
    Partial Private Sub OnIVAImporteChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnIVAImporteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_Almacen = CType(Nothing, EntityRef(Of N_Almacen))
		Me._N_Ticket = CType(Nothing, EntityRef(Of N_Ticket))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TicketLineas", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_TicketLineas() As Long
		Get
			Return Me._ID_TicketLineas
		End Get
		Set
			If ((Me._ID_TicketLineas = value)  _
						= false) Then
				Me.OnID_TicketLineasChanging(value)
				Me.SendPropertyChanging
				Me._ID_TicketLineas = value
				Me.SendPropertyChanged("ID_TicketLineas")
				Me.OnID_TicketLineasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Ticket", DbType:="BigInt NOT NULL")>  _
	Public Property ID_Ticket() As Long
		Get
			Return Me._ID_Ticket
		End Get
		Set
			If ((Me._ID_Ticket = value)  _
						= false) Then
				If Me._N_Ticket.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_TicketChanging(value)
				Me.SendPropertyChanging
				Me._ID_Ticket = value
				Me.SendPropertyChanged("ID_Ticket")
				Me.OnID_TicketChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(50)")>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Articulo", DbType:="BigInt")>  _
	Public Property ID_Articulo() As System.Nullable(Of Long)
		Get
			Return Me._ID_Articulo
		End Get
		Set
			If (Me._ID_Articulo.Equals(value) = false) Then
				Me.OnID_ArticuloChanging(value)
				Me.SendPropertyChanging
				Me._ID_Articulo = value
				Me.SendPropertyChanged("ID_Articulo")
				Me.OnID_ArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cantidad", DbType:="Float")>  _
	Public Property Cantidad() As System.Nullable(Of Double)
		Get
			Return Me._Cantidad
		End Get
		Set
			If (Me._Cantidad.Equals(value) = false) Then
				Me.OnCantidadChanging(value)
				Me.SendPropertyChanging
				Me._Cantidad = value
				Me.SendPropertyChanged("Cantidad")
				Me.OnCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio", DbType:="Float")>  _
	Public Property Precio() As System.Nullable(Of Double)
		Get
			Return Me._Precio
		End Get
		Set
			If (Me._Precio.Equals(value) = false) Then
				Me.OnPrecioChanging(value)
				Me.SendPropertyChanging
				Me._Precio = value
				Me.SendPropertyChanged("Precio")
				Me.OnPrecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento1", DbType:="Float")>  _
	Public Property Descuento1() As System.Nullable(Of Double)
		Get
			Return Me._Descuento1
		End Get
		Set
			If (Me._Descuento1.Equals(value) = false) Then
				Me.OnDescuento1Changing(value)
				Me.SendPropertyChanging
				Me._Descuento1 = value
				Me.SendPropertyChanged("Descuento1")
				Me.OnDescuento1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento2", DbType:="Float")>  _
	Public Property Descuento2() As System.Nullable(Of Double)
		Get
			Return Me._Descuento2
		End Get
		Set
			If (Me._Descuento2.Equals(value) = false) Then
				Me.OnDescuento2Changing(value)
				Me.SendPropertyChanging
				Me._Descuento2 = value
				Me.SendPropertyChanged("Descuento2")
				Me.OnDescuento2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento3", DbType:="Float")>  _
	Public Property Descuento3() As System.Nullable(Of Double)
		Get
			Return Me._Descuento3
		End Get
		Set
			If (Me._Descuento3.Equals(value) = false) Then
				Me.OnDescuento3Changing(value)
				Me.SendPropertyChanging
				Me._Descuento3 = value
				Me.SendPropertyChanged("Descuento3")
				Me.OnDescuento3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IVAIncluido", DbType:="Bit NOT NULL")>  _
	Public Property IVAIncluido() As Boolean
		Get
			Return Me._IVAIncluido
		End Get
		Set
			If ((Me._IVAIncluido = value)  _
						= false) Then
				Me.OnIVAIncluidoChanging(value)
				Me.SendPropertyChanging
				Me._IVAIncluido = value
				Me.SendPropertyChanged("IVAIncluido")
				Me.OnIVAIncluidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Costo", DbType:="Float")>  _
	Public Property Costo() As System.Nullable(Of Double)
		Get
			Return Me._Costo
		End Get
		Set
			If (Me._Costo.Equals(value) = false) Then
				Me.OnCostoChanging(value)
				Me.SendPropertyChanging
				Me._Costo = value
				Me.SendPropertyChanged("Costo")
				Me.OnCostoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Imagen", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Imagen() As System.Data.Linq.Binary
		Get
			Return Me._Imagen
		End Get
		Set
			If (Object.Equals(Me._Imagen, value) = false) Then
				Me.OnImagenChanging(value)
				Me.SendPropertyChanging
				Me._Imagen = value
				Me.SendPropertyChanged("Imagen")
				Me.OnImagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Almacen", DbType:="Int")>  _
	Public Property ID_Almacen() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Almacen
		End Get
		Set
			If (Me._ID_Almacen.Equals(value) = false) Then
				If Me._N_Almacen.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AlmacenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Almacen = value
				Me.SendPropertyChanged("ID_Almacen")
				Me.OnID_AlmacenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validado", DbType:="Bit")>  _
	Public Property Validado() As System.Nullable(Of Boolean)
		Get
			Return Me._Validado
		End Get
		Set
			If (Me._Validado.Equals(value) = false) Then
				Me.OnValidadoChanging(value)
				Me.SendPropertyChanging
				Me._Validado = value
				Me.SendPropertyChanged("Validado")
				Me.OnValidadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_DocOrigen", DbType:="BigInt")>  _
	Public Property ID_DocOrigen() As System.Nullable(Of Long)
		Get
			Return Me._ID_DocOrigen
		End Get
		Set
			If (Me._ID_DocOrigen.Equals(value) = false) Then
				Me.OnID_DocOrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_DocOrigen = value
				Me.SendPropertyChanged("ID_DocOrigen")
				Me.OnID_DocOrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoDocOrigen", DbType:="Int")>  _
	Public Property ID_TipoDocOrigen() As System.Nullable(Of Integer)
		Get
			Return Me._ID_TipoDocOrigen
		End Get
		Set
			If (Me._ID_TipoDocOrigen.Equals(value) = false) Then
				Me.OnID_TipoDocOrigenChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoDocOrigen = value
				Me.SendPropertyChanged("ID_TipoDocOrigen")
				Me.OnID_TipoDocOrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IVAPorciento", DbType:="Float")>  _
	Public Property IVAPorciento() As System.Nullable(Of Double)
		Get
			Return Me._IVAPorciento
		End Get
		Set
			If (Me._IVAPorciento.Equals(value) = false) Then
				Me.OnIVAPorcientoChanging(value)
				Me.SendPropertyChanging
				Me._IVAPorciento = value
				Me.SendPropertyChanged("IVAPorciento")
				Me.OnIVAPorcientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IVAImporte", DbType:="Float")>  _
	Public Property IVAImporte() As System.Nullable(Of Double)
		Get
			Return Me._IVAImporte
		End Get
		Set
			If (Me._IVAImporte.Equals(value) = false) Then
				Me.OnIVAImporteChanging(value)
				Me.SendPropertyChanging
				Me._IVAImporte = value
				Me.SendPropertyChanged("IVAImporte")
				Me.OnIVAImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Almacen_N_Ticket_Linea", Storage:="_N_Almacen", ThisKey:="ID_Almacen", OtherKey:="ID_Almacen", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property N_Almacen() As N_Almacen
		Get
			Return Me._N_Almacen.Entity
		End Get
		Set
			Dim previousValue As N_Almacen = Me._N_Almacen.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_Almacen.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_Almacen.Entity = Nothing
					previousValue.N_Ticket_Lineas.Remove(Me)
				End If
				Me._N_Almacen.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Ticket_Lineas.Add(Me)
					Me._ID_Almacen = value.ID_Almacen
				Else
					Me._ID_Almacen = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("N_Almacen")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Ticket_N_Ticket_Linea", Storage:="_N_Ticket", ThisKey:="ID_Ticket", OtherKey:="ID_Ticket", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property N_Ticket() As N_Ticket
		Get
			Return Me._N_Ticket.Entity
		End Get
		Set
			Dim previousValue As N_Ticket = Me._N_Ticket.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_Ticket.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_Ticket.Entity = Nothing
					previousValue.N_Ticket_Lineas.Remove(Me)
				End If
				Me._N_Ticket.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Ticket_Lineas.Add(Me)
					Me._ID_Ticket = value.ID_Ticket
				Else
					Me._ID_Ticket = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("N_Ticket")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_Ticket")>  _
Partial Public Class N_Ticket
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Ticket As Long
	
	Private _Codigo As String
	
	Private _ID_TipoTicket As System.Nullable(Of Integer)
	
	Private _Referencia As String
	
	Private _Fecha As Date
	
	Private _ID_Estado As System.Nullable(Of Integer)
	
	Private _ID_Cliente As System.Nullable(Of Integer)
	
	Private _ID_FormaPago As String
	
	Private _IRPFPorciento As System.Nullable(Of Double)
	
	Private _IRPFCantidad As System.Nullable(Of Double)
	
	Private _Total As System.Nullable(Of Double)
	
	Private _Observaciones As String
	
	Private _PlazoEntrega As System.Nullable(Of Date)
	
	Private _Validez As String
	
	Private _PortePagado As System.Nullable(Of Boolean)
	
	Private _PorteDebido As System.Nullable(Of Boolean)
	
	Private _PorteTexto As String
	
	Private _Privado As String
	
	Private _DocumentacionAsociada As String
	
	Private _Comentarios As String
	
	Private _Imagen As System.Data.Linq.Binary
	
	Private _Pagado As Boolean
	
	Private _FechaPagado As System.Nullable(Of Date)
	
	Private _NombrePaciente As String
	
	Private _FormaPago As String
	
	Private _Eliminado As System.Nullable(Of Boolean)
	
	Private _PagadoConCredito As System.Nullable(Of Boolean)
	
	Private _IDEntregaCuenta As System.Nullable(Of Long)
	
	Private _N_Ticket_Lineas As EntitySet(Of N_Ticket_Linea)
	
	Private _FORMASPAGO As EntityRef(Of FORMASPAGO)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
	Private _EntregasCuenta As EntityRef(Of EntregasCuenta)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_TicketChanging(value As Long)
    End Sub
    Partial Private Sub OnID_TicketChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnID_TipoTicketChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_TipoTicketChanged()
    End Sub
    Partial Private Sub OnReferenciaChanging(value As String)
    End Sub
    Partial Private Sub OnReferenciaChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnID_EstadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_EstadoChanged()
    End Sub
    Partial Private Sub OnID_ClienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ClienteChanged()
    End Sub
    Partial Private Sub OnID_FormaPagoChanging(value As String)
    End Sub
    Partial Private Sub OnID_FormaPagoChanged()
    End Sub
    Partial Private Sub OnIRPFPorcientoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnIRPFPorcientoChanged()
    End Sub
    Partial Private Sub OnIRPFCantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnIRPFCantidadChanged()
    End Sub
    Partial Private Sub OnTotalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnPlazoEntregaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPlazoEntregaChanged()
    End Sub
    Partial Private Sub OnValidezChanging(value As String)
    End Sub
    Partial Private Sub OnValidezChanged()
    End Sub
    Partial Private Sub OnPortePagadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPortePagadoChanged()
    End Sub
    Partial Private Sub OnPorteDebidoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPorteDebidoChanged()
    End Sub
    Partial Private Sub OnPorteTextoChanging(value As String)
    End Sub
    Partial Private Sub OnPorteTextoChanged()
    End Sub
    Partial Private Sub OnPrivadoChanging(value As String)
    End Sub
    Partial Private Sub OnPrivadoChanged()
    End Sub
    Partial Private Sub OnDocumentacionAsociadaChanging(value As String)
    End Sub
    Partial Private Sub OnDocumentacionAsociadaChanged()
    End Sub
    Partial Private Sub OnComentariosChanging(value As String)
    End Sub
    Partial Private Sub OnComentariosChanged()
    End Sub
    Partial Private Sub OnImagenChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImagenChanged()
    End Sub
    Partial Private Sub OnPagadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPagadoChanged()
    End Sub
    Partial Private Sub OnFechaPagadoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaPagadoChanged()
    End Sub
    Partial Private Sub OnNombrePacienteChanging(value As String)
    End Sub
    Partial Private Sub OnNombrePacienteChanged()
    End Sub
    Partial Private Sub OnFormaPagoChanging(value As String)
    End Sub
    Partial Private Sub OnFormaPagoChanged()
    End Sub
    Partial Private Sub OnEliminadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEliminadoChanged()
    End Sub
    Partial Private Sub OnPagadoConCreditoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPagadoConCreditoChanged()
    End Sub
    Partial Private Sub OnIDEntregaCuentaChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnIDEntregaCuentaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_Ticket_Lineas = New EntitySet(Of N_Ticket_Linea)(AddressOf Me.attach_N_Ticket_Lineas, AddressOf Me.detach_N_Ticket_Lineas)
		Me._FORMASPAGO = CType(Nothing, EntityRef(Of FORMASPAGO))
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		Me._EntregasCuenta = CType(Nothing, EntityRef(Of EntregasCuenta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Ticket", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Ticket() As Long
		Get
			Return Me._ID_Ticket
		End Get
		Set
			If ((Me._ID_Ticket = value)  _
						= false) Then
				Me.OnID_TicketChanging(value)
				Me.SendPropertyChanging
				Me._ID_Ticket = value
				Me.SendPropertyChanged("ID_Ticket")
				Me.OnID_TicketChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(50)")>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_TipoTicket", DbType:="Int")>  _
	Public Property ID_TipoTicket() As System.Nullable(Of Integer)
		Get
			Return Me._ID_TipoTicket
		End Get
		Set
			If (Me._ID_TipoTicket.Equals(value) = false) Then
				Me.OnID_TipoTicketChanging(value)
				Me.SendPropertyChanging
				Me._ID_TipoTicket = value
				Me.SendPropertyChanged("ID_TipoTicket")
				Me.OnID_TipoTicketChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Referencia", DbType:="NVarChar(50)")>  _
	Public Property Referencia() As String
		Get
			Return Me._Referencia
		End Get
		Set
			If (String.Equals(Me._Referencia, value) = false) Then
				Me.OnReferenciaChanging(value)
				Me.SendPropertyChanging
				Me._Referencia = value
				Me.SendPropertyChanged("Referencia")
				Me.OnReferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="DateTime NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Estado", DbType:="Int")>  _
	Public Property ID_Estado() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Estado
		End Get
		Set
			If (Me._ID_Estado.Equals(value) = false) Then
				Me.OnID_EstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Estado = value
				Me.SendPropertyChanged("ID_Estado")
				Me.OnID_EstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Cliente", DbType:="Int")>  _
	Public Property ID_Cliente() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Cliente
		End Get
		Set
			If (Me._ID_Cliente.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Cliente = value
				Me.SendPropertyChanged("ID_Cliente")
				Me.OnID_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FormaPago", DbType:="VarChar(10)")>  _
	Public Property ID_FormaPago() As String
		Get
			Return Me._ID_FormaPago
		End Get
		Set
			If (String.Equals(Me._ID_FormaPago, value) = false) Then
				If Me._FORMASPAGO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._ID_FormaPago = value
				Me.SendPropertyChanged("ID_FormaPago")
				Me.OnID_FormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IRPFPorciento", DbType:="Float")>  _
	Public Property IRPFPorciento() As System.Nullable(Of Double)
		Get
			Return Me._IRPFPorciento
		End Get
		Set
			If (Me._IRPFPorciento.Equals(value) = false) Then
				Me.OnIRPFPorcientoChanging(value)
				Me.SendPropertyChanging
				Me._IRPFPorciento = value
				Me.SendPropertyChanged("IRPFPorciento")
				Me.OnIRPFPorcientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IRPFCantidad", DbType:="Float")>  _
	Public Property IRPFCantidad() As System.Nullable(Of Double)
		Get
			Return Me._IRPFCantidad
		End Get
		Set
			If (Me._IRPFCantidad.Equals(value) = false) Then
				Me.OnIRPFCantidadChanging(value)
				Me.SendPropertyChanging
				Me._IRPFCantidad = value
				Me.SendPropertyChanged("IRPFCantidad")
				Me.OnIRPFCantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
	Public Property Total() As System.Nullable(Of Double)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(200)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlazoEntrega", DbType:="DateTime")>  _
	Public Property PlazoEntrega() As System.Nullable(Of Date)
		Get
			Return Me._PlazoEntrega
		End Get
		Set
			If (Me._PlazoEntrega.Equals(value) = false) Then
				Me.OnPlazoEntregaChanging(value)
				Me.SendPropertyChanging
				Me._PlazoEntrega = value
				Me.SendPropertyChanged("PlazoEntrega")
				Me.OnPlazoEntregaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validez", DbType:="NVarChar(50)")>  _
	Public Property Validez() As String
		Get
			Return Me._Validez
		End Get
		Set
			If (String.Equals(Me._Validez, value) = false) Then
				Me.OnValidezChanging(value)
				Me.SendPropertyChanging
				Me._Validez = value
				Me.SendPropertyChanged("Validez")
				Me.OnValidezChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortePagado", DbType:="Bit")>  _
	Public Property PortePagado() As System.Nullable(Of Boolean)
		Get
			Return Me._PortePagado
		End Get
		Set
			If (Me._PortePagado.Equals(value) = false) Then
				Me.OnPortePagadoChanging(value)
				Me.SendPropertyChanging
				Me._PortePagado = value
				Me.SendPropertyChanged("PortePagado")
				Me.OnPortePagadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PorteDebido", DbType:="Bit")>  _
	Public Property PorteDebido() As System.Nullable(Of Boolean)
		Get
			Return Me._PorteDebido
		End Get
		Set
			If (Me._PorteDebido.Equals(value) = false) Then
				Me.OnPorteDebidoChanging(value)
				Me.SendPropertyChanging
				Me._PorteDebido = value
				Me.SendPropertyChanged("PorteDebido")
				Me.OnPorteDebidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PorteTexto", DbType:="NVarChar(50)")>  _
	Public Property PorteTexto() As String
		Get
			Return Me._PorteTexto
		End Get
		Set
			If (String.Equals(Me._PorteTexto, value) = false) Then
				Me.OnPorteTextoChanging(value)
				Me.SendPropertyChanging
				Me._PorteTexto = value
				Me.SendPropertyChanged("PorteTexto")
				Me.OnPorteTextoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Privado", DbType:="NVarChar(200)")>  _
	Public Property Privado() As String
		Get
			Return Me._Privado
		End Get
		Set
			If (String.Equals(Me._Privado, value) = false) Then
				Me.OnPrivadoChanging(value)
				Me.SendPropertyChanging
				Me._Privado = value
				Me.SendPropertyChanged("Privado")
				Me.OnPrivadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DocumentacionAsociada", DbType:="NVarChar(200)")>  _
	Public Property DocumentacionAsociada() As String
		Get
			Return Me._DocumentacionAsociada
		End Get
		Set
			If (String.Equals(Me._DocumentacionAsociada, value) = false) Then
				Me.OnDocumentacionAsociadaChanging(value)
				Me.SendPropertyChanging
				Me._DocumentacionAsociada = value
				Me.SendPropertyChanged("DocumentacionAsociada")
				Me.OnDocumentacionAsociadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comentarios", DbType:="NVarChar(200)")>  _
	Public Property Comentarios() As String
		Get
			Return Me._Comentarios
		End Get
		Set
			If (String.Equals(Me._Comentarios, value) = false) Then
				Me.OnComentariosChanging(value)
				Me.SendPropertyChanging
				Me._Comentarios = value
				Me.SendPropertyChanged("Comentarios")
				Me.OnComentariosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Imagen", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Imagen() As System.Data.Linq.Binary
		Get
			Return Me._Imagen
		End Get
		Set
			If (Object.Equals(Me._Imagen, value) = false) Then
				Me.OnImagenChanging(value)
				Me.SendPropertyChanging
				Me._Imagen = value
				Me.SendPropertyChanged("Imagen")
				Me.OnImagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pagado", DbType:="Bit NOT NULL")>  _
	Public Property Pagado() As Boolean
		Get
			Return Me._Pagado
		End Get
		Set
			If ((Me._Pagado = value)  _
						= false) Then
				Me.OnPagadoChanging(value)
				Me.SendPropertyChanging
				Me._Pagado = value
				Me.SendPropertyChanged("Pagado")
				Me.OnPagadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaPagado", DbType:="DateTime")>  _
	Public Property FechaPagado() As System.Nullable(Of Date)
		Get
			Return Me._FechaPagado
		End Get
		Set
			If (Me._FechaPagado.Equals(value) = false) Then
				Me.OnFechaPagadoChanging(value)
				Me.SendPropertyChanging
				Me._FechaPagado = value
				Me.SendPropertyChanged("FechaPagado")
				Me.OnFechaPagadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombrePaciente", DbType:="NVarChar(50)")>  _
	Public Property NombrePaciente() As String
		Get
			Return Me._NombrePaciente
		End Get
		Set
			If (String.Equals(Me._NombrePaciente, value) = false) Then
				Me.OnNombrePacienteChanging(value)
				Me.SendPropertyChanging
				Me._NombrePaciente = value
				Me.SendPropertyChanged("NombrePaciente")
				Me.OnNombrePacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FormaPago", DbType:="NVarChar(50)")>  _
	Public Property FormaPago() As String
		Get
			Return Me._FormaPago
		End Get
		Set
			If (String.Equals(Me._FormaPago, value) = false) Then
				Me.OnFormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._FormaPago = value
				Me.SendPropertyChanged("FormaPago")
				Me.OnFormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Eliminado", DbType:="Bit")>  _
	Public Property Eliminado() As System.Nullable(Of Boolean)
		Get
			Return Me._Eliminado
		End Get
		Set
			If (Me._Eliminado.Equals(value) = false) Then
				Me.OnEliminadoChanging(value)
				Me.SendPropertyChanging
				Me._Eliminado = value
				Me.SendPropertyChanged("Eliminado")
				Me.OnEliminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PagadoConCredito", DbType:="Bit")>  _
	Public Property PagadoConCredito() As System.Nullable(Of Boolean)
		Get
			Return Me._PagadoConCredito
		End Get
		Set
			If (Me._PagadoConCredito.Equals(value) = false) Then
				Me.OnPagadoConCreditoChanging(value)
				Me.SendPropertyChanging
				Me._PagadoConCredito = value
				Me.SendPropertyChanged("PagadoConCredito")
				Me.OnPagadoConCreditoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDEntregaCuenta", DbType:="BigInt")>  _
	Public Property IDEntregaCuenta() As System.Nullable(Of Long)
		Get
			Return Me._IDEntregaCuenta
		End Get
		Set
			If (Me._IDEntregaCuenta.Equals(value) = false) Then
				If Me._EntregasCuenta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDEntregaCuentaChanging(value)
				Me.SendPropertyChanging
				Me._IDEntregaCuenta = value
				Me.SendPropertyChanged("IDEntregaCuenta")
				Me.OnIDEntregaCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Ticket_N_Ticket_Linea", Storage:="_N_Ticket_Lineas", ThisKey:="ID_Ticket", OtherKey:="ID_Ticket")>  _
	Public Property N_Ticket_Lineas() As EntitySet(Of N_Ticket_Linea)
		Get
			Return Me._N_Ticket_Lineas
		End Get
		Set
			Me._N_Ticket_Lineas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_N_Ticket", Storage:="_FORMASPAGO", ThisKey:="ID_FormaPago", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property FORMASPAGO() As FORMASPAGO
		Get
			Return Me._FORMASPAGO.Entity
		End Get
		Set
			Dim previousValue As FORMASPAGO = Me._FORMASPAGO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FORMASPAGO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FORMASPAGO.Entity = Nothing
					previousValue.N_Tickets.Remove(Me)
				End If
				Me._FORMASPAGO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Tickets.Add(Me)
					Me._ID_FormaPago = value.CODIGO
				Else
					Me._ID_FormaPago = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("FORMASPAGO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_N_Ticket", Storage:="_PACIENTE", ThisKey:="ID_Cliente", OtherKey:="CPACIENTE", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.N_Tickets.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Tickets.Add(Me)
					Me._ID_Cliente = value.CPACIENTE
				Else
					Me._ID_Cliente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EntregasCuenta_N_Ticket", Storage:="_EntregasCuenta", ThisKey:="IDEntregaCuenta", OtherKey:="IDEntregaCuenta", IsForeignKey:=true)>  _
	Public Property EntregasCuenta() As EntregasCuenta
		Get
			Return Me._EntregasCuenta.Entity
		End Get
		Set
			Dim previousValue As EntregasCuenta = Me._EntregasCuenta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EntregasCuenta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EntregasCuenta.Entity = Nothing
					previousValue.N_Tickets.Remove(Me)
				End If
				Me._EntregasCuenta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Tickets.Add(Me)
					Me._IDEntregaCuenta = value.IDEntregaCuenta
				Else
					Me._IDEntregaCuenta = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("EntregasCuenta")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_N_Ticket_Lineas(ByVal entity As N_Ticket_Linea)
		Me.SendPropertyChanging
		entity.N_Ticket = Me
	End Sub
	
	Private Sub detach_N_Ticket_Lineas(ByVal entity As N_Ticket_Linea)
		Me.SendPropertyChanging
		entity.N_Ticket = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_Articulos_ConsolidacionStock")>  _
Partial Public Class N_Articulos_ConsolidacionStock
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Consolidacion As Long
	
	Private _ID_Articulo As System.Nullable(Of Long)
	
	Private _ID_Almacen As System.Nullable(Of Integer)
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _StockActual As System.Nullable(Of Double)
	
	Private _UnidadesContadas As System.Nullable(Of Double)
	
	Private _RestarAUnidadesContadas As System.Nullable(Of Boolean)
	
	Private _Disponibles As System.Nullable(Of Double)
	
	Private _N_Almacen As EntityRef(Of N_Almacen)
	
	Private _N_Articulo As EntityRef(Of N_Articulo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ConsolidacionChanging(value As Long)
    End Sub
    Partial Private Sub OnID_ConsolidacionChanged()
    End Sub
    Partial Private Sub OnID_ArticuloChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnID_ArticuloChanged()
    End Sub
    Partial Private Sub OnID_AlmacenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_AlmacenChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnStockActualChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnStockActualChanged()
    End Sub
    Partial Private Sub OnUnidadesContadasChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnUnidadesContadasChanged()
    End Sub
    Partial Private Sub OnRestarAUnidadesContadasChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRestarAUnidadesContadasChanged()
    End Sub
    Partial Private Sub OnDisponiblesChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDisponiblesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._N_Almacen = CType(Nothing, EntityRef(Of N_Almacen))
		Me._N_Articulo = CType(Nothing, EntityRef(Of N_Articulo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Consolidacion", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Consolidacion() As Long
		Get
			Return Me._ID_Consolidacion
		End Get
		Set
			If ((Me._ID_Consolidacion = value)  _
						= false) Then
				Me.OnID_ConsolidacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Consolidacion = value
				Me.SendPropertyChanged("ID_Consolidacion")
				Me.OnID_ConsolidacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Articulo", DbType:="BigInt")>  _
	Public Property ID_Articulo() As System.Nullable(Of Long)
		Get
			Return Me._ID_Articulo
		End Get
		Set
			If (Me._ID_Articulo.Equals(value) = false) Then
				If Me._N_Articulo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ArticuloChanging(value)
				Me.SendPropertyChanging
				Me._ID_Articulo = value
				Me.SendPropertyChanged("ID_Articulo")
				Me.OnID_ArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Almacen", DbType:="Int")>  _
	Public Property ID_Almacen() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Almacen
		End Get
		Set
			If (Me._ID_Almacen.Equals(value) = false) Then
				If Me._N_Almacen.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AlmacenChanging(value)
				Me.SendPropertyChanging
				Me._ID_Almacen = value
				Me.SendPropertyChanged("ID_Almacen")
				Me.OnID_AlmacenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="DateTime")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StockActual", DbType:="Float")>  _
	Public Property StockActual() As System.Nullable(Of Double)
		Get
			Return Me._StockActual
		End Get
		Set
			If (Me._StockActual.Equals(value) = false) Then
				Me.OnStockActualChanging(value)
				Me.SendPropertyChanging
				Me._StockActual = value
				Me.SendPropertyChanged("StockActual")
				Me.OnStockActualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnidadesContadas", DbType:="Float")>  _
	Public Property UnidadesContadas() As System.Nullable(Of Double)
		Get
			Return Me._UnidadesContadas
		End Get
		Set
			If (Me._UnidadesContadas.Equals(value) = false) Then
				Me.OnUnidadesContadasChanging(value)
				Me.SendPropertyChanging
				Me._UnidadesContadas = value
				Me.SendPropertyChanged("UnidadesContadas")
				Me.OnUnidadesContadasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RestarAUnidadesContadas", DbType:="Bit")>  _
	Public Property RestarAUnidadesContadas() As System.Nullable(Of Boolean)
		Get
			Return Me._RestarAUnidadesContadas
		End Get
		Set
			If (Me._RestarAUnidadesContadas.Equals(value) = false) Then
				Me.OnRestarAUnidadesContadasChanging(value)
				Me.SendPropertyChanging
				Me._RestarAUnidadesContadas = value
				Me.SendPropertyChanged("RestarAUnidadesContadas")
				Me.OnRestarAUnidadesContadasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Disponibles", DbType:="Float")>  _
	Public Property Disponibles() As System.Nullable(Of Double)
		Get
			Return Me._Disponibles
		End Get
		Set
			If (Me._Disponibles.Equals(value) = false) Then
				Me.OnDisponiblesChanging(value)
				Me.SendPropertyChanging
				Me._Disponibles = value
				Me.SendPropertyChanged("Disponibles")
				Me.OnDisponiblesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Almacen_N_Articulos_ConsolidacionStock", Storage:="_N_Almacen", ThisKey:="ID_Almacen", OtherKey:="ID_Almacen", IsForeignKey:=true)>  _
	Public Property N_Almacen() As N_Almacen
		Get
			Return Me._N_Almacen.Entity
		End Get
		Set
			Dim previousValue As N_Almacen = Me._N_Almacen.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_Almacen.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_Almacen.Entity = Nothing
					previousValue.N_Articulos_ConsolidacionStocks.Remove(Me)
				End If
				Me._N_Almacen.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Articulos_ConsolidacionStocks.Add(Me)
					Me._ID_Almacen = value.ID_Almacen
				Else
					Me._ID_Almacen = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("N_Almacen")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Articulo_N_Articulos_ConsolidacionStock", Storage:="_N_Articulo", ThisKey:="ID_Articulo", OtherKey:="ID_Articulo", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property N_Articulo() As N_Articulo
		Get
			Return Me._N_Articulo.Entity
		End Get
		Set
			Dim previousValue As N_Articulo = Me._N_Articulo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_Articulo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_Articulo.Entity = Nothing
					previousValue.N_Articulos_ConsolidacionStocks.Remove(Me)
				End If
				Me._N_Articulo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Articulos_ConsolidacionStocks.Add(Me)
					Me._ID_Articulo = value.ID_Articulo
				Else
					Me._ID_Articulo = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("N_Articulo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MEDICOS_FICHEROS")>  _
Partial Public Class MEDICOS_FICHERO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Fichero As Long
	
	Private _ID_Medico As Integer
	
	Private _NombreFichero As String
	
	Private _Descripcion As String
	
	Private _FechaSubido As System.Nullable(Of Date)
	
	Private _FechaModificado As System.Nullable(Of Date)
	
	Private _Fichero As System.Data.Linq.Binary
	
	Private _ID_Usuario As System.Nullable(Of Integer)
	
	Private _MEDICO As EntityRef(Of MEDICO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_FicheroChanging(value As Long)
    End Sub
    Partial Private Sub OnID_FicheroChanged()
    End Sub
    Partial Private Sub OnID_MedicoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_MedicoChanged()
    End Sub
    Partial Private Sub OnNombreFicheroChanging(value As String)
    End Sub
    Partial Private Sub OnNombreFicheroChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaSubidoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaSubidoChanged()
    End Sub
    Partial Private Sub OnFechaModificadoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaModificadoChanged()
    End Sub
    Partial Private Sub OnFicheroChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFicheroChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MEDICO = CType(Nothing, EntityRef(Of MEDICO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Fichero", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Fichero() As Long
		Get
			Return Me._ID_Fichero
		End Get
		Set
			If ((Me._ID_Fichero = value)  _
						= false) Then
				Me.OnID_FicheroChanging(value)
				Me.SendPropertyChanging
				Me._ID_Fichero = value
				Me.SendPropertyChanged("ID_Fichero")
				Me.OnID_FicheroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Medico", DbType:="Int NOT NULL")>  _
	Public Property ID_Medico() As Integer
		Get
			Return Me._ID_Medico
		End Get
		Set
			If ((Me._ID_Medico = value)  _
						= false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_MedicoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Medico = value
				Me.SendPropertyChanged("ID_Medico")
				Me.OnID_MedicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreFichero", DbType:="NVarChar(100)")>  _
	Public Property NombreFichero() As String
		Get
			Return Me._NombreFichero
		End Get
		Set
			If (String.Equals(Me._NombreFichero, value) = false) Then
				Me.OnNombreFicheroChanging(value)
				Me.SendPropertyChanging
				Me._NombreFichero = value
				Me.SendPropertyChanged("NombreFichero")
				Me.OnNombreFicheroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(MAX)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaSubido", DbType:="DateTime")>  _
	Public Property FechaSubido() As System.Nullable(Of Date)
		Get
			Return Me._FechaSubido
		End Get
		Set
			If (Me._FechaSubido.Equals(value) = false) Then
				Me.OnFechaSubidoChanging(value)
				Me.SendPropertyChanging
				Me._FechaSubido = value
				Me.SendPropertyChanged("FechaSubido")
				Me.OnFechaSubidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaModificado", DbType:="DateTime")>  _
	Public Property FechaModificado() As System.Nullable(Of Date)
		Get
			Return Me._FechaModificado
		End Get
		Set
			If (Me._FechaModificado.Equals(value) = false) Then
				Me.OnFechaModificadoChanging(value)
				Me.SendPropertyChanging
				Me._FechaModificado = value
				Me.SendPropertyChanged("FechaModificado")
				Me.OnFechaModificadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fichero", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fichero() As System.Data.Linq.Binary
		Get
			Return Me._Fichero
		End Get
		Set
			If (Object.Equals(Me._Fichero, value) = false) Then
				Me.OnFicheroChanging(value)
				Me.SendPropertyChanging
				Me._Fichero = value
				Me.SendPropertyChanged("Fichero")
				Me.OnFicheroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int")>  _
	Public Property ID_Usuario() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If (Me._ID_Usuario.Equals(value) = false) Then
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_MEDICOS_FICHERO", Storage:="_MEDICO", ThisKey:="ID_Medico", OtherKey:="CMEDICO", IsForeignKey:=true)>  _
	Public Property MEDICO() As MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.MEDICOS_FICHEROs.Remove(Me)
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MEDICOS_FICHEROs.Add(Me)
					Me._ID_Medico = value.CMEDICO
				Else
					Me._ID_Medico = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("MEDICO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MODELOSDATOS")>  _
Partial Public Class MODELOSDATO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As Integer
	
	Private _NOMBREDATO As String
	
	Private _TIPODATO As String
	
	Private _REFMODELOCOMPARATIVA As String
	
	Private _ORDEN As System.Nullable(Of Integer)
	
	Private _XMLDEF As String
	
	Private _DXML As System.Xml.Linq.XElement
	
	Private _Repetir As System.Nullable(Of Boolean)
	
	Private _CalcDiferencia As System.Nullable(Of Boolean)
	
	Private _OcultarEnReporte As System.Nullable(Of Boolean)
	
	Private _OcultarImpresionCliente As System.Nullable(Of Boolean)
	
	Private _DATOSCOMPARATIVAs As EntitySet(Of DATOSCOMPARATIVA)
	
	Private _MODELOSCOMPARATIVA As EntityRef(Of MODELOSCOMPARATIVA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As Integer)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnNOMBREDATOChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREDATOChanged()
    End Sub
    Partial Private Sub OnTIPODATOChanging(value As String)
    End Sub
    Partial Private Sub OnTIPODATOChanged()
    End Sub
    Partial Private Sub OnREFMODELOCOMPARATIVAChanging(value As String)
    End Sub
    Partial Private Sub OnREFMODELOCOMPARATIVAChanged()
    End Sub
    Partial Private Sub OnORDENChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDENChanged()
    End Sub
    Partial Private Sub OnXMLDEFChanging(value As String)
    End Sub
    Partial Private Sub OnXMLDEFChanged()
    End Sub
    Partial Private Sub OnDXMLChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnDXMLChanged()
    End Sub
    Partial Private Sub OnRepetirChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRepetirChanged()
    End Sub
    Partial Private Sub OnCalcDiferenciaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCalcDiferenciaChanged()
    End Sub
    Partial Private Sub OnOcultarEnReporteChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnOcultarEnReporteChanged()
    End Sub
    Partial Private Sub OnOcultarImpresionClienteChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnOcultarImpresionClienteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DATOSCOMPARATIVAs = New EntitySet(Of DATOSCOMPARATIVA)(AddressOf Me.attach_DATOSCOMPARATIVAs, AddressOf Me.detach_DATOSCOMPARATIVAs)
		Me._MODELOSCOMPARATIVA = CType(Nothing, EntityRef(Of MODELOSCOMPARATIVA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CODIGO() As Integer
		Get
			Return Me._CODIGO
		End Get
		Set
			If ((Me._CODIGO = value)  _
						= false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBREDATO", DbType:="VarChar(150)")>  _
	Public Property NOMBREDATO() As String
		Get
			Return Me._NOMBREDATO
		End Get
		Set
			If (String.Equals(Me._NOMBREDATO, value) = false) Then
				Me.OnNOMBREDATOChanging(value)
				Me.SendPropertyChanging
				Me._NOMBREDATO = value
				Me.SendPropertyChanged("NOMBREDATO")
				Me.OnNOMBREDATOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TIPODATO", DbType:="VarChar(1)")>  _
	Public Property TIPODATO() As String
		Get
			Return Me._TIPODATO
		End Get
		Set
			If (String.Equals(Me._TIPODATO, value) = false) Then
				Me.OnTIPODATOChanging(value)
				Me.SendPropertyChanging
				Me._TIPODATO = value
				Me.SendPropertyChanged("TIPODATO")
				Me.OnTIPODATOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMODELOCOMPARATIVA", DbType:="VarChar(12)")>  _
	Public Property REFMODELOCOMPARATIVA() As String
		Get
			Return Me._REFMODELOCOMPARATIVA
		End Get
		Set
			If (String.Equals(Me._REFMODELOCOMPARATIVA, value) = false) Then
				If Me._MODELOSCOMPARATIVA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMODELOCOMPARATIVAChanging(value)
				Me.SendPropertyChanging
				Me._REFMODELOCOMPARATIVA = value
				Me.SendPropertyChanged("REFMODELOCOMPARATIVA")
				Me.OnREFMODELOCOMPARATIVAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDEN", DbType:="Int")>  _
	Public Property ORDEN() As System.Nullable(Of Integer)
		Get
			Return Me._ORDEN
		End Get
		Set
			If (Me._ORDEN.Equals(value) = false) Then
				Me.OnORDENChanging(value)
				Me.SendPropertyChanging
				Me._ORDEN = value
				Me.SendPropertyChanged("ORDEN")
				Me.OnORDENChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_XMLDEF", DbType:="NVarChar(MAX)")>  _
	Public Property XMLDEF() As String
		Get
			Return Me._XMLDEF
		End Get
		Set
			If (String.Equals(Me._XMLDEF, value) = false) Then
				Me.OnXMLDEFChanging(value)
				Me.SendPropertyChanging
				Me._XMLDEF = value
				Me.SendPropertyChanged("XMLDEF")
				Me.OnXMLDEFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DXML", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DXML() As System.Xml.Linq.XElement
		Get
			Return Me._DXML
		End Get
		Set
			If (Object.Equals(Me._DXML, value) = false) Then
				Me.OnDXMLChanging(value)
				Me.SendPropertyChanging
				Me._DXML = value
				Me.SendPropertyChanged("DXML")
				Me.OnDXMLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Repetir", DbType:="Bit")>  _
	Public Property Repetir() As System.Nullable(Of Boolean)
		Get
			Return Me._Repetir
		End Get
		Set
			If (Me._Repetir.Equals(value) = false) Then
				Me.OnRepetirChanging(value)
				Me.SendPropertyChanging
				Me._Repetir = value
				Me.SendPropertyChanged("Repetir")
				Me.OnRepetirChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CalcDiferencia", DbType:="Bit")>  _
	Public Property CalcDiferencia() As System.Nullable(Of Boolean)
		Get
			Return Me._CalcDiferencia
		End Get
		Set
			If (Me._CalcDiferencia.Equals(value) = false) Then
				Me.OnCalcDiferenciaChanging(value)
				Me.SendPropertyChanging
				Me._CalcDiferencia = value
				Me.SendPropertyChanged("CalcDiferencia")
				Me.OnCalcDiferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OcultarEnReporte", DbType:="Bit")>  _
	Public Property OcultarEnReporte() As System.Nullable(Of Boolean)
		Get
			Return Me._OcultarEnReporte
		End Get
		Set
			If (Me._OcultarEnReporte.Equals(value) = false) Then
				Me.OnOcultarEnReporteChanging(value)
				Me.SendPropertyChanging
				Me._OcultarEnReporte = value
				Me.SendPropertyChanged("OcultarEnReporte")
				Me.OnOcultarEnReporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OcultarImpresionCliente", DbType:="bit")>  _
	Public Property OcultarImpresionCliente() As System.Nullable(Of Boolean)
		Get
			Return Me._OcultarImpresionCliente
		End Get
		Set
			If (Me._OcultarImpresionCliente.Equals(value) = false) Then
				Me.OnOcultarImpresionClienteChanging(value)
				Me.SendPropertyChanging
				Me._OcultarImpresionCliente = value
				Me.SendPropertyChanged("OcultarImpresionCliente")
				Me.OnOcultarImpresionClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MODELOSDATO_DATOSCOMPARATIVA", Storage:="_DATOSCOMPARATIVAs", ThisKey:="CODIGO", OtherKey:="REFMODELODATO")>  _
	Public Property DATOSCOMPARATIVAs() As EntitySet(Of DATOSCOMPARATIVA)
		Get
			Return Me._DATOSCOMPARATIVAs
		End Get
		Set
			Me._DATOSCOMPARATIVAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MODELOSCOMPARATIVA_MODELOSDATO", Storage:="_MODELOSCOMPARATIVA", ThisKey:="REFMODELOCOMPARATIVA", OtherKey:="CODIGO", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property MODELOSCOMPARATIVA() As MODELOSCOMPARATIVA
		Get
			Return Me._MODELOSCOMPARATIVA.Entity
		End Get
		Set
			Dim previousValue As MODELOSCOMPARATIVA = Me._MODELOSCOMPARATIVA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MODELOSCOMPARATIVA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MODELOSCOMPARATIVA.Entity = Nothing
					previousValue.MODELOSDATOs.Remove(Me)
				End If
				Me._MODELOSCOMPARATIVA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MODELOSDATOs.Add(Me)
					Me._REFMODELOCOMPARATIVA = value.CODIGO
				Else
					Me._REFMODELOCOMPARATIVA = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MODELOSCOMPARATIVA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DATOSCOMPARATIVAs(ByVal entity As DATOSCOMPARATIVA)
		Me.SendPropertyChanging
		entity.MODELOSDATO = Me
	End Sub
	
	Private Sub detach_DATOSCOMPARATIVAs(ByVal entity As DATOSCOMPARATIVA)
		Me.SendPropertyChanging
		entity.MODELOSDATO = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HISTORIALES")>  _
Partial Public Class HISTORIALE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _REFPACIENTE As Integer
	
	Private _REFMEDICO As Integer
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _MOTIVO As String
	
	Private _ANTECEDENTES As String
	
	Private _EXPLORACION As String
	
	Private _COMPLEMENTARIAS As String
	
	Private _JUICIO As String
	
	Private _TRATAMIENTO As String
	
	Private _HISTORIAL As String
	
	Private _COMENTARIOS As String
	
	Private _CHISTORIAL As Integer
	
	Private _OTROS As String
	
	Private _HORA As System.Nullable(Of Date)
	
	Private _REFDIAGNOSTICO As System.Nullable(Of Integer)
	
	Private _ParentHistorial As System.Nullable(Of Integer)
	
	Private _Eliminado As System.Nullable(Of Boolean)
	
	Private _HistorialesDiagnosticos As EntitySet(Of HistorialesDiagnostico)
	
	Private _LHISTORIALEs As EntitySet(Of LHISTORIALE)
	
	Private _HISTORIALEs As EntitySet(Of HISTORIALE)
	
	Private _HISTORIALES_REVISIONES As EntitySet(Of HISTORIALES_REVISIONES)
	
	Private _HISTORIALE As EntityRef(Of HISTORIALE)
	
	Private _MEDICO As EntityRef(Of MEDICO)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As Integer)
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnREFMEDICOChanging(value As Integer)
    End Sub
    Partial Private Sub OnREFMEDICOChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnMOTIVOChanging(value As String)
    End Sub
    Partial Private Sub OnMOTIVOChanged()
    End Sub
    Partial Private Sub OnANTECEDENTESChanging(value As String)
    End Sub
    Partial Private Sub OnANTECEDENTESChanged()
    End Sub
    Partial Private Sub OnEXPLORACIONChanging(value As String)
    End Sub
    Partial Private Sub OnEXPLORACIONChanged()
    End Sub
    Partial Private Sub OnCOMPLEMENTARIASChanging(value As String)
    End Sub
    Partial Private Sub OnCOMPLEMENTARIASChanged()
    End Sub
    Partial Private Sub OnJUICIOChanging(value As String)
    End Sub
    Partial Private Sub OnJUICIOChanged()
    End Sub
    Partial Private Sub OnTRATAMIENTOChanging(value As String)
    End Sub
    Partial Private Sub OnTRATAMIENTOChanged()
    End Sub
    Partial Private Sub OnHISTORIALChanging(value As String)
    End Sub
    Partial Private Sub OnHISTORIALChanged()
    End Sub
    Partial Private Sub OnCOMENTARIOSChanging(value As String)
    End Sub
    Partial Private Sub OnCOMENTARIOSChanged()
    End Sub
    Partial Private Sub OnCHISTORIALChanging(value As Integer)
    End Sub
    Partial Private Sub OnCHISTORIALChanged()
    End Sub
    Partial Private Sub OnOTROSChanging(value As String)
    End Sub
    Partial Private Sub OnOTROSChanged()
    End Sub
    Partial Private Sub OnHORAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHORAChanged()
    End Sub
    Partial Private Sub OnREFDIAGNOSTICOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFDIAGNOSTICOChanged()
    End Sub
    Partial Private Sub OnParentHistorialChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentHistorialChanged()
    End Sub
    Partial Private Sub OnEliminadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEliminadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HistorialesDiagnosticos = New EntitySet(Of HistorialesDiagnostico)(AddressOf Me.attach_HistorialesDiagnosticos, AddressOf Me.detach_HistorialesDiagnosticos)
		Me._LHISTORIALEs = New EntitySet(Of LHISTORIALE)(AddressOf Me.attach_LHISTORIALEs, AddressOf Me.detach_LHISTORIALEs)
		Me._HISTORIALEs = New EntitySet(Of HISTORIALE)(AddressOf Me.attach_HISTORIALEs, AddressOf Me.detach_HISTORIALEs)
		Me._HISTORIALES_REVISIONES = New EntitySet(Of HISTORIALES_REVISIONES)(AddressOf Me.attach_HISTORIALES_REVISIONES, AddressOf Me.detach_HISTORIALES_REVISIONES)
		Me._HISTORIALE = CType(Nothing, EntityRef(Of HISTORIALE))
		Me._MEDICO = CType(Nothing, EntityRef(Of MEDICO))
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int NOT NULL")>  _
	Public Property REFPACIENTE() As Integer
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If ((Me._REFPACIENTE = value)  _
						= false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMEDICO", DbType:="Int NOT NULL")>  _
	Public Property REFMEDICO() As Integer
		Get
			Return Me._REFMEDICO
		End Get
		Set
			If ((Me._REFMEDICO = value)  _
						= false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMEDICOChanging(value)
				Me.SendPropertyChanging
				Me._REFMEDICO = value
				Me.SendPropertyChanged("REFMEDICO")
				Me.OnREFMEDICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime")>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOTIVO", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MOTIVO() As String
		Get
			Return Me._MOTIVO
		End Get
		Set
			If (String.Equals(Me._MOTIVO, value) = false) Then
				Me.OnMOTIVOChanging(value)
				Me.SendPropertyChanging
				Me._MOTIVO = value
				Me.SendPropertyChanged("MOTIVO")
				Me.OnMOTIVOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ANTECEDENTES", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ANTECEDENTES() As String
		Get
			Return Me._ANTECEDENTES
		End Get
		Set
			If (String.Equals(Me._ANTECEDENTES, value) = false) Then
				Me.OnANTECEDENTESChanging(value)
				Me.SendPropertyChanging
				Me._ANTECEDENTES = value
				Me.SendPropertyChanged("ANTECEDENTES")
				Me.OnANTECEDENTESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXPLORACION", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EXPLORACION() As String
		Get
			Return Me._EXPLORACION
		End Get
		Set
			If (String.Equals(Me._EXPLORACION, value) = false) Then
				Me.OnEXPLORACIONChanging(value)
				Me.SendPropertyChanging
				Me._EXPLORACION = value
				Me.SendPropertyChanged("EXPLORACION")
				Me.OnEXPLORACIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMPLEMENTARIAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property COMPLEMENTARIAS() As String
		Get
			Return Me._COMPLEMENTARIAS
		End Get
		Set
			If (String.Equals(Me._COMPLEMENTARIAS, value) = false) Then
				Me.OnCOMPLEMENTARIASChanging(value)
				Me.SendPropertyChanging
				Me._COMPLEMENTARIAS = value
				Me.SendPropertyChanged("COMPLEMENTARIAS")
				Me.OnCOMPLEMENTARIASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JUICIO", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property JUICIO() As String
		Get
			Return Me._JUICIO
		End Get
		Set
			If (String.Equals(Me._JUICIO, value) = false) Then
				Me.OnJUICIOChanging(value)
				Me.SendPropertyChanging
				Me._JUICIO = value
				Me.SendPropertyChanged("JUICIO")
				Me.OnJUICIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRATAMIENTO", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRATAMIENTO() As String
		Get
			Return Me._TRATAMIENTO
		End Get
		Set
			If (String.Equals(Me._TRATAMIENTO, value) = false) Then
				Me.OnTRATAMIENTOChanging(value)
				Me.SendPropertyChanging
				Me._TRATAMIENTO = value
				Me.SendPropertyChanged("TRATAMIENTO")
				Me.OnTRATAMIENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HISTORIAL", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HISTORIAL() As String
		Get
			Return Me._HISTORIAL
		End Get
		Set
			If (String.Equals(Me._HISTORIAL, value) = false) Then
				Me.OnHISTORIALChanging(value)
				Me.SendPropertyChanging
				Me._HISTORIAL = value
				Me.SendPropertyChanged("HISTORIAL")
				Me.OnHISTORIALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMENTARIOS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property COMENTARIOS() As String
		Get
			Return Me._COMENTARIOS
		End Get
		Set
			If (String.Equals(Me._COMENTARIOS, value) = false) Then
				Me.OnCOMENTARIOSChanging(value)
				Me.SendPropertyChanging
				Me._COMENTARIOS = value
				Me.SendPropertyChanged("COMENTARIOS")
				Me.OnCOMENTARIOSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CHISTORIAL", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CHISTORIAL() As Integer
		Get
			Return Me._CHISTORIAL
		End Get
		Set
			If ((Me._CHISTORIAL = value)  _
						= false) Then
				Me.OnCHISTORIALChanging(value)
				Me.SendPropertyChanging
				Me._CHISTORIAL = value
				Me.SendPropertyChanged("CHISTORIAL")
				Me.OnCHISTORIALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OTROS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OTROS() As String
		Get
			Return Me._OTROS
		End Get
		Set
			If (String.Equals(Me._OTROS, value) = false) Then
				Me.OnOTROSChanging(value)
				Me.SendPropertyChanging
				Me._OTROS = value
				Me.SendPropertyChanged("OTROS")
				Me.OnOTROSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HORA", DbType:="DateTime")>  _
	Public Property HORA() As System.Nullable(Of Date)
		Get
			Return Me._HORA
		End Get
		Set
			If (Me._HORA.Equals(value) = false) Then
				Me.OnHORAChanging(value)
				Me.SendPropertyChanging
				Me._HORA = value
				Me.SendPropertyChanged("HORA")
				Me.OnHORAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFDIAGNOSTICO", DbType:="Int")>  _
	Public Property REFDIAGNOSTICO() As System.Nullable(Of Integer)
		Get
			Return Me._REFDIAGNOSTICO
		End Get
		Set
			If (Me._REFDIAGNOSTICO.Equals(value) = false) Then
				Me.OnREFDIAGNOSTICOChanging(value)
				Me.SendPropertyChanging
				Me._REFDIAGNOSTICO = value
				Me.SendPropertyChanged("REFDIAGNOSTICO")
				Me.OnREFDIAGNOSTICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentHistorial", DbType:="Int")>  _
	Public Property ParentHistorial() As System.Nullable(Of Integer)
		Get
			Return Me._ParentHistorial
		End Get
		Set
			If (Me._ParentHistorial.Equals(value) = false) Then
				If Me._HISTORIALE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnParentHistorialChanging(value)
				Me.SendPropertyChanging
				Me._ParentHistorial = value
				Me.SendPropertyChanged("ParentHistorial")
				Me.OnParentHistorialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Eliminado", DbType:="Bit")>  _
	Public Property Eliminado() As System.Nullable(Of Boolean)
		Get
			Return Me._Eliminado
		End Get
		Set
			If (Me._Eliminado.Equals(value) = false) Then
				Me.OnEliminadoChanging(value)
				Me.SendPropertyChanging
				Me._Eliminado = value
				Me.SendPropertyChanged("Eliminado")
				Me.OnEliminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HISTORIALE_HistorialesDiagnostico", Storage:="_HistorialesDiagnosticos", ThisKey:="CHISTORIAL", OtherKey:="CHistorial")>  _
	Public Property HistorialesDiagnosticos() As EntitySet(Of HistorialesDiagnostico)
		Get
			Return Me._HistorialesDiagnosticos
		End Get
		Set
			Me._HistorialesDiagnosticos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HISTORIALE_LHISTORIALE", Storage:="_LHISTORIALEs", ThisKey:="CHISTORIAL", OtherKey:="REFHISTORIAL")>  _
	Public Property LHISTORIALEs() As EntitySet(Of LHISTORIALE)
		Get
			Return Me._LHISTORIALEs
		End Get
		Set
			Me._LHISTORIALEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HISTORIALE_HISTORIALE", Storage:="_HISTORIALEs", ThisKey:="CHISTORIAL", OtherKey:="ParentHistorial")>  _
	Public Property HISTORIALEs() As EntitySet(Of HISTORIALE)
		Get
			Return Me._HISTORIALEs
		End Get
		Set
			Me._HISTORIALEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HISTORIALE_HISTORIALES_REVISIONES", Storage:="_HISTORIALES_REVISIONES", ThisKey:="CHISTORIAL", OtherKey:="ID_Historial")>  _
	Public Property HISTORIALES_REVISIONES() As EntitySet(Of HISTORIALES_REVISIONES)
		Get
			Return Me._HISTORIALES_REVISIONES
		End Get
		Set
			Me._HISTORIALES_REVISIONES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HISTORIALE_HISTORIALE", Storage:="_HISTORIALE", ThisKey:="ParentHistorial", OtherKey:="CHISTORIAL", IsForeignKey:=true)>  _
	Public Property HISTORIALE() As HISTORIALE
		Get
			Return Me._HISTORIALE.Entity
		End Get
		Set
			Dim previousValue As HISTORIALE = Me._HISTORIALE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._HISTORIALE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._HISTORIALE.Entity = Nothing
					previousValue.HISTORIALEs.Remove(Me)
				End If
				Me._HISTORIALE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HISTORIALEs.Add(Me)
					Me._ParentHistorial = value.CHISTORIAL
				Else
					Me._ParentHistorial = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("HISTORIALE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_HISTORIALE", Storage:="_MEDICO", ThisKey:="REFMEDICO", OtherKey:="CMEDICO", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property MEDICO() As MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.HISTORIALEs.Remove(Me)
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HISTORIALEs.Add(Me)
					Me._REFMEDICO = value.CMEDICO
				Else
					Me._REFMEDICO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("MEDICO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_HISTORIALE", Storage:="_PACIENTE", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.HISTORIALEs.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HISTORIALEs.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_HistorialesDiagnosticos(ByVal entity As HistorialesDiagnostico)
		Me.SendPropertyChanging
		entity.HISTORIALE = Me
	End Sub
	
	Private Sub detach_HistorialesDiagnosticos(ByVal entity As HistorialesDiagnostico)
		Me.SendPropertyChanging
		entity.HISTORIALE = Nothing
	End Sub
	
	Private Sub attach_LHISTORIALEs(ByVal entity As LHISTORIALE)
		Me.SendPropertyChanging
		entity.HISTORIALE = Me
	End Sub
	
	Private Sub detach_LHISTORIALEs(ByVal entity As LHISTORIALE)
		Me.SendPropertyChanging
		entity.HISTORIALE = Nothing
	End Sub
	
	Private Sub attach_HISTORIALEs(ByVal entity As HISTORIALE)
		Me.SendPropertyChanging
		entity.HISTORIALE = Me
	End Sub
	
	Private Sub detach_HISTORIALEs(ByVal entity As HISTORIALE)
		Me.SendPropertyChanging
		entity.HISTORIALE = Nothing
	End Sub
	
	Private Sub attach_HISTORIALES_REVISIONES(ByVal entity As HISTORIALES_REVISIONES)
		Me.SendPropertyChanging
		entity.HISTORIALE = Me
	End Sub
	
	Private Sub detach_HISTORIALES_REVISIONES(ByVal entity As HISTORIALES_REVISIONES)
		Me.SendPropertyChanging
		entity.HISTORIALE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MUTUAS")>  _
Partial Public Class MUTUA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NOMBRE As String
	
	Private _DIRECCION As String
	
	Private _POBLACION As String
	
	Private _PROVINCIA As String
	
	Private _CP As String
	
	Private _TLFNO1 As String
	
	Private _TLFNO2 As String
	
	Private _FAX As String
	
	Private _MAIL As String
	
	Private _WEB As String
	
	Private _PERSONACON As String
	
	Private _NOTAS As String
	
	Private _CMUTUA As Integer
	
	Private _CIF As String
	
	Private _ESPECIALIDAD As String
	
	Private _PARTELSR As String
	
	Private _PARTEMTR As String
	
	Private _IdTarifa As System.Nullable(Of Integer)
	
	Private _NoContrato As String
	
	Private _Logo As System.Data.Linq.Binary
	
	Private _Eliminado As System.Nullable(Of Boolean)
	
	Private _PACIENTEs As EntitySet(Of PACIENTE)
	
	Private _FACTURAs As EntitySet(Of FACTURA)
	
	Private _N_Procesos As EntitySet(Of N_Proceso)
	
	Private _LMUTUAs As EntitySet(Of LMUTUA)
	
	Private _PRESUPUESTOS As EntitySet(Of PRESUPUESTOS)
	
	Private _CITAs As EntitySet(Of CITA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREChanged()
    End Sub
    Partial Private Sub OnDIRECCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDIRECCIONChanged()
    End Sub
    Partial Private Sub OnPOBLACIONChanging(value As String)
    End Sub
    Partial Private Sub OnPOBLACIONChanged()
    End Sub
    Partial Private Sub OnPROVINCIAChanging(value As String)
    End Sub
    Partial Private Sub OnPROVINCIAChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnTLFNO1Changing(value As String)
    End Sub
    Partial Private Sub OnTLFNO1Changed()
    End Sub
    Partial Private Sub OnTLFNO2Changing(value As String)
    End Sub
    Partial Private Sub OnTLFNO2Changed()
    End Sub
    Partial Private Sub OnFAXChanging(value As String)
    End Sub
    Partial Private Sub OnFAXChanged()
    End Sub
    Partial Private Sub OnMAILChanging(value As String)
    End Sub
    Partial Private Sub OnMAILChanged()
    End Sub
    Partial Private Sub OnWEBChanging(value As String)
    End Sub
    Partial Private Sub OnWEBChanged()
    End Sub
    Partial Private Sub OnPERSONACONChanging(value As String)
    End Sub
    Partial Private Sub OnPERSONACONChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    Partial Private Sub OnCMUTUAChanging(value As Integer)
    End Sub
    Partial Private Sub OnCMUTUAChanged()
    End Sub
    Partial Private Sub OnCIFChanging(value As String)
    End Sub
    Partial Private Sub OnCIFChanged()
    End Sub
    Partial Private Sub OnESPECIALIDADChanging(value As String)
    End Sub
    Partial Private Sub OnESPECIALIDADChanged()
    End Sub
    Partial Private Sub OnPARTELSRChanging(value As String)
    End Sub
    Partial Private Sub OnPARTELSRChanged()
    End Sub
    Partial Private Sub OnPARTEMTRChanging(value As String)
    End Sub
    Partial Private Sub OnPARTEMTRChanged()
    End Sub
    Partial Private Sub OnIdTarifaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdTarifaChanged()
    End Sub
    Partial Private Sub OnNoContratoChanging(value As String)
    End Sub
    Partial Private Sub OnNoContratoChanged()
    End Sub
    Partial Private Sub OnLogoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnLogoChanged()
    End Sub
    Partial Private Sub OnEliminadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEliminadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PACIENTEs = New EntitySet(Of PACIENTE)(AddressOf Me.attach_PACIENTEs, AddressOf Me.detach_PACIENTEs)
		Me._FACTURAs = New EntitySet(Of FACTURA)(AddressOf Me.attach_FACTURAs, AddressOf Me.detach_FACTURAs)
		Me._N_Procesos = New EntitySet(Of N_Proceso)(AddressOf Me.attach_N_Procesos, AddressOf Me.detach_N_Procesos)
		Me._LMUTUAs = New EntitySet(Of LMUTUA)(AddressOf Me.attach_LMUTUAs, AddressOf Me.detach_LMUTUAs)
		Me._PRESUPUESTOS = New EntitySet(Of PRESUPUESTOS)(AddressOf Me.attach_PRESUPUESTOS, AddressOf Me.detach_PRESUPUESTOS)
		Me._CITAs = New EntitySet(Of CITA)(AddressOf Me.attach_CITAs, AddressOf Me.detach_CITAs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", DbType:="VarChar(90)")>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me.OnNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRE = value
				Me.SendPropertyChanged("NOMBRE")
				Me.OnNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIRECCION", DbType:="VarChar(150)")>  _
	Public Property DIRECCION() As String
		Get
			Return Me._DIRECCION
		End Get
		Set
			If (String.Equals(Me._DIRECCION, value) = false) Then
				Me.OnDIRECCIONChanging(value)
				Me.SendPropertyChanging
				Me._DIRECCION = value
				Me.SendPropertyChanged("DIRECCION")
				Me.OnDIRECCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POBLACION", DbType:="VarChar(20)")>  _
	Public Property POBLACION() As String
		Get
			Return Me._POBLACION
		End Get
		Set
			If (String.Equals(Me._POBLACION, value) = false) Then
				Me.OnPOBLACIONChanging(value)
				Me.SendPropertyChanging
				Me._POBLACION = value
				Me.SendPropertyChanged("POBLACION")
				Me.OnPOBLACIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCIA", DbType:="VarChar(20)")>  _
	Public Property PROVINCIA() As String
		Get
			Return Me._PROVINCIA
		End Get
		Set
			If (String.Equals(Me._PROVINCIA, value) = false) Then
				Me.OnPROVINCIAChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCIA = value
				Me.SendPropertyChanged("PROVINCIA")
				Me.OnPROVINCIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="VarChar(5)")>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLFNO1", DbType:="VarChar(10)")>  _
	Public Property TLFNO1() As String
		Get
			Return Me._TLFNO1
		End Get
		Set
			If (String.Equals(Me._TLFNO1, value) = false) Then
				Me.OnTLFNO1Changing(value)
				Me.SendPropertyChanging
				Me._TLFNO1 = value
				Me.SendPropertyChanged("TLFNO1")
				Me.OnTLFNO1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLFNO2", DbType:="VarChar(10)")>  _
	Public Property TLFNO2() As String
		Get
			Return Me._TLFNO2
		End Get
		Set
			If (String.Equals(Me._TLFNO2, value) = false) Then
				Me.OnTLFNO2Changing(value)
				Me.SendPropertyChanging
				Me._TLFNO2 = value
				Me.SendPropertyChanged("TLFNO2")
				Me.OnTLFNO2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAX", DbType:="VarChar(10)")>  _
	Public Property FAX() As String
		Get
			Return Me._FAX
		End Get
		Set
			If (String.Equals(Me._FAX, value) = false) Then
				Me.OnFAXChanging(value)
				Me.SendPropertyChanging
				Me._FAX = value
				Me.SendPropertyChanged("FAX")
				Me.OnFAXChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAIL", DbType:="VarChar(40)")>  _
	Public Property MAIL() As String
		Get
			Return Me._MAIL
		End Get
		Set
			If (String.Equals(Me._MAIL, value) = false) Then
				Me.OnMAILChanging(value)
				Me.SendPropertyChanging
				Me._MAIL = value
				Me.SendPropertyChanged("MAIL")
				Me.OnMAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WEB", DbType:="VarChar(40)")>  _
	Public Property WEB() As String
		Get
			Return Me._WEB
		End Get
		Set
			If (String.Equals(Me._WEB, value) = false) Then
				Me.OnWEBChanging(value)
				Me.SendPropertyChanging
				Me._WEB = value
				Me.SendPropertyChanged("WEB")
				Me.OnWEBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERSONACON", DbType:="VarChar(40)")>  _
	Public Property PERSONACON() As String
		Get
			Return Me._PERSONACON
		End Get
		Set
			If (String.Equals(Me._PERSONACON, value) = false) Then
				Me.OnPERSONACONChanging(value)
				Me.SendPropertyChanging
				Me._PERSONACON = value
				Me.SendPropertyChanged("PERSONACON")
				Me.OnPERSONACONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="VarChar(8000)")>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMUTUA", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CMUTUA() As Integer
		Get
			Return Me._CMUTUA
		End Get
		Set
			If ((Me._CMUTUA = value)  _
						= false) Then
				Me.OnCMUTUAChanging(value)
				Me.SendPropertyChanging
				Me._CMUTUA = value
				Me.SendPropertyChanged("CMUTUA")
				Me.OnCMUTUAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIF", DbType:="VarChar(10)")>  _
	Public Property CIF() As String
		Get
			Return Me._CIF
		End Get
		Set
			If (String.Equals(Me._CIF, value) = false) Then
				Me.OnCIFChanging(value)
				Me.SendPropertyChanging
				Me._CIF = value
				Me.SendPropertyChanged("CIF")
				Me.OnCIFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ESPECIALIDAD", DbType:="VarChar(50)")>  _
	Public Property ESPECIALIDAD() As String
		Get
			Return Me._ESPECIALIDAD
		End Get
		Set
			If (String.Equals(Me._ESPECIALIDAD, value) = false) Then
				Me.OnESPECIALIDADChanging(value)
				Me.SendPropertyChanging
				Me._ESPECIALIDAD = value
				Me.SendPropertyChanged("ESPECIALIDAD")
				Me.OnESPECIALIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PARTELSR", DbType:="VarChar(30)")>  _
	Public Property PARTELSR() As String
		Get
			Return Me._PARTELSR
		End Get
		Set
			If (String.Equals(Me._PARTELSR, value) = false) Then
				Me.OnPARTELSRChanging(value)
				Me.SendPropertyChanging
				Me._PARTELSR = value
				Me.SendPropertyChanged("PARTELSR")
				Me.OnPARTELSRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PARTEMTR", DbType:="VarChar(30)")>  _
	Public Property PARTEMTR() As String
		Get
			Return Me._PARTEMTR
		End Get
		Set
			If (String.Equals(Me._PARTEMTR, value) = false) Then
				Me.OnPARTEMTRChanging(value)
				Me.SendPropertyChanging
				Me._PARTEMTR = value
				Me.SendPropertyChanged("PARTEMTR")
				Me.OnPARTEMTRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTarifa", DbType:="Int")>  _
	Public Property IdTarifa() As System.Nullable(Of Integer)
		Get
			Return Me._IdTarifa
		End Get
		Set
			If (Me._IdTarifa.Equals(value) = false) Then
				Me.OnIdTarifaChanging(value)
				Me.SendPropertyChanging
				Me._IdTarifa = value
				Me.SendPropertyChanged("IdTarifa")
				Me.OnIdTarifaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoContrato", DbType:="NVarChar(50)")>  _
	Public Property NoContrato() As String
		Get
			Return Me._NoContrato
		End Get
		Set
			If (String.Equals(Me._NoContrato, value) = false) Then
				Me.OnNoContratoChanging(value)
				Me.SendPropertyChanging
				Me._NoContrato = value
				Me.SendPropertyChanged("NoContrato")
				Me.OnNoContratoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Logo", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Logo() As System.Data.Linq.Binary
		Get
			Return Me._Logo
		End Get
		Set
			If (Object.Equals(Me._Logo, value) = false) Then
				Me.OnLogoChanging(value)
				Me.SendPropertyChanging
				Me._Logo = value
				Me.SendPropertyChanged("Logo")
				Me.OnLogoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Eliminado", DbType:="Bit")>  _
	Public Property Eliminado() As System.Nullable(Of Boolean)
		Get
			Return Me._Eliminado
		End Get
		Set
			If (Me._Eliminado.Equals(value) = false) Then
				Me.OnEliminadoChanging(value)
				Me.SendPropertyChanging
				Me._Eliminado = value
				Me.SendPropertyChanged("Eliminado")
				Me.OnEliminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MUTUA_PACIENTE", Storage:="_PACIENTEs", ThisKey:="CMUTUA", OtherKey:="REFMUTUA")>  _
	Public Property PACIENTEs() As EntitySet(Of PACIENTE)
		Get
			Return Me._PACIENTEs
		End Get
		Set
			Me._PACIENTEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MUTUA_FACTURA", Storage:="_FACTURAs", ThisKey:="CMUTUA", OtherKey:="REFMUTUA")>  _
	Public Property FACTURAs() As EntitySet(Of FACTURA)
		Get
			Return Me._FACTURAs
		End Get
		Set
			Me._FACTURAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MUTUA_N_Proceso", Storage:="_N_Procesos", ThisKey:="CMUTUA", OtherKey:="ID_Mutua")>  _
	Public Property N_Procesos() As EntitySet(Of N_Proceso)
		Get
			Return Me._N_Procesos
		End Get
		Set
			Me._N_Procesos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MUTUA_LMUTUA", Storage:="_LMUTUAs", ThisKey:="CMUTUA", OtherKey:="REFMUTUA")>  _
	Public Property LMUTUAs() As EntitySet(Of LMUTUA)
		Get
			Return Me._LMUTUAs
		End Get
		Set
			Me._LMUTUAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MUTUA_PRESUPUESTOS", Storage:="_PRESUPUESTOS", ThisKey:="CMUTUA", OtherKey:="REFMUTUA")>  _
	Public Property PRESUPUESTOS() As EntitySet(Of PRESUPUESTOS)
		Get
			Return Me._PRESUPUESTOS
		End Get
		Set
			Me._PRESUPUESTOS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MUTUA_CITA", Storage:="_CITAs", ThisKey:="CMUTUA", OtherKey:="REFPROCEDENCIA")>  _
	Public Property CITAs() As EntitySet(Of CITA)
		Get
			Return Me._CITAs
		End Get
		Set
			Me._CITAs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PACIENTEs(ByVal entity As PACIENTE)
		Me.SendPropertyChanging
		entity.MUTUA = Me
	End Sub
	
	Private Sub detach_PACIENTEs(ByVal entity As PACIENTE)
		Me.SendPropertyChanging
		entity.MUTUA = Nothing
	End Sub
	
	Private Sub attach_FACTURAs(ByVal entity As FACTURA)
		Me.SendPropertyChanging
		entity.MUTUA1 = Me
	End Sub
	
	Private Sub detach_FACTURAs(ByVal entity As FACTURA)
		Me.SendPropertyChanging
		entity.MUTUA1 = Nothing
	End Sub
	
	Private Sub attach_N_Procesos(ByVal entity As N_Proceso)
		Me.SendPropertyChanging
		entity.MUTUA = Me
	End Sub
	
	Private Sub detach_N_Procesos(ByVal entity As N_Proceso)
		Me.SendPropertyChanging
		entity.MUTUA = Nothing
	End Sub
	
	Private Sub attach_LMUTUAs(ByVal entity As LMUTUA)
		Me.SendPropertyChanging
		entity.MUTUA = Me
	End Sub
	
	Private Sub detach_LMUTUAs(ByVal entity As LMUTUA)
		Me.SendPropertyChanging
		entity.MUTUA = Nothing
	End Sub
	
	Private Sub attach_PRESUPUESTOS(ByVal entity As PRESUPUESTOS)
		Me.SendPropertyChanging
		entity.MUTUA1 = Me
	End Sub
	
	Private Sub detach_PRESUPUESTOS(ByVal entity As PRESUPUESTOS)
		Me.SendPropertyChanging
		entity.MUTUA1 = Nothing
	End Sub
	
	Private Sub attach_CITAs(ByVal entity As CITA)
		Me.SendPropertyChanging
		entity.MUTUA = Me
	End Sub
	
	Private Sub detach_CITAs(ByVal entity As CITA)
		Me.SendPropertyChanging
		entity.MUTUA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RECETAS")>  _
Partial Public Class RECETA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDRECETA As Integer
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _REFPACIENTE As System.Nullable(Of Integer)
	
	Private _TRATAMIENTO As String
	
	Private _REFMEDICO As System.Nullable(Of Integer)
	
	Private _REFDIAGNOSTICO As System.Nullable(Of Integer)
	
	Private _REFMEDICAMENTO As String
	
	Private _HORA As System.Nullable(Of Date)
	
	Private _Eliminado As System.Nullable(Of Boolean)
	
	Private _Prescripcion As String
	
	Private _DuracionTratamiento As String
	
	Private _PacienteInfo As String
	
	Private _Posologia As String
	
	Private _Unidades As String
	
	Private _Pauta As String
	
	Private _NoOrdenDispensacion As String
	
	Private _FechaPrevistaDispensacion As System.Nullable(Of Date)
	
	Private _InfoAlFarmaceutico As String
	
	Private _DiagnosticoAlPaciente As String
	
	Private _NoEnvases_o_Unidades As System.Nullable(Of Integer)
	
	Private _Prescriptor As String
	
	Private _InstruccionesAlPaciente As String
	
	Private _EsRecetaOficial As System.Nullable(Of Boolean)
	
	Private _RecetasMedicamentos As EntitySet(Of RecetasMedicamento)
	
	Private _RecetasXML As EntitySet(Of RecetasXML)
	
	Private _MEDICAMENTO As EntityRef(Of MEDICAMENTO)
	
	Private _DIAGNOSTICO As EntityRef(Of DIAGNOSTICO)
	
	Private _MEDICO As EntityRef(Of MEDICO)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDRECETAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDRECETAChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnTRATAMIENTOChanging(value As String)
    End Sub
    Partial Private Sub OnTRATAMIENTOChanged()
    End Sub
    Partial Private Sub OnREFMEDICOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFMEDICOChanged()
    End Sub
    Partial Private Sub OnREFDIAGNOSTICOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFDIAGNOSTICOChanged()
    End Sub
    Partial Private Sub OnREFMEDICAMENTOChanging(value As String)
    End Sub
    Partial Private Sub OnREFMEDICAMENTOChanged()
    End Sub
    Partial Private Sub OnHORAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHORAChanged()
    End Sub
    Partial Private Sub OnEliminadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEliminadoChanged()
    End Sub
    Partial Private Sub OnPrescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnPrescripcionChanged()
    End Sub
    Partial Private Sub OnDuracionTratamientoChanging(value As String)
    End Sub
    Partial Private Sub OnDuracionTratamientoChanged()
    End Sub
    Partial Private Sub OnPacienteInfoChanging(value As String)
    End Sub
    Partial Private Sub OnPacienteInfoChanged()
    End Sub
    Partial Private Sub OnPosologiaChanging(value As String)
    End Sub
    Partial Private Sub OnPosologiaChanged()
    End Sub
    Partial Private Sub OnUnidadesChanging(value As String)
    End Sub
    Partial Private Sub OnUnidadesChanged()
    End Sub
    Partial Private Sub OnPautaChanging(value As String)
    End Sub
    Partial Private Sub OnPautaChanged()
    End Sub
    Partial Private Sub OnNoOrdenDispensacionChanging(value As String)
    End Sub
    Partial Private Sub OnNoOrdenDispensacionChanged()
    End Sub
    Partial Private Sub OnFechaPrevistaDispensacionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaPrevistaDispensacionChanged()
    End Sub
    Partial Private Sub OnInfoAlFarmaceuticoChanging(value As String)
    End Sub
    Partial Private Sub OnInfoAlFarmaceuticoChanged()
    End Sub
    Partial Private Sub OnDiagnosticoAlPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnDiagnosticoAlPacienteChanged()
    End Sub
    Partial Private Sub OnNoEnvases_o_UnidadesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNoEnvases_o_UnidadesChanged()
    End Sub
    Partial Private Sub OnPrescriptorChanging(value As String)
    End Sub
    Partial Private Sub OnPrescriptorChanged()
    End Sub
    Partial Private Sub OnInstruccionesAlPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnInstruccionesAlPacienteChanged()
    End Sub
    Partial Private Sub OnEsRecetaOficialChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEsRecetaOficialChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RecetasMedicamentos = New EntitySet(Of RecetasMedicamento)(AddressOf Me.attach_RecetasMedicamentos, AddressOf Me.detach_RecetasMedicamentos)
		Me._RecetasXML = New EntitySet(Of RecetasXML)(AddressOf Me.attach_RecetasXML, AddressOf Me.detach_RecetasXML)
		Me._MEDICAMENTO = CType(Nothing, EntityRef(Of MEDICAMENTO))
		Me._DIAGNOSTICO = CType(Nothing, EntityRef(Of DIAGNOSTICO))
		Me._MEDICO = CType(Nothing, EntityRef(Of MEDICO))
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDRECETA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDRECETA() As Integer
		Get
			Return Me._IDRECETA
		End Get
		Set
			If ((Me._IDRECETA = value)  _
						= false) Then
				Me.OnIDRECETAChanging(value)
				Me.SendPropertyChanging
				Me._IDRECETA = value
				Me.SendPropertyChanged("IDRECETA")
				Me.OnIDRECETAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime")>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int")>  _
	Public Property REFPACIENTE() As System.Nullable(Of Integer)
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If (Me._REFPACIENTE.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRATAMIENTO", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TRATAMIENTO() As String
		Get
			Return Me._TRATAMIENTO
		End Get
		Set
			If (String.Equals(Me._TRATAMIENTO, value) = false) Then
				Me.OnTRATAMIENTOChanging(value)
				Me.SendPropertyChanging
				Me._TRATAMIENTO = value
				Me.SendPropertyChanged("TRATAMIENTO")
				Me.OnTRATAMIENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMEDICO", DbType:="Int")>  _
	Public Property REFMEDICO() As System.Nullable(Of Integer)
		Get
			Return Me._REFMEDICO
		End Get
		Set
			If (Me._REFMEDICO.Equals(value) = false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMEDICOChanging(value)
				Me.SendPropertyChanging
				Me._REFMEDICO = value
				Me.SendPropertyChanged("REFMEDICO")
				Me.OnREFMEDICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFDIAGNOSTICO", DbType:="Int")>  _
	Public Property REFDIAGNOSTICO() As System.Nullable(Of Integer)
		Get
			Return Me._REFDIAGNOSTICO
		End Get
		Set
			If (Me._REFDIAGNOSTICO.Equals(value) = false) Then
				If Me._DIAGNOSTICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFDIAGNOSTICOChanging(value)
				Me.SendPropertyChanging
				Me._REFDIAGNOSTICO = value
				Me.SendPropertyChanged("REFDIAGNOSTICO")
				Me.OnREFDIAGNOSTICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMEDICAMENTO", DbType:="VarChar(5)")>  _
	Public Property REFMEDICAMENTO() As String
		Get
			Return Me._REFMEDICAMENTO
		End Get
		Set
			If (String.Equals(Me._REFMEDICAMENTO, value) = false) Then
				If Me._MEDICAMENTO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMEDICAMENTOChanging(value)
				Me.SendPropertyChanging
				Me._REFMEDICAMENTO = value
				Me.SendPropertyChanged("REFMEDICAMENTO")
				Me.OnREFMEDICAMENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HORA", DbType:="DateTime")>  _
	Public Property HORA() As System.Nullable(Of Date)
		Get
			Return Me._HORA
		End Get
		Set
			If (Me._HORA.Equals(value) = false) Then
				Me.OnHORAChanging(value)
				Me.SendPropertyChanging
				Me._HORA = value
				Me.SendPropertyChanged("HORA")
				Me.OnHORAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Eliminado", DbType:="Bit")>  _
	Public Property Eliminado() As System.Nullable(Of Boolean)
		Get
			Return Me._Eliminado
		End Get
		Set
			If (Me._Eliminado.Equals(value) = false) Then
				Me.OnEliminadoChanging(value)
				Me.SendPropertyChanging
				Me._Eliminado = value
				Me.SendPropertyChanged("Eliminado")
				Me.OnEliminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Prescripcion", DbType:="NVarChar(500)")>  _
	Public Property Prescripcion() As String
		Get
			Return Me._Prescripcion
		End Get
		Set
			If (String.Equals(Me._Prescripcion, value) = false) Then
				Me.OnPrescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Prescripcion = value
				Me.SendPropertyChanged("Prescripcion")
				Me.OnPrescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DuracionTratamiento", DbType:="NVarChar(50)")>  _
	Public Property DuracionTratamiento() As String
		Get
			Return Me._DuracionTratamiento
		End Get
		Set
			If (String.Equals(Me._DuracionTratamiento, value) = false) Then
				Me.OnDuracionTratamientoChanging(value)
				Me.SendPropertyChanging
				Me._DuracionTratamiento = value
				Me.SendPropertyChanged("DuracionTratamiento")
				Me.OnDuracionTratamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PacienteInfo", DbType:="NVarChar(500)")>  _
	Public Property PacienteInfo() As String
		Get
			Return Me._PacienteInfo
		End Get
		Set
			If (String.Equals(Me._PacienteInfo, value) = false) Then
				Me.OnPacienteInfoChanging(value)
				Me.SendPropertyChanging
				Me._PacienteInfo = value
				Me.SendPropertyChanged("PacienteInfo")
				Me.OnPacienteInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Posologia", DbType:="NVarChar(50)")>  _
	Public Property Posologia() As String
		Get
			Return Me._Posologia
		End Get
		Set
			If (String.Equals(Me._Posologia, value) = false) Then
				Me.OnPosologiaChanging(value)
				Me.SendPropertyChanging
				Me._Posologia = value
				Me.SendPropertyChanged("Posologia")
				Me.OnPosologiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unidades", DbType:="NVarChar(30)")>  _
	Public Property Unidades() As String
		Get
			Return Me._Unidades
		End Get
		Set
			If (String.Equals(Me._Unidades, value) = false) Then
				Me.OnUnidadesChanging(value)
				Me.SendPropertyChanging
				Me._Unidades = value
				Me.SendPropertyChanged("Unidades")
				Me.OnUnidadesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pauta", DbType:="NVarChar(100)")>  _
	Public Property Pauta() As String
		Get
			Return Me._Pauta
		End Get
		Set
			If (String.Equals(Me._Pauta, value) = false) Then
				Me.OnPautaChanging(value)
				Me.SendPropertyChanging
				Me._Pauta = value
				Me.SendPropertyChanged("Pauta")
				Me.OnPautaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoOrdenDispensacion", DbType:="NVarChar(50)")>  _
	Public Property NoOrdenDispensacion() As String
		Get
			Return Me._NoOrdenDispensacion
		End Get
		Set
			If (String.Equals(Me._NoOrdenDispensacion, value) = false) Then
				Me.OnNoOrdenDispensacionChanging(value)
				Me.SendPropertyChanging
				Me._NoOrdenDispensacion = value
				Me.SendPropertyChanged("NoOrdenDispensacion")
				Me.OnNoOrdenDispensacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaPrevistaDispensacion", DbType:="DateTime")>  _
	Public Property FechaPrevistaDispensacion() As System.Nullable(Of Date)
		Get
			Return Me._FechaPrevistaDispensacion
		End Get
		Set
			If (Me._FechaPrevistaDispensacion.Equals(value) = false) Then
				Me.OnFechaPrevistaDispensacionChanging(value)
				Me.SendPropertyChanging
				Me._FechaPrevistaDispensacion = value
				Me.SendPropertyChanged("FechaPrevistaDispensacion")
				Me.OnFechaPrevistaDispensacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InfoAlFarmaceutico", DbType:="NVarChar(200)")>  _
	Public Property InfoAlFarmaceutico() As String
		Get
			Return Me._InfoAlFarmaceutico
		End Get
		Set
			If (String.Equals(Me._InfoAlFarmaceutico, value) = false) Then
				Me.OnInfoAlFarmaceuticoChanging(value)
				Me.SendPropertyChanging
				Me._InfoAlFarmaceutico = value
				Me.SendPropertyChanged("InfoAlFarmaceutico")
				Me.OnInfoAlFarmaceuticoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiagnosticoAlPaciente", DbType:="NVarChar(200)")>  _
	Public Property DiagnosticoAlPaciente() As String
		Get
			Return Me._DiagnosticoAlPaciente
		End Get
		Set
			If (String.Equals(Me._DiagnosticoAlPaciente, value) = false) Then
				Me.OnDiagnosticoAlPacienteChanging(value)
				Me.SendPropertyChanging
				Me._DiagnosticoAlPaciente = value
				Me.SendPropertyChanged("DiagnosticoAlPaciente")
				Me.OnDiagnosticoAlPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoEnvases_o_Unidades", DbType:="Int")>  _
	Public Property NoEnvases_o_Unidades() As System.Nullable(Of Integer)
		Get
			Return Me._NoEnvases_o_Unidades
		End Get
		Set
			If (Me._NoEnvases_o_Unidades.Equals(value) = false) Then
				Me.OnNoEnvases_o_UnidadesChanging(value)
				Me.SendPropertyChanging
				Me._NoEnvases_o_Unidades = value
				Me.SendPropertyChanged("NoEnvases_o_Unidades")
				Me.OnNoEnvases_o_UnidadesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Prescriptor", DbType:="NVarChar(500)")>  _
	Public Property Prescriptor() As String
		Get
			Return Me._Prescriptor
		End Get
		Set
			If (String.Equals(Me._Prescriptor, value) = false) Then
				Me.OnPrescriptorChanging(value)
				Me.SendPropertyChanging
				Me._Prescriptor = value
				Me.SendPropertyChanged("Prescriptor")
				Me.OnPrescriptorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstruccionesAlPaciente", DbType:="NVarChar(500)")>  _
	Public Property InstruccionesAlPaciente() As String
		Get
			Return Me._InstruccionesAlPaciente
		End Get
		Set
			If (String.Equals(Me._InstruccionesAlPaciente, value) = false) Then
				Me.OnInstruccionesAlPacienteChanging(value)
				Me.SendPropertyChanging
				Me._InstruccionesAlPaciente = value
				Me.SendPropertyChanged("InstruccionesAlPaciente")
				Me.OnInstruccionesAlPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EsRecetaOficial", DbType:="Bit")>  _
	Public Property EsRecetaOficial() As System.Nullable(Of Boolean)
		Get
			Return Me._EsRecetaOficial
		End Get
		Set
			If (Me._EsRecetaOficial.Equals(value) = false) Then
				Me.OnEsRecetaOficialChanging(value)
				Me.SendPropertyChanging
				Me._EsRecetaOficial = value
				Me.SendPropertyChanged("EsRecetaOficial")
				Me.OnEsRecetaOficialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RECETA_RecetasMedicamento", Storage:="_RecetasMedicamentos", ThisKey:="IDRECETA", OtherKey:="IdReceta")>  _
	Public Property RecetasMedicamentos() As EntitySet(Of RecetasMedicamento)
		Get
			Return Me._RecetasMedicamentos
		End Get
		Set
			Me._RecetasMedicamentos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RECETA_RecetasXML", Storage:="_RecetasXML", ThisKey:="IDRECETA", OtherKey:="idReceta")>  _
	Public Property RecetasXML() As EntitySet(Of RecetasXML)
		Get
			Return Me._RecetasXML
		End Get
		Set
			Me._RecetasXML.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICAMENTO_RECETA", Storage:="_MEDICAMENTO", ThisKey:="REFMEDICAMENTO", OtherKey:="CMEDICAMENTO", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property MEDICAMENTO() As MEDICAMENTO
		Get
			Return Me._MEDICAMENTO.Entity
		End Get
		Set
			Dim previousValue As MEDICAMENTO = Me._MEDICAMENTO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICAMENTO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICAMENTO.Entity = Nothing
					previousValue.RECETAs.Remove(Me)
				End If
				Me._MEDICAMENTO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RECETAs.Add(Me)
					Me._REFMEDICAMENTO = value.CMEDICAMENTO
				Else
					Me._REFMEDICAMENTO = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MEDICAMENTO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DIAGNOSTICO_RECETA", Storage:="_DIAGNOSTICO", ThisKey:="REFDIAGNOSTICO", OtherKey:="IDDIAGNOSTICO", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property DIAGNOSTICO() As DIAGNOSTICO
		Get
			Return Me._DIAGNOSTICO.Entity
		End Get
		Set
			Dim previousValue As DIAGNOSTICO = Me._DIAGNOSTICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DIAGNOSTICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DIAGNOSTICO.Entity = Nothing
					previousValue.RECETAs.Remove(Me)
				End If
				Me._DIAGNOSTICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RECETAs.Add(Me)
					Me._REFDIAGNOSTICO = value.IDDIAGNOSTICO
				Else
					Me._REFDIAGNOSTICO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("DIAGNOSTICO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_RECETA", Storage:="_MEDICO", ThisKey:="REFMEDICO", OtherKey:="CMEDICO", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property MEDICO() As MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.RECETAs.Remove(Me)
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RECETAs.Add(Me)
					Me._REFMEDICO = value.CMEDICO
				Else
					Me._REFMEDICO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MEDICO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_RECETA", Storage:="_PACIENTE", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.RECETAs.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RECETAs.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RecetasMedicamentos(ByVal entity As RecetasMedicamento)
		Me.SendPropertyChanging
		entity.RECETA = Me
	End Sub
	
	Private Sub detach_RecetasMedicamentos(ByVal entity As RecetasMedicamento)
		Me.SendPropertyChanging
		entity.RECETA = Nothing
	End Sub
	
	Private Sub attach_RecetasXML(ByVal entity As RecetasXML)
		Me.SendPropertyChanging
		entity.RECETA = Me
	End Sub
	
	Private Sub detach_RecetasXML(ByVal entity As RecetasXML)
		Me.SendPropertyChanging
		entity.RECETA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.N_Partes_Asistencia")>  _
Partial Public Class N_Partes_Asistencia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ParteAsistencia As Long
	
	Private _ID_Proceso As System.Nullable(Of Long)
	
	Private _FechaAsistencia As System.Nullable(Of Date)
	
	Private _E_Pronostico As System.Nullable(Of Integer)
	
	Private _CausaBaja As System.Nullable(Of Boolean)
	
	Private _E_Regimen As System.Nullable(Of Integer)
	
	Private _E_Situacion As System.Nullable(Of Integer)
	
	Private _ID_Paciente As System.Nullable(Of Integer)
	
	Private _Num_Tarjeta_sanitaria As String
	
	Private _Num_Afiliacion_Seg_Social As String
	
	Private _DNI As String
	
	Private _NombreCompletoPaciente As String
	
	Private _DomicilioPaciente As String
	
	Private _LocalidadPaciente As String
	
	Private _ProvinciaPaciente As String
	
	Private _Codigo_PostalPaciente As String
	
	Private _TelefonoPaciente As String
	
	Private _Puesto_de_trabajoPaciente As String
	
	Private _ID_Empresa As System.Nullable(Of Integer)
	
	Private _NombreEmpresa As String
	
	Private _DomicilioEmpresa As String
	
	Private _LocalidadEmpresa As String
	
	Private _ProvinciaEmpresa As String
	
	Private _Codigo_Postal_Empresa As String
	
	Private _Actividad_empresa As String
	
	Private _Código_Nacional_Actividad_Económica_CNAE As String
	
	Private _Entidad_Pago_IT_CP As System.Nullable(Of Integer)
	
	Private _Fecha_accidente As System.Nullable(Of Date)
	
	Private _Asistido_Previamente As System.Nullable(Of Boolean)
	
	Private _Fecha_Asistencia_previa As System.Nullable(Of Date)
	
	Private _Era_el_lugar_de_trabajo_habitual As System.Nullable(Of Boolean)
	
	Private _Lugar_de_accidente As String
	
	Private _Descripcion_del_accidente As String
	
	Private _Descripcion_Diagnostico As String
	
	Private _ID_Diagnostico As System.Nullable(Of Integer)
	
	Private _Duracion_estandar_fecha_ini As System.Nullable(Of Date)
	
	Private _Duracion_estandar_fecha_fin As System.Nullable(Of Date)
	
	Private _Observaciones As String
	
	Private _ID_Medico As System.Nullable(Of Integer)
	
	Private _NombreCompletoMedico As String
	
	Private _No_de_Colegiado As String
	
	Private _E_Tratamiento As System.Nullable(Of Integer)
	
	Private _DIAGNOSTICO As EntityRef(Of DIAGNOSTICO)
	
	Private _EMPRESA As EntityRef(Of EMPRESA)
	
	Private _MEDICO As EntityRef(Of MEDICO)
	
	Private _N_Proceso As EntityRef(Of N_Proceso)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ParteAsistenciaChanging(value As Long)
    End Sub
    Partial Private Sub OnID_ParteAsistenciaChanged()
    End Sub
    Partial Private Sub OnID_ProcesoChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnID_ProcesoChanged()
    End Sub
    Partial Private Sub OnFechaAsistenciaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAsistenciaChanged()
    End Sub
    Partial Private Sub OnE_PronosticoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnE_PronosticoChanged()
    End Sub
    Partial Private Sub OnCausaBajaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCausaBajaChanged()
    End Sub
    Partial Private Sub OnE_RegimenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnE_RegimenChanged()
    End Sub
    Partial Private Sub OnE_SituacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnE_SituacionChanged()
    End Sub
    Partial Private Sub OnID_PacienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PacienteChanged()
    End Sub
    Partial Private Sub OnNum_Tarjeta_sanitariaChanging(value As String)
    End Sub
    Partial Private Sub OnNum_Tarjeta_sanitariaChanged()
    End Sub
    Partial Private Sub OnNum_Afiliacion_Seg_SocialChanging(value As String)
    End Sub
    Partial Private Sub OnNum_Afiliacion_Seg_SocialChanged()
    End Sub
    Partial Private Sub OnDNIChanging(value As String)
    End Sub
    Partial Private Sub OnDNIChanged()
    End Sub
    Partial Private Sub OnNombreCompletoPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnNombreCompletoPacienteChanged()
    End Sub
    Partial Private Sub OnDomicilioPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnDomicilioPacienteChanged()
    End Sub
    Partial Private Sub OnLocalidadPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnLocalidadPacienteChanged()
    End Sub
    Partial Private Sub OnProvinciaPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaPacienteChanged()
    End Sub
    Partial Private Sub OnCodigo_PostalPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnCodigo_PostalPacienteChanged()
    End Sub
    Partial Private Sub OnTelefonoPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoPacienteChanged()
    End Sub
    Partial Private Sub OnPuesto_de_trabajoPacienteChanging(value As String)
    End Sub
    Partial Private Sub OnPuesto_de_trabajoPacienteChanged()
    End Sub
    Partial Private Sub OnID_EmpresaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_EmpresaChanged()
    End Sub
    Partial Private Sub OnNombreEmpresaChanging(value As String)
    End Sub
    Partial Private Sub OnNombreEmpresaChanged()
    End Sub
    Partial Private Sub OnDomicilioEmpresaChanging(value As String)
    End Sub
    Partial Private Sub OnDomicilioEmpresaChanged()
    End Sub
    Partial Private Sub OnLocalidadEmpresaChanging(value As String)
    End Sub
    Partial Private Sub OnLocalidadEmpresaChanged()
    End Sub
    Partial Private Sub OnProvinciaEmpresaChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaEmpresaChanged()
    End Sub
    Partial Private Sub OnCodigo_Postal_EmpresaChanging(value As String)
    End Sub
    Partial Private Sub OnCodigo_Postal_EmpresaChanged()
    End Sub
    Partial Private Sub OnActividad_empresaChanging(value As String)
    End Sub
    Partial Private Sub OnActividad_empresaChanged()
    End Sub
    Partial Private Sub OnCódigo_Nacional_Actividad_Económica_CNAEChanging(value As String)
    End Sub
    Partial Private Sub OnCódigo_Nacional_Actividad_Económica_CNAEChanged()
    End Sub
    Partial Private Sub OnEntidad_Pago_IT_CPChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEntidad_Pago_IT_CPChanged()
    End Sub
    Partial Private Sub OnFecha_accidenteChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFecha_accidenteChanged()
    End Sub
    Partial Private Sub OnAsistido_PreviamenteChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnAsistido_PreviamenteChanged()
    End Sub
    Partial Private Sub OnFecha_Asistencia_previaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFecha_Asistencia_previaChanged()
    End Sub
    Partial Private Sub OnEra_el_lugar_de_trabajo_habitualChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEra_el_lugar_de_trabajo_habitualChanged()
    End Sub
    Partial Private Sub OnLugar_de_accidenteChanging(value As String)
    End Sub
    Partial Private Sub OnLugar_de_accidenteChanged()
    End Sub
    Partial Private Sub OnDescripcion_del_accidenteChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_del_accidenteChanged()
    End Sub
    Partial Private Sub OnDescripcion_DiagnosticoChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcion_DiagnosticoChanged()
    End Sub
    Partial Private Sub OnID_DiagnosticoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_DiagnosticoChanged()
    End Sub
    Partial Private Sub OnDuracion_estandar_fecha_iniChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDuracion_estandar_fecha_iniChanged()
    End Sub
    Partial Private Sub OnDuracion_estandar_fecha_finChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDuracion_estandar_fecha_finChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnID_MedicoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_MedicoChanged()
    End Sub
    Partial Private Sub OnNombreCompletoMedicoChanging(value As String)
    End Sub
    Partial Private Sub OnNombreCompletoMedicoChanged()
    End Sub
    Partial Private Sub OnNo_de_ColegiadoChanging(value As String)
    End Sub
    Partial Private Sub OnNo_de_ColegiadoChanged()
    End Sub
    Partial Private Sub OnE_TratamientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnE_TratamientoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DIAGNOSTICO = CType(Nothing, EntityRef(Of DIAGNOSTICO))
		Me._EMPRESA = CType(Nothing, EntityRef(Of EMPRESA))
		Me._MEDICO = CType(Nothing, EntityRef(Of MEDICO))
		Me._N_Proceso = CType(Nothing, EntityRef(Of N_Proceso))
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ParteAsistencia", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_ParteAsistencia() As Long
		Get
			Return Me._ID_ParteAsistencia
		End Get
		Set
			If ((Me._ID_ParteAsistencia = value)  _
						= false) Then
				Me.OnID_ParteAsistenciaChanging(value)
				Me.SendPropertyChanging
				Me._ID_ParteAsistencia = value
				Me.SendPropertyChanged("ID_ParteAsistencia")
				Me.OnID_ParteAsistenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proceso", DbType:="BigInt")>  _
	Public Property ID_Proceso() As System.Nullable(Of Long)
		Get
			Return Me._ID_Proceso
		End Get
		Set
			If (Me._ID_Proceso.Equals(value) = false) Then
				If Me._N_Proceso.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProcesoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proceso = value
				Me.SendPropertyChanged("ID_Proceso")
				Me.OnID_ProcesoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAsistencia", DbType:="DateTime")>  _
	Public Property FechaAsistencia() As System.Nullable(Of Date)
		Get
			Return Me._FechaAsistencia
		End Get
		Set
			If (Me._FechaAsistencia.Equals(value) = false) Then
				Me.OnFechaAsistenciaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAsistencia = value
				Me.SendPropertyChanged("FechaAsistencia")
				Me.OnFechaAsistenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_E_Pronostico", DbType:="Int")>  _
	Public Property E_Pronostico() As System.Nullable(Of Integer)
		Get
			Return Me._E_Pronostico
		End Get
		Set
			If (Me._E_Pronostico.Equals(value) = false) Then
				Me.OnE_PronosticoChanging(value)
				Me.SendPropertyChanging
				Me._E_Pronostico = value
				Me.SendPropertyChanged("E_Pronostico")
				Me.OnE_PronosticoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CausaBaja", DbType:="Bit")>  _
	Public Property CausaBaja() As System.Nullable(Of Boolean)
		Get
			Return Me._CausaBaja
		End Get
		Set
			If (Me._CausaBaja.Equals(value) = false) Then
				Me.OnCausaBajaChanging(value)
				Me.SendPropertyChanging
				Me._CausaBaja = value
				Me.SendPropertyChanged("CausaBaja")
				Me.OnCausaBajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_E_Regimen", DbType:="Int")>  _
	Public Property E_Regimen() As System.Nullable(Of Integer)
		Get
			Return Me._E_Regimen
		End Get
		Set
			If (Me._E_Regimen.Equals(value) = false) Then
				Me.OnE_RegimenChanging(value)
				Me.SendPropertyChanging
				Me._E_Regimen = value
				Me.SendPropertyChanged("E_Regimen")
				Me.OnE_RegimenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_E_Situacion", DbType:="Int")>  _
	Public Property E_Situacion() As System.Nullable(Of Integer)
		Get
			Return Me._E_Situacion
		End Get
		Set
			If (Me._E_Situacion.Equals(value) = false) Then
				Me.OnE_SituacionChanging(value)
				Me.SendPropertyChanging
				Me._E_Situacion = value
				Me.SendPropertyChanged("E_Situacion")
				Me.OnE_SituacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Paciente", DbType:="Int")>  _
	Public Property ID_Paciente() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Paciente
		End Get
		Set
			If (Me._ID_Paciente.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PacienteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Paciente = value
				Me.SendPropertyChanged("ID_Paciente")
				Me.OnID_PacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Num_Tarjeta_sanitaria", DbType:="NVarChar(50)")>  _
	Public Property Num_Tarjeta_sanitaria() As String
		Get
			Return Me._Num_Tarjeta_sanitaria
		End Get
		Set
			If (String.Equals(Me._Num_Tarjeta_sanitaria, value) = false) Then
				Me.OnNum_Tarjeta_sanitariaChanging(value)
				Me.SendPropertyChanging
				Me._Num_Tarjeta_sanitaria = value
				Me.SendPropertyChanged("Num_Tarjeta_sanitaria")
				Me.OnNum_Tarjeta_sanitariaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Num_Afiliacion_Seg_Social", DbType:="NVarChar(50)")>  _
	Public Property Num_Afiliacion_Seg_Social() As String
		Get
			Return Me._Num_Afiliacion_Seg_Social
		End Get
		Set
			If (String.Equals(Me._Num_Afiliacion_Seg_Social, value) = false) Then
				Me.OnNum_Afiliacion_Seg_SocialChanging(value)
				Me.SendPropertyChanging
				Me._Num_Afiliacion_Seg_Social = value
				Me.SendPropertyChanged("Num_Afiliacion_Seg_Social")
				Me.OnNum_Afiliacion_Seg_SocialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNI", DbType:="NVarChar(50)")>  _
	Public Property DNI() As String
		Get
			Return Me._DNI
		End Get
		Set
			If (String.Equals(Me._DNI, value) = false) Then
				Me.OnDNIChanging(value)
				Me.SendPropertyChanging
				Me._DNI = value
				Me.SendPropertyChanged("DNI")
				Me.OnDNIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreCompletoPaciente", DbType:="NVarChar(50)")>  _
	Public Property NombreCompletoPaciente() As String
		Get
			Return Me._NombreCompletoPaciente
		End Get
		Set
			If (String.Equals(Me._NombreCompletoPaciente, value) = false) Then
				Me.OnNombreCompletoPacienteChanging(value)
				Me.SendPropertyChanging
				Me._NombreCompletoPaciente = value
				Me.SendPropertyChanged("NombreCompletoPaciente")
				Me.OnNombreCompletoPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomicilioPaciente", DbType:="NVarChar(100)")>  _
	Public Property DomicilioPaciente() As String
		Get
			Return Me._DomicilioPaciente
		End Get
		Set
			If (String.Equals(Me._DomicilioPaciente, value) = false) Then
				Me.OnDomicilioPacienteChanging(value)
				Me.SendPropertyChanging
				Me._DomicilioPaciente = value
				Me.SendPropertyChanged("DomicilioPaciente")
				Me.OnDomicilioPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocalidadPaciente", DbType:="NVarChar(100)")>  _
	Public Property LocalidadPaciente() As String
		Get
			Return Me._LocalidadPaciente
		End Get
		Set
			If (String.Equals(Me._LocalidadPaciente, value) = false) Then
				Me.OnLocalidadPacienteChanging(value)
				Me.SendPropertyChanging
				Me._LocalidadPaciente = value
				Me.SendPropertyChanged("LocalidadPaciente")
				Me.OnLocalidadPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProvinciaPaciente", DbType:="NVarChar(50)")>  _
	Public Property ProvinciaPaciente() As String
		Get
			Return Me._ProvinciaPaciente
		End Get
		Set
			If (String.Equals(Me._ProvinciaPaciente, value) = false) Then
				Me.OnProvinciaPacienteChanging(value)
				Me.SendPropertyChanging
				Me._ProvinciaPaciente = value
				Me.SendPropertyChanged("ProvinciaPaciente")
				Me.OnProvinciaPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo_PostalPaciente", DbType:="NVarChar(50)")>  _
	Public Property Codigo_PostalPaciente() As String
		Get
			Return Me._Codigo_PostalPaciente
		End Get
		Set
			If (String.Equals(Me._Codigo_PostalPaciente, value) = false) Then
				Me.OnCodigo_PostalPacienteChanging(value)
				Me.SendPropertyChanging
				Me._Codigo_PostalPaciente = value
				Me.SendPropertyChanged("Codigo_PostalPaciente")
				Me.OnCodigo_PostalPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelefonoPaciente", DbType:="NVarChar(50)")>  _
	Public Property TelefonoPaciente() As String
		Get
			Return Me._TelefonoPaciente
		End Get
		Set
			If (String.Equals(Me._TelefonoPaciente, value) = false) Then
				Me.OnTelefonoPacienteChanging(value)
				Me.SendPropertyChanging
				Me._TelefonoPaciente = value
				Me.SendPropertyChanged("TelefonoPaciente")
				Me.OnTelefonoPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Puesto_de_trabajoPaciente", DbType:="NVarChar(50)")>  _
	Public Property Puesto_de_trabajoPaciente() As String
		Get
			Return Me._Puesto_de_trabajoPaciente
		End Get
		Set
			If (String.Equals(Me._Puesto_de_trabajoPaciente, value) = false) Then
				Me.OnPuesto_de_trabajoPacienteChanging(value)
				Me.SendPropertyChanging
				Me._Puesto_de_trabajoPaciente = value
				Me.SendPropertyChanged("Puesto_de_trabajoPaciente")
				Me.OnPuesto_de_trabajoPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Empresa", DbType:="Int")>  _
	Public Property ID_Empresa() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Empresa
		End Get
		Set
			If (Me._ID_Empresa.Equals(value) = false) Then
				If Me._EMPRESA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Empresa = value
				Me.SendPropertyChanged("ID_Empresa")
				Me.OnID_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreEmpresa", DbType:="NVarChar(50)")>  _
	Public Property NombreEmpresa() As String
		Get
			Return Me._NombreEmpresa
		End Get
		Set
			If (String.Equals(Me._NombreEmpresa, value) = false) Then
				Me.OnNombreEmpresaChanging(value)
				Me.SendPropertyChanging
				Me._NombreEmpresa = value
				Me.SendPropertyChanged("NombreEmpresa")
				Me.OnNombreEmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomicilioEmpresa", DbType:="NVarChar(50)")>  _
	Public Property DomicilioEmpresa() As String
		Get
			Return Me._DomicilioEmpresa
		End Get
		Set
			If (String.Equals(Me._DomicilioEmpresa, value) = false) Then
				Me.OnDomicilioEmpresaChanging(value)
				Me.SendPropertyChanging
				Me._DomicilioEmpresa = value
				Me.SendPropertyChanged("DomicilioEmpresa")
				Me.OnDomicilioEmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocalidadEmpresa", DbType:="NVarChar(50)")>  _
	Public Property LocalidadEmpresa() As String
		Get
			Return Me._LocalidadEmpresa
		End Get
		Set
			If (String.Equals(Me._LocalidadEmpresa, value) = false) Then
				Me.OnLocalidadEmpresaChanging(value)
				Me.SendPropertyChanging
				Me._LocalidadEmpresa = value
				Me.SendPropertyChanged("LocalidadEmpresa")
				Me.OnLocalidadEmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProvinciaEmpresa", DbType:="NVarChar(50)")>  _
	Public Property ProvinciaEmpresa() As String
		Get
			Return Me._ProvinciaEmpresa
		End Get
		Set
			If (String.Equals(Me._ProvinciaEmpresa, value) = false) Then
				Me.OnProvinciaEmpresaChanging(value)
				Me.SendPropertyChanging
				Me._ProvinciaEmpresa = value
				Me.SendPropertyChanged("ProvinciaEmpresa")
				Me.OnProvinciaEmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo_Postal_Empresa", DbType:="NVarChar(50)")>  _
	Public Property Codigo_Postal_Empresa() As String
		Get
			Return Me._Codigo_Postal_Empresa
		End Get
		Set
			If (String.Equals(Me._Codigo_Postal_Empresa, value) = false) Then
				Me.OnCodigo_Postal_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._Codigo_Postal_Empresa = value
				Me.SendPropertyChanged("Codigo_Postal_Empresa")
				Me.OnCodigo_Postal_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Actividad_empresa", DbType:="NVarChar(50)")>  _
	Public Property Actividad_empresa() As String
		Get
			Return Me._Actividad_empresa
		End Get
		Set
			If (String.Equals(Me._Actividad_empresa, value) = false) Then
				Me.OnActividad_empresaChanging(value)
				Me.SendPropertyChanging
				Me._Actividad_empresa = value
				Me.SendPropertyChanged("Actividad_empresa")
				Me.OnActividad_empresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Código_Nacional_Actividad_Económica_CNAE", DbType:="NVarChar(50)")>  _
	Public Property Código_Nacional_Actividad_Económica_CNAE() As String
		Get
			Return Me._Código_Nacional_Actividad_Económica_CNAE
		End Get
		Set
			If (String.Equals(Me._Código_Nacional_Actividad_Económica_CNAE, value) = false) Then
				Me.OnCódigo_Nacional_Actividad_Económica_CNAEChanging(value)
				Me.SendPropertyChanging
				Me._Código_Nacional_Actividad_Económica_CNAE = value
				Me.SendPropertyChanged("Código_Nacional_Actividad_Económica_CNAE")
				Me.OnCódigo_Nacional_Actividad_Económica_CNAEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Entidad_Pago_IT_CP", DbType:="Int")>  _
	Public Property Entidad_Pago_IT_CP() As System.Nullable(Of Integer)
		Get
			Return Me._Entidad_Pago_IT_CP
		End Get
		Set
			If (Me._Entidad_Pago_IT_CP.Equals(value) = false) Then
				Me.OnEntidad_Pago_IT_CPChanging(value)
				Me.SendPropertyChanging
				Me._Entidad_Pago_IT_CP = value
				Me.SendPropertyChanged("Entidad_Pago_IT_CP")
				Me.OnEntidad_Pago_IT_CPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha_accidente", DbType:="DateTime")>  _
	Public Property Fecha_accidente() As System.Nullable(Of Date)
		Get
			Return Me._Fecha_accidente
		End Get
		Set
			If (Me._Fecha_accidente.Equals(value) = false) Then
				Me.OnFecha_accidenteChanging(value)
				Me.SendPropertyChanging
				Me._Fecha_accidente = value
				Me.SendPropertyChanged("Fecha_accidente")
				Me.OnFecha_accidenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Asistido_Previamente", DbType:="Bit")>  _
	Public Property Asistido_Previamente() As System.Nullable(Of Boolean)
		Get
			Return Me._Asistido_Previamente
		End Get
		Set
			If (Me._Asistido_Previamente.Equals(value) = false) Then
				Me.OnAsistido_PreviamenteChanging(value)
				Me.SendPropertyChanging
				Me._Asistido_Previamente = value
				Me.SendPropertyChanged("Asistido_Previamente")
				Me.OnAsistido_PreviamenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha_Asistencia_previa", DbType:="DateTime")>  _
	Public Property Fecha_Asistencia_previa() As System.Nullable(Of Date)
		Get
			Return Me._Fecha_Asistencia_previa
		End Get
		Set
			If (Me._Fecha_Asistencia_previa.Equals(value) = false) Then
				Me.OnFecha_Asistencia_previaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha_Asistencia_previa = value
				Me.SendPropertyChanged("Fecha_Asistencia_previa")
				Me.OnFecha_Asistencia_previaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Era_el_lugar_de_trabajo_habitual", DbType:="Bit")>  _
	Public Property Era_el_lugar_de_trabajo_habitual() As System.Nullable(Of Boolean)
		Get
			Return Me._Era_el_lugar_de_trabajo_habitual
		End Get
		Set
			If (Me._Era_el_lugar_de_trabajo_habitual.Equals(value) = false) Then
				Me.OnEra_el_lugar_de_trabajo_habitualChanging(value)
				Me.SendPropertyChanging
				Me._Era_el_lugar_de_trabajo_habitual = value
				Me.SendPropertyChanged("Era_el_lugar_de_trabajo_habitual")
				Me.OnEra_el_lugar_de_trabajo_habitualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lugar_de_accidente", DbType:="NVarChar(200)")>  _
	Public Property Lugar_de_accidente() As String
		Get
			Return Me._Lugar_de_accidente
		End Get
		Set
			If (String.Equals(Me._Lugar_de_accidente, value) = false) Then
				Me.OnLugar_de_accidenteChanging(value)
				Me.SendPropertyChanging
				Me._Lugar_de_accidente = value
				Me.SendPropertyChanged("Lugar_de_accidente")
				Me.OnLugar_de_accidenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_del_accidente", DbType:="NVarChar(MAX)")>  _
	Public Property Descripcion_del_accidente() As String
		Get
			Return Me._Descripcion_del_accidente
		End Get
		Set
			If (String.Equals(Me._Descripcion_del_accidente, value) = false) Then
				Me.OnDescripcion_del_accidenteChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_del_accidente = value
				Me.SendPropertyChanged("Descripcion_del_accidente")
				Me.OnDescripcion_del_accidenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion_Diagnostico", DbType:="NVarChar(50)")>  _
	Public Property Descripcion_Diagnostico() As String
		Get
			Return Me._Descripcion_Diagnostico
		End Get
		Set
			If (String.Equals(Me._Descripcion_Diagnostico, value) = false) Then
				Me.OnDescripcion_DiagnosticoChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion_Diagnostico = value
				Me.SendPropertyChanged("Descripcion_Diagnostico")
				Me.OnDescripcion_DiagnosticoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Diagnostico", DbType:="Int")>  _
	Public Property ID_Diagnostico() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Diagnostico
		End Get
		Set
			If (Me._ID_Diagnostico.Equals(value) = false) Then
				If Me._DIAGNOSTICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_DiagnosticoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Diagnostico = value
				Me.SendPropertyChanged("ID_Diagnostico")
				Me.OnID_DiagnosticoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duracion_estandar_fecha_ini", DbType:="DateTime")>  _
	Public Property Duracion_estandar_fecha_ini() As System.Nullable(Of Date)
		Get
			Return Me._Duracion_estandar_fecha_ini
		End Get
		Set
			If (Me._Duracion_estandar_fecha_ini.Equals(value) = false) Then
				Me.OnDuracion_estandar_fecha_iniChanging(value)
				Me.SendPropertyChanging
				Me._Duracion_estandar_fecha_ini = value
				Me.SendPropertyChanged("Duracion_estandar_fecha_ini")
				Me.OnDuracion_estandar_fecha_iniChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duracion_estandar_fecha_fin", DbType:="DateTime")>  _
	Public Property Duracion_estandar_fecha_fin() As System.Nullable(Of Date)
		Get
			Return Me._Duracion_estandar_fecha_fin
		End Get
		Set
			If (Me._Duracion_estandar_fecha_fin.Equals(value) = false) Then
				Me.OnDuracion_estandar_fecha_finChanging(value)
				Me.SendPropertyChanging
				Me._Duracion_estandar_fecha_fin = value
				Me.SendPropertyChanged("Duracion_estandar_fecha_fin")
				Me.OnDuracion_estandar_fecha_finChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Medico", DbType:="Int")>  _
	Public Property ID_Medico() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Medico
		End Get
		Set
			If (Me._ID_Medico.Equals(value) = false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_MedicoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Medico = value
				Me.SendPropertyChanged("ID_Medico")
				Me.OnID_MedicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreCompletoMedico", DbType:="NVarChar(50)")>  _
	Public Property NombreCompletoMedico() As String
		Get
			Return Me._NombreCompletoMedico
		End Get
		Set
			If (String.Equals(Me._NombreCompletoMedico, value) = false) Then
				Me.OnNombreCompletoMedicoChanging(value)
				Me.SendPropertyChanging
				Me._NombreCompletoMedico = value
				Me.SendPropertyChanged("NombreCompletoMedico")
				Me.OnNombreCompletoMedicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No_de_Colegiado", DbType:="NVarChar(50)")>  _
	Public Property No_de_Colegiado() As String
		Get
			Return Me._No_de_Colegiado
		End Get
		Set
			If (String.Equals(Me._No_de_Colegiado, value) = false) Then
				Me.OnNo_de_ColegiadoChanging(value)
				Me.SendPropertyChanging
				Me._No_de_Colegiado = value
				Me.SendPropertyChanged("No_de_Colegiado")
				Me.OnNo_de_ColegiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_E_Tratamiento", DbType:="Int")>  _
	Public Property E_Tratamiento() As System.Nullable(Of Integer)
		Get
			Return Me._E_Tratamiento
		End Get
		Set
			If (Me._E_Tratamiento.Equals(value) = false) Then
				Me.OnE_TratamientoChanging(value)
				Me.SendPropertyChanging
				Me._E_Tratamiento = value
				Me.SendPropertyChanged("E_Tratamiento")
				Me.OnE_TratamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DIAGNOSTICO_N_Partes_Asistencia", Storage:="_DIAGNOSTICO", ThisKey:="ID_Diagnostico", OtherKey:="IDDIAGNOSTICO", IsForeignKey:=true)>  _
	Public Property DIAGNOSTICO() As DIAGNOSTICO
		Get
			Return Me._DIAGNOSTICO.Entity
		End Get
		Set
			Dim previousValue As DIAGNOSTICO = Me._DIAGNOSTICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DIAGNOSTICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DIAGNOSTICO.Entity = Nothing
					previousValue.N_Partes_Asistencias.Remove(Me)
				End If
				Me._DIAGNOSTICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Partes_Asistencias.Add(Me)
					Me._ID_Diagnostico = value.IDDIAGNOSTICO
				Else
					Me._ID_Diagnostico = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("DIAGNOSTICO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_N_Partes_Asistencia", Storage:="_EMPRESA", ThisKey:="ID_Empresa", OtherKey:="CEMPRESA", IsForeignKey:=true)>  _
	Public Property EMPRESA() As EMPRESA
		Get
			Return Me._EMPRESA.Entity
		End Get
		Set
			Dim previousValue As EMPRESA = Me._EMPRESA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EMPRESA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EMPRESA.Entity = Nothing
					previousValue.N_Partes_Asistencias.Remove(Me)
				End If
				Me._EMPRESA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Partes_Asistencias.Add(Me)
					Me._ID_Empresa = value.CEMPRESA
				Else
					Me._ID_Empresa = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("EMPRESA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_N_Partes_Asistencia", Storage:="_MEDICO", ThisKey:="ID_Medico", OtherKey:="CMEDICO", IsForeignKey:=true)>  _
	Public Property MEDICO() As MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.N_Partes_Asistencias.Remove(Me)
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Partes_Asistencias.Add(Me)
					Me._ID_Medico = value.CMEDICO
				Else
					Me._ID_Medico = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MEDICO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Proceso_N_Partes_Asistencia", Storage:="_N_Proceso", ThisKey:="ID_Proceso", OtherKey:="ID_Proceso", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property N_Proceso() As N_Proceso
		Get
			Return Me._N_Proceso.Entity
		End Get
		Set
			Dim previousValue As N_Proceso = Me._N_Proceso.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_Proceso.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_Proceso.Entity = Nothing
					previousValue.N_Partes_Asistencias.Remove(Me)
				End If
				Me._N_Proceso.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Partes_Asistencias.Add(Me)
					Me._ID_Proceso = value.ID_Proceso
				Else
					Me._ID_Proceso = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("N_Proceso")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_N_Partes_Asistencia", Storage:="_PACIENTE", ThisKey:="ID_Paciente", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.N_Partes_Asistencias.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.N_Partes_Asistencias.Add(Me)
					Me._ID_Paciente = value.CPACIENTE
				Else
					Me._ID_Paciente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EntregasCuenta")>  _
Partial Public Class EntregasCuenta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDEntregaCuenta As Long
	
	Private _IDPaciente As System.Nullable(Of Integer)
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _TipoDocumento As System.Nullable(Of Integer)
	
	Private _CodDocumento As String
	
	Private _Descripcion As String
	
	Private _Importe As System.Nullable(Of Double)
	
	Private _IDUsuarioEfectua As System.Nullable(Of Integer)
	
	Private _Eliminado As System.Nullable(Of Boolean)
	
	Private _PagadoConCredito As System.Nullable(Of Boolean)
	
	Private _IDFormaPago As String
	
	Private _FACTURAs As EntitySet(Of FACTURA)
	
	Private _N_Facturas As EntitySet(Of N_Factura)
	
	Private _N_Tickets As EntitySet(Of N_Ticket)
	
	Private _RECIBOs As EntitySet(Of RECIBO)
	
	Private _CITAs As EntitySet(Of CITA)
	
	Private _FORMASPAGO As EntityRef(Of FORMASPAGO)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
	Private _USUARIO As EntityRef(Of USUARIO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDEntregaCuentaChanging(value As Long)
    End Sub
    Partial Private Sub OnIDEntregaCuentaChanged()
    End Sub
    Partial Private Sub OnIDPacienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDPacienteChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnTipoDocumentoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTipoDocumentoChanged()
    End Sub
    Partial Private Sub OnCodDocumentoChanging(value As String)
    End Sub
    Partial Private Sub OnCodDocumentoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    Partial Private Sub OnIDUsuarioEfectuaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDUsuarioEfectuaChanged()
    End Sub
    Partial Private Sub OnEliminadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEliminadoChanged()
    End Sub
    Partial Private Sub OnPagadoConCreditoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPagadoConCreditoChanged()
    End Sub
    Partial Private Sub OnIDFormaPagoChanging(value As String)
    End Sub
    Partial Private Sub OnIDFormaPagoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FACTURAs = New EntitySet(Of FACTURA)(AddressOf Me.attach_FACTURAs, AddressOf Me.detach_FACTURAs)
		Me._N_Facturas = New EntitySet(Of N_Factura)(AddressOf Me.attach_N_Facturas, AddressOf Me.detach_N_Facturas)
		Me._N_Tickets = New EntitySet(Of N_Ticket)(AddressOf Me.attach_N_Tickets, AddressOf Me.detach_N_Tickets)
		Me._RECIBOs = New EntitySet(Of RECIBO)(AddressOf Me.attach_RECIBOs, AddressOf Me.detach_RECIBOs)
		Me._CITAs = New EntitySet(Of CITA)(AddressOf Me.attach_CITAs, AddressOf Me.detach_CITAs)
		Me._FORMASPAGO = CType(Nothing, EntityRef(Of FORMASPAGO))
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		Me._USUARIO = CType(Nothing, EntityRef(Of USUARIO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDEntregaCuenta", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDEntregaCuenta() As Long
		Get
			Return Me._IDEntregaCuenta
		End Get
		Set
			If ((Me._IDEntregaCuenta = value)  _
						= false) Then
				Me.OnIDEntregaCuentaChanging(value)
				Me.SendPropertyChanging
				Me._IDEntregaCuenta = value
				Me.SendPropertyChanged("IDEntregaCuenta")
				Me.OnIDEntregaCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPaciente", DbType:="Int")>  _
	Public Property IDPaciente() As System.Nullable(Of Integer)
		Get
			Return Me._IDPaciente
		End Get
		Set
			If (Me._IDPaciente.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDPacienteChanging(value)
				Me.SendPropertyChanging
				Me._IDPaciente = value
				Me.SendPropertyChanged("IDPaciente")
				Me.OnIDPacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="DateTime")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoDocumento", DbType:="Int")>  _
	Public Property TipoDocumento() As System.Nullable(Of Integer)
		Get
			Return Me._TipoDocumento
		End Get
		Set
			If (Me._TipoDocumento.Equals(value) = false) Then
				Me.OnTipoDocumentoChanging(value)
				Me.SendPropertyChanging
				Me._TipoDocumento = value
				Me.SendPropertyChanged("TipoDocumento")
				Me.OnTipoDocumentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodDocumento", DbType:="NVarChar(50)")>  _
	Public Property CodDocumento() As String
		Get
			Return Me._CodDocumento
		End Get
		Set
			If (String.Equals(Me._CodDocumento, value) = false) Then
				Me.OnCodDocumentoChanging(value)
				Me.SendPropertyChanging
				Me._CodDocumento = value
				Me.SendPropertyChanged("CodDocumento")
				Me.OnCodDocumentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Float")>  _
	Public Property Importe() As System.Nullable(Of Double)
		Get
			Return Me._Importe
		End Get
		Set
			If (Me._Importe.Equals(value) = false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDUsuarioEfectua", DbType:="Int")>  _
	Public Property IDUsuarioEfectua() As System.Nullable(Of Integer)
		Get
			Return Me._IDUsuarioEfectua
		End Get
		Set
			If (Me._IDUsuarioEfectua.Equals(value) = false) Then
				If Me._USUARIO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDUsuarioEfectuaChanging(value)
				Me.SendPropertyChanging
				Me._IDUsuarioEfectua = value
				Me.SendPropertyChanged("IDUsuarioEfectua")
				Me.OnIDUsuarioEfectuaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Eliminado", DbType:="Bit")>  _
	Public Property Eliminado() As System.Nullable(Of Boolean)
		Get
			Return Me._Eliminado
		End Get
		Set
			If (Me._Eliminado.Equals(value) = false) Then
				Me.OnEliminadoChanging(value)
				Me.SendPropertyChanging
				Me._Eliminado = value
				Me.SendPropertyChanged("Eliminado")
				Me.OnEliminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PagadoConCredito", DbType:="Bit")>  _
	Public Property PagadoConCredito() As System.Nullable(Of Boolean)
		Get
			Return Me._PagadoConCredito
		End Get
		Set
			If (Me._PagadoConCredito.Equals(value) = false) Then
				Me.OnPagadoConCreditoChanging(value)
				Me.SendPropertyChanging
				Me._PagadoConCredito = value
				Me.SendPropertyChanged("PagadoConCredito")
				Me.OnPagadoConCreditoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDFormaPago", DbType:="VarChar(10)")>  _
	Public Property IDFormaPago() As String
		Get
			Return Me._IDFormaPago
		End Get
		Set
			If (String.Equals(Me._IDFormaPago, value) = false) Then
				If Me._FORMASPAGO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDFormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._IDFormaPago = value
				Me.SendPropertyChanged("IDFormaPago")
				Me.OnIDFormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EntregasCuenta_FACTURA", Storage:="_FACTURAs", ThisKey:="IDEntregaCuenta", OtherKey:="IDEntregaCuenta")>  _
	Public Property FACTURAs() As EntitySet(Of FACTURA)
		Get
			Return Me._FACTURAs
		End Get
		Set
			Me._FACTURAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EntregasCuenta_N_Factura", Storage:="_N_Facturas", ThisKey:="IDEntregaCuenta", OtherKey:="IDEntregaCuenta")>  _
	Public Property N_Facturas() As EntitySet(Of N_Factura)
		Get
			Return Me._N_Facturas
		End Get
		Set
			Me._N_Facturas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EntregasCuenta_N_Ticket", Storage:="_N_Tickets", ThisKey:="IDEntregaCuenta", OtherKey:="IDEntregaCuenta")>  _
	Public Property N_Tickets() As EntitySet(Of N_Ticket)
		Get
			Return Me._N_Tickets
		End Get
		Set
			Me._N_Tickets.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EntregasCuenta_RECIBO", Storage:="_RECIBOs", ThisKey:="IDEntregaCuenta", OtherKey:="IDEntregaCuenta")>  _
	Public Property RECIBOs() As EntitySet(Of RECIBO)
		Get
			Return Me._RECIBOs
		End Get
		Set
			Me._RECIBOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EntregasCuenta_CITA", Storage:="_CITAs", ThisKey:="IDEntregaCuenta", OtherKey:="IDEntregaCuenta")>  _
	Public Property CITAs() As EntitySet(Of CITA)
		Get
			Return Me._CITAs
		End Get
		Set
			Me._CITAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_EntregasCuenta", Storage:="_FORMASPAGO", ThisKey:="IDFormaPago", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property FORMASPAGO() As FORMASPAGO
		Get
			Return Me._FORMASPAGO.Entity
		End Get
		Set
			Dim previousValue As FORMASPAGO = Me._FORMASPAGO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FORMASPAGO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FORMASPAGO.Entity = Nothing
					previousValue.EntregasCuentas.Remove(Me)
				End If
				Me._FORMASPAGO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EntregasCuentas.Add(Me)
					Me._IDFormaPago = value.CODIGO
				Else
					Me._IDFormaPago = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("FORMASPAGO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_EntregasCuenta", Storage:="_PACIENTE", ThisKey:="IDPaciente", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.EntregasCuentas.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EntregasCuentas.Add(Me)
					Me._IDPaciente = value.CPACIENTE
				Else
					Me._IDPaciente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIO_EntregasCuenta", Storage:="_USUARIO", ThisKey:="IDUsuarioEfectua", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property USUARIO() As USUARIO
		Get
			Return Me._USUARIO.Entity
		End Get
		Set
			Dim previousValue As USUARIO = Me._USUARIO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._USUARIO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._USUARIO.Entity = Nothing
					previousValue.EntregasCuentas.Remove(Me)
				End If
				Me._USUARIO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EntregasCuentas.Add(Me)
					Me._IDUsuarioEfectua = value.CODIGO
				Else
					Me._IDUsuarioEfectua = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("USUARIO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FACTURAs(ByVal entity As FACTURA)
		Me.SendPropertyChanging
		entity.EntregasCuenta = Me
	End Sub
	
	Private Sub detach_FACTURAs(ByVal entity As FACTURA)
		Me.SendPropertyChanging
		entity.EntregasCuenta = Nothing
	End Sub
	
	Private Sub attach_N_Facturas(ByVal entity As N_Factura)
		Me.SendPropertyChanging
		entity.EntregasCuenta = Me
	End Sub
	
	Private Sub detach_N_Facturas(ByVal entity As N_Factura)
		Me.SendPropertyChanging
		entity.EntregasCuenta = Nothing
	End Sub
	
	Private Sub attach_N_Tickets(ByVal entity As N_Ticket)
		Me.SendPropertyChanging
		entity.EntregasCuenta = Me
	End Sub
	
	Private Sub detach_N_Tickets(ByVal entity As N_Ticket)
		Me.SendPropertyChanging
		entity.EntregasCuenta = Nothing
	End Sub
	
	Private Sub attach_RECIBOs(ByVal entity As RECIBO)
		Me.SendPropertyChanging
		entity.EntregasCuenta = Me
	End Sub
	
	Private Sub detach_RECIBOs(ByVal entity As RECIBO)
		Me.SendPropertyChanging
		entity.EntregasCuenta = Nothing
	End Sub
	
	Private Sub attach_CITAs(ByVal entity As CITA)
		Me.SendPropertyChanging
		entity.EntregasCuenta = Me
	End Sub
	
	Private Sub detach_CITAs(ByVal entity As CITA)
		Me.SendPropertyChanging
		entity.EntregasCuenta = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RECIBOS")>  _
Partial Public Class RECIBO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FECHAEMISION As System.Nullable(Of Date)
	
	Private _COBRADO As String
	
	Private _EMITIDO As String
	
	Private _REFCITA As System.Nullable(Of Integer)
	
	Private _REFFACTURA As System.Nullable(Of Integer)
	
	Private _IMPORTE As System.Nullable(Of Decimal)
	
	Private _REFPACIENTE As System.Nullable(Of Integer)
	
	Private _FECHAVENCIMIENTO As System.Nullable(Of Date)
	
	Private _NOMBRE As String
	
	Private _DIRECCION As String
	
	Private _NOTAS As String
	
	Private _NUMERO As Integer
	
	Private _CUENTABANCO As String
	
	Private _ENTIDAD As String
	
	Private _OFICINA As String
	
	Private _DC As String
	
	Private _CUENTA As String
	
	Private _CONCEPTO As String
	
	Private _FECHACOBRO As System.Nullable(Of Date)
	
	Private _N19 As String
	
	Private _REFFORMAPAGO As String
	
	Private _TIPO As String
	
	Private _REFEMPRESA As System.Nullable(Of Integer)
	
	Private _IDEntregaCuenta As System.Nullable(Of Long)
	
	Private _PagadoConCredito As System.Nullable(Of Boolean)
	
	Private _EntregasCuenta As EntityRef(Of EntregasCuenta)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
	Private _FORMASPAGO As EntityRef(Of FORMASPAGO)
	
	Private _EMPRESA As EntityRef(Of EMPRESA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFECHAEMISIONChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAEMISIONChanged()
    End Sub
    Partial Private Sub OnCOBRADOChanging(value As String)
    End Sub
    Partial Private Sub OnCOBRADOChanged()
    End Sub
    Partial Private Sub OnEMITIDOChanging(value As String)
    End Sub
    Partial Private Sub OnEMITIDOChanged()
    End Sub
    Partial Private Sub OnREFCITAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFCITAChanged()
    End Sub
    Partial Private Sub OnREFFACTURAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFFACTURAChanged()
    End Sub
    Partial Private Sub OnIMPORTEChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnIMPORTEChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnFECHAVENCIMIENTOChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAVENCIMIENTOChanged()
    End Sub
    Partial Private Sub OnNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREChanged()
    End Sub
    Partial Private Sub OnDIRECCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDIRECCIONChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    Partial Private Sub OnNUMEROChanging(value As Integer)
    End Sub
    Partial Private Sub OnNUMEROChanged()
    End Sub
    Partial Private Sub OnCUENTABANCOChanging(value As String)
    End Sub
    Partial Private Sub OnCUENTABANCOChanged()
    End Sub
    Partial Private Sub OnENTIDADChanging(value As String)
    End Sub
    Partial Private Sub OnENTIDADChanged()
    End Sub
    Partial Private Sub OnOFICINAChanging(value As String)
    End Sub
    Partial Private Sub OnOFICINAChanged()
    End Sub
    Partial Private Sub OnDCChanging(value As String)
    End Sub
    Partial Private Sub OnDCChanged()
    End Sub
    Partial Private Sub OnCUENTAChanging(value As String)
    End Sub
    Partial Private Sub OnCUENTAChanged()
    End Sub
    Partial Private Sub OnCONCEPTOChanging(value As String)
    End Sub
    Partial Private Sub OnCONCEPTOChanged()
    End Sub
    Partial Private Sub OnFECHACOBROChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHACOBROChanged()
    End Sub
    Partial Private Sub OnN19Changing(value As String)
    End Sub
    Partial Private Sub OnN19Changed()
    End Sub
    Partial Private Sub OnREFFORMAPAGOChanging(value As String)
    End Sub
    Partial Private Sub OnREFFORMAPAGOChanged()
    End Sub
    Partial Private Sub OnTIPOChanging(value As String)
    End Sub
    Partial Private Sub OnTIPOChanged()
    End Sub
    Partial Private Sub OnREFEMPRESAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFEMPRESAChanged()
    End Sub
    Partial Private Sub OnIDEntregaCuentaChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnIDEntregaCuentaChanged()
    End Sub
    Partial Private Sub OnPagadoConCreditoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPagadoConCreditoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EntregasCuenta = CType(Nothing, EntityRef(Of EntregasCuenta))
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		Me._FORMASPAGO = CType(Nothing, EntityRef(Of FORMASPAGO))
		Me._EMPRESA = CType(Nothing, EntityRef(Of EMPRESA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHAEMISION", DbType:="DateTime")>  _
	Public Property FECHAEMISION() As System.Nullable(Of Date)
		Get
			Return Me._FECHAEMISION
		End Get
		Set
			If (Me._FECHAEMISION.Equals(value) = false) Then
				Me.OnFECHAEMISIONChanging(value)
				Me.SendPropertyChanging
				Me._FECHAEMISION = value
				Me.SendPropertyChanged("FECHAEMISION")
				Me.OnFECHAEMISIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COBRADO", DbType:="VarChar(1)")>  _
	Public Property COBRADO() As String
		Get
			Return Me._COBRADO
		End Get
		Set
			If (String.Equals(Me._COBRADO, value) = false) Then
				Me.OnCOBRADOChanging(value)
				Me.SendPropertyChanging
				Me._COBRADO = value
				Me.SendPropertyChanged("COBRADO")
				Me.OnCOBRADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMITIDO", DbType:="VarChar(1)")>  _
	Public Property EMITIDO() As String
		Get
			Return Me._EMITIDO
		End Get
		Set
			If (String.Equals(Me._EMITIDO, value) = false) Then
				Me.OnEMITIDOChanging(value)
				Me.SendPropertyChanging
				Me._EMITIDO = value
				Me.SendPropertyChanged("EMITIDO")
				Me.OnEMITIDOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFCITA", DbType:="Int")>  _
	Public Property REFCITA() As System.Nullable(Of Integer)
		Get
			Return Me._REFCITA
		End Get
		Set
			If (Me._REFCITA.Equals(value) = false) Then
				Me.OnREFCITAChanging(value)
				Me.SendPropertyChanging
				Me._REFCITA = value
				Me.SendPropertyChanged("REFCITA")
				Me.OnREFCITAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFFACTURA", DbType:="Int")>  _
	Public Property REFFACTURA() As System.Nullable(Of Integer)
		Get
			Return Me._REFFACTURA
		End Get
		Set
			If (Me._REFFACTURA.Equals(value) = false) Then
				Me.OnREFFACTURAChanging(value)
				Me.SendPropertyChanging
				Me._REFFACTURA = value
				Me.SendPropertyChanged("REFFACTURA")
				Me.OnREFFACTURAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMPORTE", DbType:="Decimal(18,2)")>  _
	Public Property IMPORTE() As System.Nullable(Of Decimal)
		Get
			Return Me._IMPORTE
		End Get
		Set
			If (Me._IMPORTE.Equals(value) = false) Then
				Me.OnIMPORTEChanging(value)
				Me.SendPropertyChanging
				Me._IMPORTE = value
				Me.SendPropertyChanged("IMPORTE")
				Me.OnIMPORTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int")>  _
	Public Property REFPACIENTE() As System.Nullable(Of Integer)
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If (Me._REFPACIENTE.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHAVENCIMIENTO", DbType:="DateTime")>  _
	Public Property FECHAVENCIMIENTO() As System.Nullable(Of Date)
		Get
			Return Me._FECHAVENCIMIENTO
		End Get
		Set
			If (Me._FECHAVENCIMIENTO.Equals(value) = false) Then
				Me.OnFECHAVENCIMIENTOChanging(value)
				Me.SendPropertyChanging
				Me._FECHAVENCIMIENTO = value
				Me.SendPropertyChanged("FECHAVENCIMIENTO")
				Me.OnFECHAVENCIMIENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", DbType:="VarChar(90)")>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me.OnNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRE = value
				Me.SendPropertyChanged("NOMBRE")
				Me.OnNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIRECCION", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DIRECCION() As String
		Get
			Return Me._DIRECCION
		End Get
		Set
			If (String.Equals(Me._DIRECCION, value) = false) Then
				Me.OnDIRECCIONChanging(value)
				Me.SendPropertyChanging
				Me._DIRECCION = value
				Me.SendPropertyChanged("DIRECCION")
				Me.OnDIRECCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUMERO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property NUMERO() As Integer
		Get
			Return Me._NUMERO
		End Get
		Set
			If ((Me._NUMERO = value)  _
						= false) Then
				Me.OnNUMEROChanging(value)
				Me.SendPropertyChanging
				Me._NUMERO = value
				Me.SendPropertyChanged("NUMERO")
				Me.OnNUMEROChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUENTABANCO", DbType:="VarChar(20)")>  _
	Public Property CUENTABANCO() As String
		Get
			Return Me._CUENTABANCO
		End Get
		Set
			If (String.Equals(Me._CUENTABANCO, value) = false) Then
				Me.OnCUENTABANCOChanging(value)
				Me.SendPropertyChanging
				Me._CUENTABANCO = value
				Me.SendPropertyChanged("CUENTABANCO")
				Me.OnCUENTABANCOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ENTIDAD", DbType:="VarChar(4)")>  _
	Public Property ENTIDAD() As String
		Get
			Return Me._ENTIDAD
		End Get
		Set
			If (String.Equals(Me._ENTIDAD, value) = false) Then
				Me.OnENTIDADChanging(value)
				Me.SendPropertyChanging
				Me._ENTIDAD = value
				Me.SendPropertyChanged("ENTIDAD")
				Me.OnENTIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OFICINA", DbType:="VarChar(4)")>  _
	Public Property OFICINA() As String
		Get
			Return Me._OFICINA
		End Get
		Set
			If (String.Equals(Me._OFICINA, value) = false) Then
				Me.OnOFICINAChanging(value)
				Me.SendPropertyChanging
				Me._OFICINA = value
				Me.SendPropertyChanged("OFICINA")
				Me.OnOFICINAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DC", DbType:="VarChar(2)")>  _
	Public Property DC() As String
		Get
			Return Me._DC
		End Get
		Set
			If (String.Equals(Me._DC, value) = false) Then
				Me.OnDCChanging(value)
				Me.SendPropertyChanging
				Me._DC = value
				Me.SendPropertyChanged("DC")
				Me.OnDCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUENTA", DbType:="VarChar(10)")>  _
	Public Property CUENTA() As String
		Get
			Return Me._CUENTA
		End Get
		Set
			If (String.Equals(Me._CUENTA, value) = false) Then
				Me.OnCUENTAChanging(value)
				Me.SendPropertyChanging
				Me._CUENTA = value
				Me.SendPropertyChanged("CUENTA")
				Me.OnCUENTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONCEPTO", DbType:="VarChar(150)")>  _
	Public Property CONCEPTO() As String
		Get
			Return Me._CONCEPTO
		End Get
		Set
			If (String.Equals(Me._CONCEPTO, value) = false) Then
				Me.OnCONCEPTOChanging(value)
				Me.SendPropertyChanging
				Me._CONCEPTO = value
				Me.SendPropertyChanged("CONCEPTO")
				Me.OnCONCEPTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHACOBRO", DbType:="DateTime")>  _
	Public Property FECHACOBRO() As System.Nullable(Of Date)
		Get
			Return Me._FECHACOBRO
		End Get
		Set
			If (Me._FECHACOBRO.Equals(value) = false) Then
				Me.OnFECHACOBROChanging(value)
				Me.SendPropertyChanging
				Me._FECHACOBRO = value
				Me.SendPropertyChanged("FECHACOBRO")
				Me.OnFECHACOBROChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_N19", DbType:="VarChar(1)")>  _
	Public Property N19() As String
		Get
			Return Me._N19
		End Get
		Set
			If (String.Equals(Me._N19, value) = false) Then
				Me.OnN19Changing(value)
				Me.SendPropertyChanging
				Me._N19 = value
				Me.SendPropertyChanged("N19")
				Me.OnN19Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFFORMAPAGO", DbType:="VarChar(10)")>  _
	Public Property REFFORMAPAGO() As String
		Get
			Return Me._REFFORMAPAGO
		End Get
		Set
			If (String.Equals(Me._REFFORMAPAGO, value) = false) Then
				If Me._FORMASPAGO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFFORMAPAGOChanging(value)
				Me.SendPropertyChanging
				Me._REFFORMAPAGO = value
				Me.SendPropertyChanged("REFFORMAPAGO")
				Me.OnREFFORMAPAGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TIPO", DbType:="VarChar(1)")>  _
	Public Property TIPO() As String
		Get
			Return Me._TIPO
		End Get
		Set
			If (String.Equals(Me._TIPO, value) = false) Then
				Me.OnTIPOChanging(value)
				Me.SendPropertyChanging
				Me._TIPO = value
				Me.SendPropertyChanged("TIPO")
				Me.OnTIPOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFEMPRESA", DbType:="Int")>  _
	Public Property REFEMPRESA() As System.Nullable(Of Integer)
		Get
			Return Me._REFEMPRESA
		End Get
		Set
			If (Me._REFEMPRESA.Equals(value) = false) Then
				If Me._EMPRESA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFEMPRESAChanging(value)
				Me.SendPropertyChanging
				Me._REFEMPRESA = value
				Me.SendPropertyChanged("REFEMPRESA")
				Me.OnREFEMPRESAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDEntregaCuenta", DbType:="BigInt")>  _
	Public Property IDEntregaCuenta() As System.Nullable(Of Long)
		Get
			Return Me._IDEntregaCuenta
		End Get
		Set
			If (Me._IDEntregaCuenta.Equals(value) = false) Then
				If Me._EntregasCuenta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDEntregaCuentaChanging(value)
				Me.SendPropertyChanging
				Me._IDEntregaCuenta = value
				Me.SendPropertyChanged("IDEntregaCuenta")
				Me.OnIDEntregaCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PagadoConCredito", DbType:="Bit")>  _
	Public Property PagadoConCredito() As System.Nullable(Of Boolean)
		Get
			Return Me._PagadoConCredito
		End Get
		Set
			If (Me._PagadoConCredito.Equals(value) = false) Then
				Me.OnPagadoConCreditoChanging(value)
				Me.SendPropertyChanging
				Me._PagadoConCredito = value
				Me.SendPropertyChanged("PagadoConCredito")
				Me.OnPagadoConCreditoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EntregasCuenta_RECIBO", Storage:="_EntregasCuenta", ThisKey:="IDEntregaCuenta", OtherKey:="IDEntregaCuenta", IsForeignKey:=true)>  _
	Public Property EntregasCuenta() As EntregasCuenta
		Get
			Return Me._EntregasCuenta.Entity
		End Get
		Set
			Dim previousValue As EntregasCuenta = Me._EntregasCuenta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EntregasCuenta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EntregasCuenta.Entity = Nothing
					previousValue.RECIBOs.Remove(Me)
				End If
				Me._EntregasCuenta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RECIBOs.Add(Me)
					Me._IDEntregaCuenta = value.IDEntregaCuenta
				Else
					Me._IDEntregaCuenta = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("EntregasCuenta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_RECIBO", Storage:="_PACIENTE", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.RECIBOs.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RECIBOs.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_RECIBO", Storage:="_FORMASPAGO", ThisKey:="REFFORMAPAGO", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property FORMASPAGO() As FORMASPAGO
		Get
			Return Me._FORMASPAGO.Entity
		End Get
		Set
			Dim previousValue As FORMASPAGO = Me._FORMASPAGO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FORMASPAGO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FORMASPAGO.Entity = Nothing
					previousValue.RECIBOs.Remove(Me)
				End If
				Me._FORMASPAGO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RECIBOs.Add(Me)
					Me._REFFORMAPAGO = value.CODIGO
				Else
					Me._REFFORMAPAGO = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("FORMASPAGO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_RECIBO", Storage:="_EMPRESA", ThisKey:="REFEMPRESA", OtherKey:="CEMPRESA", IsForeignKey:=true)>  _
	Public Property EMPRESA() As EMPRESA
		Get
			Return Me._EMPRESA.Entity
		End Get
		Set
			Dim previousValue As EMPRESA = Me._EMPRESA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EMPRESA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EMPRESA.Entity = Nothing
					previousValue.RECIBOs.Remove(Me)
				End If
				Me._EMPRESA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RECIBOs.Add(Me)
					Me._REFEMPRESA = value.CEMPRESA
				Else
					Me._REFEMPRESA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("EMPRESA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RecetasXML")>  _
Partial Public Class RecetasXML
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idmedico As Integer
	
	Private _nombre As String
	
	Private _apellido1 As String
	
	Private _apellido2 As String
	
	Private _numeroLote As String
	
	Private _idioma As System.Nullable(Of Integer)
	
	Private _documentoIdentificacionTipo As String
	
	Private _documentoIdentificacion As String
	
	Private _numeroColegiado As String
	
	Private _idColegio As System.Nullable(Of Integer)
	
	Private _centroTrabajo As String
	
	Private _cif As String
	
	Private _empleoPrincipal As String
	
	Private _sexo As String
	
	Private _nombreEspecialidad As String
	
	Private _idEspecialidad As System.Nullable(Of Integer)
	
	Private _codigoPostal As String
	
	Private _direccionPostal As String
	
	Private _municipio As String
	
	Private _pais As String
	
	Private _provincia As String
	
	Private _tipoVia As String
	
	Private _numero As String
	
	Private _CVE As String
	
	Private _idReceta As System.Nullable(Of Integer)
	
	Private _MEDICO As EntityRef(Of MEDICO)
	
	Private _RECETA As EntityRef(Of RECETA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidmedicoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidmedicoChanged()
    End Sub
    Partial Private Sub OnnombreChanging(value As String)
    End Sub
    Partial Private Sub OnnombreChanged()
    End Sub
    Partial Private Sub Onapellido1Changing(value As String)
    End Sub
    Partial Private Sub Onapellido1Changed()
    End Sub
    Partial Private Sub Onapellido2Changing(value As String)
    End Sub
    Partial Private Sub Onapellido2Changed()
    End Sub
    Partial Private Sub OnnumeroLoteChanging(value As String)
    End Sub
    Partial Private Sub OnnumeroLoteChanged()
    End Sub
    Partial Private Sub OnidiomaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidiomaChanged()
    End Sub
    Partial Private Sub OndocumentoIdentificacionTipoChanging(value As String)
    End Sub
    Partial Private Sub OndocumentoIdentificacionTipoChanged()
    End Sub
    Partial Private Sub OndocumentoIdentificacionChanging(value As String)
    End Sub
    Partial Private Sub OndocumentoIdentificacionChanged()
    End Sub
    Partial Private Sub OnnumeroColegiadoChanging(value As String)
    End Sub
    Partial Private Sub OnnumeroColegiadoChanged()
    End Sub
    Partial Private Sub OnidColegioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidColegioChanged()
    End Sub
    Partial Private Sub OncentroTrabajoChanging(value As String)
    End Sub
    Partial Private Sub OncentroTrabajoChanged()
    End Sub
    Partial Private Sub OncifChanging(value As String)
    End Sub
    Partial Private Sub OncifChanged()
    End Sub
    Partial Private Sub OnempleoPrincipalChanging(value As String)
    End Sub
    Partial Private Sub OnempleoPrincipalChanged()
    End Sub
    Partial Private Sub OnsexoChanging(value As String)
    End Sub
    Partial Private Sub OnsexoChanged()
    End Sub
    Partial Private Sub OnnombreEspecialidadChanging(value As String)
    End Sub
    Partial Private Sub OnnombreEspecialidadChanged()
    End Sub
    Partial Private Sub OnidEspecialidadChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidEspecialidadChanged()
    End Sub
    Partial Private Sub OncodigoPostalChanging(value As String)
    End Sub
    Partial Private Sub OncodigoPostalChanged()
    End Sub
    Partial Private Sub OndireccionPostalChanging(value As String)
    End Sub
    Partial Private Sub OndireccionPostalChanged()
    End Sub
    Partial Private Sub OnmunicipioChanging(value As String)
    End Sub
    Partial Private Sub OnmunicipioChanged()
    End Sub
    Partial Private Sub OnpaisChanging(value As String)
    End Sub
    Partial Private Sub OnpaisChanged()
    End Sub
    Partial Private Sub OnprovinciaChanging(value As String)
    End Sub
    Partial Private Sub OnprovinciaChanged()
    End Sub
    Partial Private Sub OntipoViaChanging(value As String)
    End Sub
    Partial Private Sub OntipoViaChanged()
    End Sub
    Partial Private Sub OnnumeroChanging(value As String)
    End Sub
    Partial Private Sub OnnumeroChanged()
    End Sub
    Partial Private Sub OnCVEChanging(value As String)
    End Sub
    Partial Private Sub OnCVEChanged()
    End Sub
    Partial Private Sub OnidRecetaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidRecetaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MEDICO = CType(Nothing, EntityRef(Of MEDICO))
		Me._RECETA = CType(Nothing, EntityRef(Of RECETA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idmedico", DbType:="Int NOT NULL")>  _
	Public Property idmedico() As Integer
		Get
			Return Me._idmedico
		End Get
		Set
			If ((Me._idmedico = value)  _
						= false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidmedicoChanging(value)
				Me.SendPropertyChanging
				Me._idmedico = value
				Me.SendPropertyChanged("idmedico")
				Me.OnidmedicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre", DbType:="NChar(100)")>  _
	Public Property nombre() As String
		Get
			Return Me._nombre
		End Get
		Set
			If (String.Equals(Me._nombre, value) = false) Then
				Me.OnnombreChanging(value)
				Me.SendPropertyChanging
				Me._nombre = value
				Me.SendPropertyChanged("nombre")
				Me.OnnombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_apellido1", DbType:="NChar(100)")>  _
	Public Property apellido1() As String
		Get
			Return Me._apellido1
		End Get
		Set
			If (String.Equals(Me._apellido1, value) = false) Then
				Me.Onapellido1Changing(value)
				Me.SendPropertyChanging
				Me._apellido1 = value
				Me.SendPropertyChanged("apellido1")
				Me.Onapellido1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_apellido2", DbType:="NChar(100)")>  _
	Public Property apellido2() As String
		Get
			Return Me._apellido2
		End Get
		Set
			If (String.Equals(Me._apellido2, value) = false) Then
				Me.Onapellido2Changing(value)
				Me.SendPropertyChanging
				Me._apellido2 = value
				Me.SendPropertyChanged("apellido2")
				Me.Onapellido2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numeroLote", DbType:="NChar(50)")>  _
	Public Property numeroLote() As String
		Get
			Return Me._numeroLote
		End Get
		Set
			If (String.Equals(Me._numeroLote, value) = false) Then
				Me.OnnumeroLoteChanging(value)
				Me.SendPropertyChanging
				Me._numeroLote = value
				Me.SendPropertyChanged("numeroLote")
				Me.OnnumeroLoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idioma", DbType:="Int")>  _
	Public Property idioma() As System.Nullable(Of Integer)
		Get
			Return Me._idioma
		End Get
		Set
			If (Me._idioma.Equals(value) = false) Then
				Me.OnidiomaChanging(value)
				Me.SendPropertyChanging
				Me._idioma = value
				Me.SendPropertyChanged("idioma")
				Me.OnidiomaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_documentoIdentificacionTipo", DbType:="NChar(50)")>  _
	Public Property documentoIdentificacionTipo() As String
		Get
			Return Me._documentoIdentificacionTipo
		End Get
		Set
			If (String.Equals(Me._documentoIdentificacionTipo, value) = false) Then
				Me.OndocumentoIdentificacionTipoChanging(value)
				Me.SendPropertyChanging
				Me._documentoIdentificacionTipo = value
				Me.SendPropertyChanged("documentoIdentificacionTipo")
				Me.OndocumentoIdentificacionTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_documentoIdentificacion", DbType:="NChar(100)")>  _
	Public Property documentoIdentificacion() As String
		Get
			Return Me._documentoIdentificacion
		End Get
		Set
			If (String.Equals(Me._documentoIdentificacion, value) = false) Then
				Me.OndocumentoIdentificacionChanging(value)
				Me.SendPropertyChanging
				Me._documentoIdentificacion = value
				Me.SendPropertyChanged("documentoIdentificacion")
				Me.OndocumentoIdentificacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numeroColegiado", DbType:="NChar(50)")>  _
	Public Property numeroColegiado() As String
		Get
			Return Me._numeroColegiado
		End Get
		Set
			If (String.Equals(Me._numeroColegiado, value) = false) Then
				Me.OnnumeroColegiadoChanging(value)
				Me.SendPropertyChanging
				Me._numeroColegiado = value
				Me.SendPropertyChanged("numeroColegiado")
				Me.OnnumeroColegiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idColegio", DbType:="Int")>  _
	Public Property idColegio() As System.Nullable(Of Integer)
		Get
			Return Me._idColegio
		End Get
		Set
			If (Me._idColegio.Equals(value) = false) Then
				Me.OnidColegioChanging(value)
				Me.SendPropertyChanging
				Me._idColegio = value
				Me.SendPropertyChanged("idColegio")
				Me.OnidColegioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_centroTrabajo", DbType:="NChar(200)")>  _
	Public Property centroTrabajo() As String
		Get
			Return Me._centroTrabajo
		End Get
		Set
			If (String.Equals(Me._centroTrabajo, value) = false) Then
				Me.OncentroTrabajoChanging(value)
				Me.SendPropertyChanging
				Me._centroTrabajo = value
				Me.SendPropertyChanged("centroTrabajo")
				Me.OncentroTrabajoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cif", DbType:="NChar(50)")>  _
	Public Property cif() As String
		Get
			Return Me._cif
		End Get
		Set
			If (String.Equals(Me._cif, value) = false) Then
				Me.OncifChanging(value)
				Me.SendPropertyChanging
				Me._cif = value
				Me.SendPropertyChanged("cif")
				Me.OncifChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empleoPrincipal", DbType:="NChar(100)")>  _
	Public Property empleoPrincipal() As String
		Get
			Return Me._empleoPrincipal
		End Get
		Set
			If (String.Equals(Me._empleoPrincipal, value) = false) Then
				Me.OnempleoPrincipalChanging(value)
				Me.SendPropertyChanging
				Me._empleoPrincipal = value
				Me.SendPropertyChanged("empleoPrincipal")
				Me.OnempleoPrincipalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sexo", DbType:="NChar(10)")>  _
	Public Property sexo() As String
		Get
			Return Me._sexo
		End Get
		Set
			If (String.Equals(Me._sexo, value) = false) Then
				Me.OnsexoChanging(value)
				Me.SendPropertyChanging
				Me._sexo = value
				Me.SendPropertyChanged("sexo")
				Me.OnsexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombreEspecialidad", DbType:="NChar(100)")>  _
	Public Property nombreEspecialidad() As String
		Get
			Return Me._nombreEspecialidad
		End Get
		Set
			If (String.Equals(Me._nombreEspecialidad, value) = false) Then
				Me.OnnombreEspecialidadChanging(value)
				Me.SendPropertyChanging
				Me._nombreEspecialidad = value
				Me.SendPropertyChanged("nombreEspecialidad")
				Me.OnnombreEspecialidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEspecialidad", DbType:="Int")>  _
	Public Property idEspecialidad() As System.Nullable(Of Integer)
		Get
			Return Me._idEspecialidad
		End Get
		Set
			If (Me._idEspecialidad.Equals(value) = false) Then
				Me.OnidEspecialidadChanging(value)
				Me.SendPropertyChanging
				Me._idEspecialidad = value
				Me.SendPropertyChanged("idEspecialidad")
				Me.OnidEspecialidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_codigoPostal", DbType:="NChar(10)")>  _
	Public Property codigoPostal() As String
		Get
			Return Me._codigoPostal
		End Get
		Set
			If (String.Equals(Me._codigoPostal, value) = false) Then
				Me.OncodigoPostalChanging(value)
				Me.SendPropertyChanging
				Me._codigoPostal = value
				Me.SendPropertyChanged("codigoPostal")
				Me.OncodigoPostalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_direccionPostal", DbType:="NChar(100)")>  _
	Public Property direccionPostal() As String
		Get
			Return Me._direccionPostal
		End Get
		Set
			If (String.Equals(Me._direccionPostal, value) = false) Then
				Me.OndireccionPostalChanging(value)
				Me.SendPropertyChanging
				Me._direccionPostal = value
				Me.SendPropertyChanged("direccionPostal")
				Me.OndireccionPostalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_municipio", DbType:="NChar(50)")>  _
	Public Property municipio() As String
		Get
			Return Me._municipio
		End Get
		Set
			If (String.Equals(Me._municipio, value) = false) Then
				Me.OnmunicipioChanging(value)
				Me.SendPropertyChanging
				Me._municipio = value
				Me.SendPropertyChanged("municipio")
				Me.OnmunicipioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pais", DbType:="NChar(10)")>  _
	Public Property pais() As String
		Get
			Return Me._pais
		End Get
		Set
			If (String.Equals(Me._pais, value) = false) Then
				Me.OnpaisChanging(value)
				Me.SendPropertyChanging
				Me._pais = value
				Me.SendPropertyChanged("pais")
				Me.OnpaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_provincia", DbType:="NChar(50)")>  _
	Public Property provincia() As String
		Get
			Return Me._provincia
		End Get
		Set
			If (String.Equals(Me._provincia, value) = false) Then
				Me.OnprovinciaChanging(value)
				Me.SendPropertyChanging
				Me._provincia = value
				Me.SendPropertyChanged("provincia")
				Me.OnprovinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipoVia", DbType:="NChar(25)")>  _
	Public Property tipoVia() As String
		Get
			Return Me._tipoVia
		End Get
		Set
			If (String.Equals(Me._tipoVia, value) = false) Then
				Me.OntipoViaChanging(value)
				Me.SendPropertyChanging
				Me._tipoVia = value
				Me.SendPropertyChanged("tipoVia")
				Me.OntipoViaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numero", DbType:="NChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property numero() As String
		Get
			Return Me._numero
		End Get
		Set
			If (String.Equals(Me._numero, value) = false) Then
				Me.OnnumeroChanging(value)
				Me.SendPropertyChanging
				Me._numero = value
				Me.SendPropertyChanged("numero")
				Me.OnnumeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CVE", DbType:="NChar(100) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CVE() As String
		Get
			Return Me._CVE
		End Get
		Set
			If (String.Equals(Me._CVE, value) = false) Then
				Me.OnCVEChanging(value)
				Me.SendPropertyChanging
				Me._CVE = value
				Me.SendPropertyChanged("CVE")
				Me.OnCVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idReceta", DbType:="Int")>  _
	Public Property idReceta() As System.Nullable(Of Integer)
		Get
			Return Me._idReceta
		End Get
		Set
			If (Me._idReceta.Equals(value) = false) Then
				If Me._RECETA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidRecetaChanging(value)
				Me.SendPropertyChanging
				Me._idReceta = value
				Me.SendPropertyChanged("idReceta")
				Me.OnidRecetaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_RecetasXML", Storage:="_MEDICO", ThisKey:="idmedico", OtherKey:="CMEDICO", IsForeignKey:=true)>  _
	Public Property MEDICO() As MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.RecetasXML.Remove(Me)
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RecetasXML.Add(Me)
					Me._idmedico = value.CMEDICO
				Else
					Me._idmedico = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("MEDICO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RECETA_RecetasXML", Storage:="_RECETA", ThisKey:="idReceta", OtherKey:="IDRECETA", IsForeignKey:=true)>  _
	Public Property RECETA() As RECETA
		Get
			Return Me._RECETA.Entity
		End Get
		Set
			Dim previousValue As RECETA = Me._RECETA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RECETA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RECETA.Entity = Nothing
					previousValue.RecetasXML.Remove(Me)
				End If
				Me._RECETA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RecetasXML.Add(Me)
					Me._idReceta = value.IDRECETA
				Else
					Me._idReceta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("RECETA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HORARIOS_MEDICOS")>  _
Partial Public Class HORARIOS_MEDICOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _fecha As Date
	
	Private _hora_ini As Date
	
	Private _hora_fin As Date
	
	Private _medico_id As Integer
	
	Private _MEDICO As EntityRef(Of MEDICO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As Date)
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub Onhora_iniChanging(value As Date)
    End Sub
    Partial Private Sub Onhora_iniChanged()
    End Sub
    Partial Private Sub Onhora_finChanging(value As Date)
    End Sub
    Partial Private Sub Onhora_finChanged()
    End Sub
    Partial Private Sub Onmedico_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onmedico_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MEDICO = CType(Nothing, EntityRef(Of MEDICO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="Date NOT NULL")>  _
	Public Property fecha() As Date
		Get
			Return Me._fecha
		End Get
		Set
			If ((Me._fecha = value)  _
						= false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hora_ini", DbType:="DateTime NOT NULL")>  _
	Public Property hora_ini() As Date
		Get
			Return Me._hora_ini
		End Get
		Set
			If ((Me._hora_ini = value)  _
						= false) Then
				Me.Onhora_iniChanging(value)
				Me.SendPropertyChanging
				Me._hora_ini = value
				Me.SendPropertyChanged("hora_ini")
				Me.Onhora_iniChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hora_fin", DbType:="DateTime NOT NULL")>  _
	Public Property hora_fin() As Date
		Get
			Return Me._hora_fin
		End Get
		Set
			If ((Me._hora_fin = value)  _
						= false) Then
				Me.Onhora_finChanging(value)
				Me.SendPropertyChanging
				Me._hora_fin = value
				Me.SendPropertyChanged("hora_fin")
				Me.Onhora_finChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_medico_id", DbType:="Int NOT NULL")>  _
	Public Property medico_id() As Integer
		Get
			Return Me._medico_id
		End Get
		Set
			If ((Me._medico_id = value)  _
						= false) Then
				Me.Onmedico_idChanging(value)
				Me.SendPropertyChanging
				Me._medico_id = value
				Me.SendPropertyChanged("medico_id")
				Me.Onmedico_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_HORARIOS_MEDICOS", Storage:="_MEDICO", ThisKey:="id", OtherKey:="CMEDICO", IsForeignKey:=true)>  _
	Public Property MEDICO() As MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.HORARIOS_MEDICOS = Nothing
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HORARIOS_MEDICOS = Me
					Me._id = value.CMEDICO
				Else
					Me._id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("MEDICO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Bonos")>  _
Partial Public Class Bonos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _cpaciente As Integer
	
	Private _numsesiones As Integer
	
	Private _idfactura As System.Nullable(Of Integer)
	
	Private _Notas As String
	
	Private _fecha As Date
	
	Private _Sesiones As EntitySet(Of Sesiones)
	
	Private _FACTURA As EntityRef(Of FACTURA)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OncpacienteChanging(value As Integer)
    End Sub
    Partial Private Sub OncpacienteChanged()
    End Sub
    Partial Private Sub OnnumsesionesChanging(value As Integer)
    End Sub
    Partial Private Sub OnnumsesionesChanged()
    End Sub
    Partial Private Sub OnidfacturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidfacturaChanged()
    End Sub
    Partial Private Sub OnNotasChanging(value As String)
    End Sub
    Partial Private Sub OnNotasChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As Date)
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Sesiones = New EntitySet(Of Sesiones)(AddressOf Me.attach_Sesiones, AddressOf Me.detach_Sesiones)
		Me._FACTURA = CType(Nothing, EntityRef(Of FACTURA))
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cpaciente", DbType:="Int NOT NULL")>  _
	Public Property cpaciente() As Integer
		Get
			Return Me._cpaciente
		End Get
		Set
			If ((Me._cpaciente = value)  _
						= false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncpacienteChanging(value)
				Me.SendPropertyChanging
				Me._cpaciente = value
				Me.SendPropertyChanged("cpaciente")
				Me.OncpacienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numsesiones", DbType:="Int NOT NULL")>  _
	Public Property numsesiones() As Integer
		Get
			Return Me._numsesiones
		End Get
		Set
			If ((Me._numsesiones = value)  _
						= false) Then
				Me.OnnumsesionesChanging(value)
				Me.SendPropertyChanging
				Me._numsesiones = value
				Me.SendPropertyChanged("numsesiones")
				Me.OnnumsesionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idfactura", DbType:="Int")>  _
	Public Property idfactura() As System.Nullable(Of Integer)
		Get
			Return Me._idfactura
		End Get
		Set
			If (Me._idfactura.Equals(value) = false) Then
				If Me._FACTURA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidfacturaChanging(value)
				Me.SendPropertyChanging
				Me._idfactura = value
				Me.SendPropertyChanged("idfactura")
				Me.OnidfacturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notas", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Notas() As String
		Get
			Return Me._Notas
		End Get
		Set
			If (String.Equals(Me._Notas, value) = false) Then
				Me.OnNotasChanging(value)
				Me.SendPropertyChanging
				Me._Notas = value
				Me.SendPropertyChanged("Notas")
				Me.OnNotasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="date NOT NULL")>  _
	Public Property fecha() As Date
		Get
			Return Me._fecha
		End Get
		Set
			If ((Me._fecha = value)  _
						= false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bonos_Sesiones", Storage:="_Sesiones", ThisKey:="id", OtherKey:="refbono")>  _
	Public Property Sesiones() As EntitySet(Of Sesiones)
		Get
			Return Me._Sesiones
		End Get
		Set
			Me._Sesiones.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FACTURA_Bonos", Storage:="_FACTURA", ThisKey:="idfactura", OtherKey:="IDFACTURA", IsForeignKey:=true)>  _
	Public Property FACTURA() As FACTURA
		Get
			Return Me._FACTURA.Entity
		End Get
		Set
			Dim previousValue As FACTURA = Me._FACTURA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FACTURA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FACTURA.Entity = Nothing
					previousValue.Bonos.Remove(Me)
				End If
				Me._FACTURA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bonos.Add(Me)
					Me._idfactura = value.IDFACTURA
				Else
					Me._idfactura = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("FACTURA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_Bonos", Storage:="_PACIENTE", ThisKey:="cpaciente", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.Bonos.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bonos.Add(Me)
					Me._cpaciente = value.CPACIENTE
				Else
					Me._cpaciente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Sesiones(ByVal entity As Sesiones)
		Me.SendPropertyChanging
		entity.Bonos = Me
	End Sub
	
	Private Sub detach_Sesiones(ByVal entity As Sesiones)
		Me.SendPropertyChanging
		entity.Bonos = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sesiones")>  _
Partial Public Class Sesiones
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _refbono As Integer
	
	Private _fecha As Date
	
	Private _descripcion As String
	
	Private _refcita As System.Nullable(Of Integer)
	
	Private _Bonos As EntityRef(Of Bonos)
	
	Private _CITA As EntityRef(Of CITA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnrefbonoChanging(value As Integer)
    End Sub
    Partial Private Sub OnrefbonoChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As Date)
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    Partial Private Sub OnrefcitaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrefcitaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bonos = CType(Nothing, EntityRef(Of Bonos))
		Me._CITA = CType(Nothing, EntityRef(Of CITA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_refbono", DbType:="Int NOT NULL")>  _
	Public Property refbono() As Integer
		Get
			Return Me._refbono
		End Get
		Set
			If ((Me._refbono = value)  _
						= false) Then
				If Me._Bonos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnrefbonoChanging(value)
				Me.SendPropertyChanging
				Me._refbono = value
				Me.SendPropertyChanged("refbono")
				Me.OnrefbonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="DateTime NOT NULL")>  _
	Public Property fecha() As Date
		Get
			Return Me._fecha
		End Get
		Set
			If ((Me._fecha = value)  _
						= false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_refcita", DbType:="Int")>  _
	Public Property refcita() As System.Nullable(Of Integer)
		Get
			Return Me._refcita
		End Get
		Set
			If (Me._refcita.Equals(value) = false) Then
				If Me._CITA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnrefcitaChanging(value)
				Me.SendPropertyChanging
				Me._refcita = value
				Me.SendPropertyChanged("refcita")
				Me.OnrefcitaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Bonos_Sesiones", Storage:="_Bonos", ThisKey:="refbono", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Bonos() As Bonos
		Get
			Return Me._Bonos.Entity
		End Get
		Set
			Dim previousValue As Bonos = Me._Bonos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Bonos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Bonos.Entity = Nothing
					previousValue.Sesiones.Remove(Me)
				End If
				Me._Bonos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sesiones.Add(Me)
					Me._refbono = value.id
				Else
					Me._refbono = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Bonos")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CITA_Sesiones", Storage:="_CITA", ThisKey:="refcita", OtherKey:="IDCITA", IsForeignKey:=true)>  _
	Public Property CITA() As CITA
		Get
			Return Me._CITA.Entity
		End Get
		Set
			Dim previousValue As CITA = Me._CITA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CITA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CITA.Entity = Nothing
					previousValue.Sesiones.Remove(Me)
				End If
				Me._CITA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sesiones.Add(Me)
					Me._refcita = value.IDCITA
				Else
					Me._refcita = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CITA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ANALITICAS")>  _
Partial Public Class ANALITICAS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NUMERO As Integer
	
	Private _DESCRIPCION As String
	
	Private _IMPORTE As System.Nullable(Of Single)
	
	Private _REFPACIENTE As System.Nullable(Of Integer)
	
	Private _PACIENTE As String
	
	Private _ESTADO As String
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _NOTAS As String
	
	Private _REFFRA As System.Nullable(Of Integer)
	
	Private _REFCONCEPTO As String
	
	Private _RECIBIDA As Boolean
	
	Private _PACIENTE1 As EntityRef(Of PACIENTE)
	
	Private _CONCEPTOSFRA As EntityRef(Of CONCEPTOSFRA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNUMEROChanging(value As Integer)
    End Sub
    Partial Private Sub OnNUMEROChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnIMPORTEChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OnIMPORTEChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnPACIENTEChanging(value As String)
    End Sub
    Partial Private Sub OnPACIENTEChanged()
    End Sub
    Partial Private Sub OnESTADOChanging(value As String)
    End Sub
    Partial Private Sub OnESTADOChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    Partial Private Sub OnREFFRAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFFRAChanged()
    End Sub
    Partial Private Sub OnREFCONCEPTOChanging(value As String)
    End Sub
    Partial Private Sub OnREFCONCEPTOChanged()
    End Sub
    Partial Private Sub OnRECIBIDAChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRECIBIDAChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PACIENTE1 = CType(Nothing, EntityRef(Of PACIENTE))
		Me._CONCEPTOSFRA = CType(Nothing, EntityRef(Of CONCEPTOSFRA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUMERO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property NUMERO() As Integer
		Get
			Return Me._NUMERO
		End Get
		Set
			If ((Me._NUMERO = value)  _
						= false) Then
				Me.OnNUMEROChanging(value)
				Me.SendPropertyChanging
				Me._NUMERO = value
				Me.SendPropertyChanged("NUMERO")
				Me.OnNUMEROChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(150)")>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMPORTE", DbType:="Real")>  _
	Public Property IMPORTE() As System.Nullable(Of Single)
		Get
			Return Me._IMPORTE
		End Get
		Set
			If (Me._IMPORTE.Equals(value) = false) Then
				Me.OnIMPORTEChanging(value)
				Me.SendPropertyChanging
				Me._IMPORTE = value
				Me.SendPropertyChanged("IMPORTE")
				Me.OnIMPORTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int")>  _
	Public Property REFPACIENTE() As System.Nullable(Of Integer)
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If (Me._REFPACIENTE.Equals(value) = false) Then
				If Me._PACIENTE1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PACIENTE", DbType:="VarChar(150)")>  _
	Public Property PACIENTE() As String
		Get
			Return Me._PACIENTE
		End Get
		Set
			If (String.Equals(Me._PACIENTE, value) = false) Then
				Me.OnPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._PACIENTE = value
				Me.SendPropertyChanged("PACIENTE")
				Me.OnPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ESTADO", DbType:="VarChar(1)")>  _
	Public Property ESTADO() As String
		Get
			Return Me._ESTADO
		End Get
		Set
			If (String.Equals(Me._ESTADO, value) = false) Then
				Me.OnESTADOChanging(value)
				Me.SendPropertyChanging
				Me._ESTADO = value
				Me.SendPropertyChanged("ESTADO")
				Me.OnESTADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime")>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFFRA", DbType:="Int")>  _
	Public Property REFFRA() As System.Nullable(Of Integer)
		Get
			Return Me._REFFRA
		End Get
		Set
			If (Me._REFFRA.Equals(value) = false) Then
				Me.OnREFFRAChanging(value)
				Me.SendPropertyChanging
				Me._REFFRA = value
				Me.SendPropertyChanged("REFFRA")
				Me.OnREFFRAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFCONCEPTO", DbType:="VarChar(10)")>  _
	Public Property REFCONCEPTO() As String
		Get
			Return Me._REFCONCEPTO
		End Get
		Set
			If (String.Equals(Me._REFCONCEPTO, value) = false) Then
				If Me._CONCEPTOSFRA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFCONCEPTOChanging(value)
				Me.SendPropertyChanging
				Me._REFCONCEPTO = value
				Me.SendPropertyChanged("REFCONCEPTO")
				Me.OnREFCONCEPTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RECIBIDA", DbType:="bit")>  _
	Public Property RECIBIDA() As Boolean
		Get
			Return Me._RECIBIDA
		End Get
		Set
			If ((Me._RECIBIDA = value)  _
						= false) Then
				Me.OnRECIBIDAChanging(value)
				Me.SendPropertyChanging
				Me._RECIBIDA = value
				Me.SendPropertyChanged("RECIBIDA")
				Me.OnRECIBIDAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_ANALITICAS", Storage:="_PACIENTE1", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE1() As PACIENTE
		Get
			Return Me._PACIENTE1.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE1.Entity = Nothing
					previousValue.ANALITICAS.Remove(Me)
				End If
				Me._PACIENTE1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ANALITICAS.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_ANALITICAS", Storage:="_CONCEPTOSFRA", ThisKey:="REFCONCEPTO", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property CONCEPTOSFRA() As CONCEPTOSFRA
		Get
			Return Me._CONCEPTOSFRA.Entity
		End Get
		Set
			Dim previousValue As CONCEPTOSFRA = Me._CONCEPTOSFRA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONCEPTOSFRA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONCEPTOSFRA.Entity = Nothing
					previousValue.ANALITICAS.Remove(Me)
				End If
				Me._CONCEPTOSFRA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ANALITICAS.Add(Me)
					Me._REFCONCEPTO = value.CODIGO
				Else
					Me._REFCONCEPTO = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("CONCEPTOSFRA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AUDIOMETRIAS")>  _
Partial Public Class AUDIOMETRIAS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As Integer
	
	Private _REFPACIENTE As Integer
	
	Private _OD250 As Single
	
	Private _OD500 As Single
	
	Private _OD1000 As Single
	
	Private _OD2000 As Single
	
	Private _OD3000 As Single
	
	Private _OD4000 As Single
	
	Private _OD6000 As Single
	
	Private _OD8000 As Single
	
	Private _OI8000 As Single
	
	Private _OI250 As Single
	
	Private _OI500 As Single
	
	Private _OI1000 As Single
	
	Private _OI2000 As Single
	
	Private _OI3000 As Single
	
	Private _OI4000 As Single
	
	Private _OI6000 As Single
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _NOTAS As String
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As Integer)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As Integer)
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnOD250Changing(value As Single)
    End Sub
    Partial Private Sub OnOD250Changed()
    End Sub
    Partial Private Sub OnOD500Changing(value As Single)
    End Sub
    Partial Private Sub OnOD500Changed()
    End Sub
    Partial Private Sub OnOD1000Changing(value As Single)
    End Sub
    Partial Private Sub OnOD1000Changed()
    End Sub
    Partial Private Sub OnOD2000Changing(value As Single)
    End Sub
    Partial Private Sub OnOD2000Changed()
    End Sub
    Partial Private Sub OnOD3000Changing(value As Single)
    End Sub
    Partial Private Sub OnOD3000Changed()
    End Sub
    Partial Private Sub OnOD4000Changing(value As Single)
    End Sub
    Partial Private Sub OnOD4000Changed()
    End Sub
    Partial Private Sub OnOD6000Changing(value As Single)
    End Sub
    Partial Private Sub OnOD6000Changed()
    End Sub
    Partial Private Sub OnOD8000Changing(value As Single)
    End Sub
    Partial Private Sub OnOD8000Changed()
    End Sub
    Partial Private Sub OnOI8000Changing(value As Single)
    End Sub
    Partial Private Sub OnOI8000Changed()
    End Sub
    Partial Private Sub OnOI250Changing(value As Single)
    End Sub
    Partial Private Sub OnOI250Changed()
    End Sub
    Partial Private Sub OnOI500Changing(value As Single)
    End Sub
    Partial Private Sub OnOI500Changed()
    End Sub
    Partial Private Sub OnOI1000Changing(value As Single)
    End Sub
    Partial Private Sub OnOI1000Changed()
    End Sub
    Partial Private Sub OnOI2000Changing(value As Single)
    End Sub
    Partial Private Sub OnOI2000Changed()
    End Sub
    Partial Private Sub OnOI3000Changing(value As Single)
    End Sub
    Partial Private Sub OnOI3000Changed()
    End Sub
    Partial Private Sub OnOI4000Changing(value As Single)
    End Sub
    Partial Private Sub OnOI4000Changed()
    End Sub
    Partial Private Sub OnOI6000Changing(value As Single)
    End Sub
    Partial Private Sub OnOI6000Changed()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CODIGO() As Integer
		Get
			Return Me._CODIGO
		End Get
		Set
			If ((Me._CODIGO = value)  _
						= false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int NOT NULL")>  _
	Public Property REFPACIENTE() As Integer
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If ((Me._REFPACIENTE = value)  _
						= false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OD250", DbType:="Real NOT NULL")>  _
	Public Property OD250() As Single
		Get
			Return Me._OD250
		End Get
		Set
			If ((Me._OD250 = value)  _
						= false) Then
				Me.OnOD250Changing(value)
				Me.SendPropertyChanging
				Me._OD250 = value
				Me.SendPropertyChanged("OD250")
				Me.OnOD250Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OD500", DbType:="Real NOT NULL")>  _
	Public Property OD500() As Single
		Get
			Return Me._OD500
		End Get
		Set
			If ((Me._OD500 = value)  _
						= false) Then
				Me.OnOD500Changing(value)
				Me.SendPropertyChanging
				Me._OD500 = value
				Me.SendPropertyChanged("OD500")
				Me.OnOD500Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OD1000", DbType:="Real NOT NULL")>  _
	Public Property OD1000() As Single
		Get
			Return Me._OD1000
		End Get
		Set
			If ((Me._OD1000 = value)  _
						= false) Then
				Me.OnOD1000Changing(value)
				Me.SendPropertyChanging
				Me._OD1000 = value
				Me.SendPropertyChanged("OD1000")
				Me.OnOD1000Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OD2000", DbType:="Real NOT NULL")>  _
	Public Property OD2000() As Single
		Get
			Return Me._OD2000
		End Get
		Set
			If ((Me._OD2000 = value)  _
						= false) Then
				Me.OnOD2000Changing(value)
				Me.SendPropertyChanging
				Me._OD2000 = value
				Me.SendPropertyChanged("OD2000")
				Me.OnOD2000Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OD3000", DbType:="Real NOT NULL")>  _
	Public Property OD3000() As Single
		Get
			Return Me._OD3000
		End Get
		Set
			If ((Me._OD3000 = value)  _
						= false) Then
				Me.OnOD3000Changing(value)
				Me.SendPropertyChanging
				Me._OD3000 = value
				Me.SendPropertyChanged("OD3000")
				Me.OnOD3000Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OD4000", DbType:="Real NOT NULL")>  _
	Public Property OD4000() As Single
		Get
			Return Me._OD4000
		End Get
		Set
			If ((Me._OD4000 = value)  _
						= false) Then
				Me.OnOD4000Changing(value)
				Me.SendPropertyChanging
				Me._OD4000 = value
				Me.SendPropertyChanged("OD4000")
				Me.OnOD4000Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OD6000", DbType:="Real NOT NULL")>  _
	Public Property OD6000() As Single
		Get
			Return Me._OD6000
		End Get
		Set
			If ((Me._OD6000 = value)  _
						= false) Then
				Me.OnOD6000Changing(value)
				Me.SendPropertyChanging
				Me._OD6000 = value
				Me.SendPropertyChanged("OD6000")
				Me.OnOD6000Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OD8000", DbType:="Real NOT NULL")>  _
	Public Property OD8000() As Single
		Get
			Return Me._OD8000
		End Get
		Set
			If ((Me._OD8000 = value)  _
						= false) Then
				Me.OnOD8000Changing(value)
				Me.SendPropertyChanging
				Me._OD8000 = value
				Me.SendPropertyChanged("OD8000")
				Me.OnOD8000Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OI8000", DbType:="Real NOT NULL")>  _
	Public Property OI8000() As Single
		Get
			Return Me._OI8000
		End Get
		Set
			If ((Me._OI8000 = value)  _
						= false) Then
				Me.OnOI8000Changing(value)
				Me.SendPropertyChanging
				Me._OI8000 = value
				Me.SendPropertyChanged("OI8000")
				Me.OnOI8000Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OI250", DbType:="Real NOT NULL")>  _
	Public Property OI250() As Single
		Get
			Return Me._OI250
		End Get
		Set
			If ((Me._OI250 = value)  _
						= false) Then
				Me.OnOI250Changing(value)
				Me.SendPropertyChanging
				Me._OI250 = value
				Me.SendPropertyChanged("OI250")
				Me.OnOI250Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OI500", DbType:="Real NOT NULL")>  _
	Public Property OI500() As Single
		Get
			Return Me._OI500
		End Get
		Set
			If ((Me._OI500 = value)  _
						= false) Then
				Me.OnOI500Changing(value)
				Me.SendPropertyChanging
				Me._OI500 = value
				Me.SendPropertyChanged("OI500")
				Me.OnOI500Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OI1000", DbType:="Real NOT NULL")>  _
	Public Property OI1000() As Single
		Get
			Return Me._OI1000
		End Get
		Set
			If ((Me._OI1000 = value)  _
						= false) Then
				Me.OnOI1000Changing(value)
				Me.SendPropertyChanging
				Me._OI1000 = value
				Me.SendPropertyChanged("OI1000")
				Me.OnOI1000Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OI2000", DbType:="Real NOT NULL")>  _
	Public Property OI2000() As Single
		Get
			Return Me._OI2000
		End Get
		Set
			If ((Me._OI2000 = value)  _
						= false) Then
				Me.OnOI2000Changing(value)
				Me.SendPropertyChanging
				Me._OI2000 = value
				Me.SendPropertyChanged("OI2000")
				Me.OnOI2000Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OI3000", DbType:="Real NOT NULL")>  _
	Public Property OI3000() As Single
		Get
			Return Me._OI3000
		End Get
		Set
			If ((Me._OI3000 = value)  _
						= false) Then
				Me.OnOI3000Changing(value)
				Me.SendPropertyChanging
				Me._OI3000 = value
				Me.SendPropertyChanged("OI3000")
				Me.OnOI3000Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OI4000", DbType:="Real NOT NULL")>  _
	Public Property OI4000() As Single
		Get
			Return Me._OI4000
		End Get
		Set
			If ((Me._OI4000 = value)  _
						= false) Then
				Me.OnOI4000Changing(value)
				Me.SendPropertyChanging
				Me._OI4000 = value
				Me.SendPropertyChanged("OI4000")
				Me.OnOI4000Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OI6000", DbType:="Real NOT NULL")>  _
	Public Property OI6000() As Single
		Get
			Return Me._OI6000
		End Get
		Set
			If ((Me._OI6000 = value)  _
						= false) Then
				Me.OnOI6000Changing(value)
				Me.SendPropertyChanging
				Me._OI6000 = value
				Me.SendPropertyChanged("OI6000")
				Me.OnOI6000Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime")>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_AUDIOMETRIAS", Storage:="_PACIENTE", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.AUDIOMETRIAS.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AUDIOMETRIAS.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DERIVACIONES")>  _
Partial Public Class DERIVACIONES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As Integer
	
	Private _FECHA As Date
	
	Private _REFDESTINO As String
	
	Private _DESTINO As String
	
	Private _MOTIVO As String
	
	Private _NOTAS As String
	
	Private _REFPACIENTE As Integer
	
	Private _REFMEDICO As System.Nullable(Of Integer)
	
	Private _DERIVACIONES_DESTINO As EntityRef(Of DERIVACIONES_DESTINO)
	
	Private _MEDICO As EntityRef(Of MEDICO)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As Integer)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As Date)
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnREFDESTINOChanging(value As String)
    End Sub
    Partial Private Sub OnREFDESTINOChanged()
    End Sub
    Partial Private Sub OnDESTINOChanging(value As String)
    End Sub
    Partial Private Sub OnDESTINOChanged()
    End Sub
    Partial Private Sub OnMOTIVOChanging(value As String)
    End Sub
    Partial Private Sub OnMOTIVOChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As Integer)
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnREFMEDICOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFMEDICOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DERIVACIONES_DESTINO = CType(Nothing, EntityRef(Of DERIVACIONES_DESTINO))
		Me._MEDICO = CType(Nothing, EntityRef(Of MEDICO))
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CODIGO() As Integer
		Get
			Return Me._CODIGO
		End Get
		Set
			If ((Me._CODIGO = value)  _
						= false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime NOT NULL")>  _
	Public Property FECHA() As Date
		Get
			Return Me._FECHA
		End Get
		Set
			If ((Me._FECHA = value)  _
						= false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFDESTINO", DbType:="VarChar(12)")>  _
	Public Property REFDESTINO() As String
		Get
			Return Me._REFDESTINO
		End Get
		Set
			If (String.Equals(Me._REFDESTINO, value) = false) Then
				If Me._DERIVACIONES_DESTINO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFDESTINOChanging(value)
				Me.SendPropertyChanging
				Me._REFDESTINO = value
				Me.SendPropertyChanged("REFDESTINO")
				Me.OnREFDESTINOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESTINO", DbType:="VarChar(150)")>  _
	Public Property DESTINO() As String
		Get
			Return Me._DESTINO
		End Get
		Set
			If (String.Equals(Me._DESTINO, value) = false) Then
				Me.OnDESTINOChanging(value)
				Me.SendPropertyChanging
				Me._DESTINO = value
				Me.SendPropertyChanged("DESTINO")
				Me.OnDESTINOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOTIVO", DbType:="VarChar(150)")>  _
	Public Property MOTIVO() As String
		Get
			Return Me._MOTIVO
		End Get
		Set
			If (String.Equals(Me._MOTIVO, value) = false) Then
				Me.OnMOTIVOChanging(value)
				Me.SendPropertyChanging
				Me._MOTIVO = value
				Me.SendPropertyChanged("MOTIVO")
				Me.OnMOTIVOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int NOT NULL")>  _
	Public Property REFPACIENTE() As Integer
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If ((Me._REFPACIENTE = value)  _
						= false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMEDICO", DbType:="Int")>  _
	Public Property REFMEDICO() As System.Nullable(Of Integer)
		Get
			Return Me._REFMEDICO
		End Get
		Set
			If (Me._REFMEDICO.Equals(value) = false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMEDICOChanging(value)
				Me.SendPropertyChanging
				Me._REFMEDICO = value
				Me.SendPropertyChanged("REFMEDICO")
				Me.OnREFMEDICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DERIVACIONES_DESTINO_DERIVACIONES", Storage:="_DERIVACIONES_DESTINO", ThisKey:="REFDESTINO", OtherKey:="CODIGO", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property DERIVACIONES_DESTINO() As DERIVACIONES_DESTINO
		Get
			Return Me._DERIVACIONES_DESTINO.Entity
		End Get
		Set
			Dim previousValue As DERIVACIONES_DESTINO = Me._DERIVACIONES_DESTINO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DERIVACIONES_DESTINO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DERIVACIONES_DESTINO.Entity = Nothing
					previousValue.DERIVACIONES.Remove(Me)
				End If
				Me._DERIVACIONES_DESTINO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DERIVACIONES.Add(Me)
					Me._REFDESTINO = value.CODIGO
				Else
					Me._REFDESTINO = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("DERIVACIONES_DESTINO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_DERIVACIONES", Storage:="_MEDICO", ThisKey:="REFMEDICO", OtherKey:="CMEDICO", IsForeignKey:=true)>  _
	Public Property MEDICO() As MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.DERIVACIONES.Remove(Me)
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DERIVACIONES.Add(Me)
					Me._REFMEDICO = value.CMEDICO
				Else
					Me._REFMEDICO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MEDICO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_DERIVACIONES", Storage:="_PACIENTE", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.DERIVACIONES.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DERIVACIONES.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HISTORIALES_REVISIONES")>  _
Partial Public Class HISTORIALES_REVISIONES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Revision As Long
	
	Private _ID_Historial As Integer
	
	Private _REFPACIENTE As System.Nullable(Of Integer)
	
	Private _REFMEDICO As System.Nullable(Of Integer)
	
	Private _MEDICO As String
	
	Private _FECHA As Date
	
	Private _MOTIVO As String
	
	Private _ANTECEDENTES As String
	
	Private _EXPLORACION As String
	
	Private _COMPLEMENTARIAS As String
	
	Private _JUICIO As String
	
	Private _TRATAMIENTO As String
	
	Private _COMENTARIOS As String
	
	Private _OTROS As String
	
	Private _REFDIAGNOSTICO As System.Nullable(Of Integer)
	
	Private _HISTORIALE As EntityRef(Of HISTORIALE)
	
	Private _MEDICO1 As EntityRef(Of MEDICO)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_RevisionChanging(value As Long)
    End Sub
    Partial Private Sub OnID_RevisionChanged()
    End Sub
    Partial Private Sub OnID_HistorialChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_HistorialChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnREFMEDICOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFMEDICOChanged()
    End Sub
    Partial Private Sub OnMEDICOChanging(value As String)
    End Sub
    Partial Private Sub OnMEDICOChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As Date)
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnMOTIVOChanging(value As String)
    End Sub
    Partial Private Sub OnMOTIVOChanged()
    End Sub
    Partial Private Sub OnANTECEDENTESChanging(value As String)
    End Sub
    Partial Private Sub OnANTECEDENTESChanged()
    End Sub
    Partial Private Sub OnEXPLORACIONChanging(value As String)
    End Sub
    Partial Private Sub OnEXPLORACIONChanged()
    End Sub
    Partial Private Sub OnCOMPLEMENTARIASChanging(value As String)
    End Sub
    Partial Private Sub OnCOMPLEMENTARIASChanged()
    End Sub
    Partial Private Sub OnJUICIOChanging(value As String)
    End Sub
    Partial Private Sub OnJUICIOChanged()
    End Sub
    Partial Private Sub OnTRATAMIENTOChanging(value As String)
    End Sub
    Partial Private Sub OnTRATAMIENTOChanged()
    End Sub
    Partial Private Sub OnCOMENTARIOSChanging(value As String)
    End Sub
    Partial Private Sub OnCOMENTARIOSChanged()
    End Sub
    Partial Private Sub OnOTROSChanging(value As String)
    End Sub
    Partial Private Sub OnOTROSChanged()
    End Sub
    Partial Private Sub OnREFDIAGNOSTICOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFDIAGNOSTICOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HISTORIALE = CType(Nothing, EntityRef(Of HISTORIALE))
		Me._MEDICO1 = CType(Nothing, EntityRef(Of MEDICO))
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Revision", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Revision() As Long
		Get
			Return Me._ID_Revision
		End Get
		Set
			If ((Me._ID_Revision = value)  _
						= false) Then
				Me.OnID_RevisionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Revision = value
				Me.SendPropertyChanged("ID_Revision")
				Me.OnID_RevisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Historial", DbType:="Int NOT NULL")>  _
	Public Property ID_Historial() As Integer
		Get
			Return Me._ID_Historial
		End Get
		Set
			If ((Me._ID_Historial = value)  _
						= false) Then
				If Me._HISTORIALE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_HistorialChanging(value)
				Me.SendPropertyChanging
				Me._ID_Historial = value
				Me.SendPropertyChanged("ID_Historial")
				Me.OnID_HistorialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int")>  _
	Public Property REFPACIENTE() As System.Nullable(Of Integer)
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If (Me._REFPACIENTE.Equals(value) = false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMEDICO", DbType:="Int")>  _
	Public Property REFMEDICO() As System.Nullable(Of Integer)
		Get
			Return Me._REFMEDICO
		End Get
		Set
			If (Me._REFMEDICO.Equals(value) = false) Then
				If Me._MEDICO1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMEDICOChanging(value)
				Me.SendPropertyChanging
				Me._REFMEDICO = value
				Me.SendPropertyChanged("REFMEDICO")
				Me.OnREFMEDICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MEDICO", DbType:="NVarChar(50)")>  _
	Public Property MEDICO() As String
		Get
			Return Me._MEDICO
		End Get
		Set
			If (String.Equals(Me._MEDICO, value) = false) Then
				Me.OnMEDICOChanging(value)
				Me.SendPropertyChanging
				Me._MEDICO = value
				Me.SendPropertyChanged("MEDICO")
				Me.OnMEDICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime NOT NULL")>  _
	Public Property FECHA() As Date
		Get
			Return Me._FECHA
		End Get
		Set
			If ((Me._FECHA = value)  _
						= false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOTIVO", DbType:="NVarChar(MAX)")>  _
	Public Property MOTIVO() As String
		Get
			Return Me._MOTIVO
		End Get
		Set
			If (String.Equals(Me._MOTIVO, value) = false) Then
				Me.OnMOTIVOChanging(value)
				Me.SendPropertyChanging
				Me._MOTIVO = value
				Me.SendPropertyChanged("MOTIVO")
				Me.OnMOTIVOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ANTECEDENTES", DbType:="NVarChar(MAX)")>  _
	Public Property ANTECEDENTES() As String
		Get
			Return Me._ANTECEDENTES
		End Get
		Set
			If (String.Equals(Me._ANTECEDENTES, value) = false) Then
				Me.OnANTECEDENTESChanging(value)
				Me.SendPropertyChanging
				Me._ANTECEDENTES = value
				Me.SendPropertyChanged("ANTECEDENTES")
				Me.OnANTECEDENTESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXPLORACION", DbType:="NVarChar(MAX)")>  _
	Public Property EXPLORACION() As String
		Get
			Return Me._EXPLORACION
		End Get
		Set
			If (String.Equals(Me._EXPLORACION, value) = false) Then
				Me.OnEXPLORACIONChanging(value)
				Me.SendPropertyChanging
				Me._EXPLORACION = value
				Me.SendPropertyChanged("EXPLORACION")
				Me.OnEXPLORACIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMPLEMENTARIAS", DbType:="NVarChar(MAX)")>  _
	Public Property COMPLEMENTARIAS() As String
		Get
			Return Me._COMPLEMENTARIAS
		End Get
		Set
			If (String.Equals(Me._COMPLEMENTARIAS, value) = false) Then
				Me.OnCOMPLEMENTARIASChanging(value)
				Me.SendPropertyChanging
				Me._COMPLEMENTARIAS = value
				Me.SendPropertyChanged("COMPLEMENTARIAS")
				Me.OnCOMPLEMENTARIASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JUICIO", DbType:="NVarChar(MAX)")>  _
	Public Property JUICIO() As String
		Get
			Return Me._JUICIO
		End Get
		Set
			If (String.Equals(Me._JUICIO, value) = false) Then
				Me.OnJUICIOChanging(value)
				Me.SendPropertyChanging
				Me._JUICIO = value
				Me.SendPropertyChanged("JUICIO")
				Me.OnJUICIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TRATAMIENTO", DbType:="NVarChar(MAX)")>  _
	Public Property TRATAMIENTO() As String
		Get
			Return Me._TRATAMIENTO
		End Get
		Set
			If (String.Equals(Me._TRATAMIENTO, value) = false) Then
				Me.OnTRATAMIENTOChanging(value)
				Me.SendPropertyChanging
				Me._TRATAMIENTO = value
				Me.SendPropertyChanged("TRATAMIENTO")
				Me.OnTRATAMIENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COMENTARIOS", DbType:="NVarChar(MAX)")>  _
	Public Property COMENTARIOS() As String
		Get
			Return Me._COMENTARIOS
		End Get
		Set
			If (String.Equals(Me._COMENTARIOS, value) = false) Then
				Me.OnCOMENTARIOSChanging(value)
				Me.SendPropertyChanging
				Me._COMENTARIOS = value
				Me.SendPropertyChanged("COMENTARIOS")
				Me.OnCOMENTARIOSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OTROS", DbType:="NVarChar(MAX)")>  _
	Public Property OTROS() As String
		Get
			Return Me._OTROS
		End Get
		Set
			If (String.Equals(Me._OTROS, value) = false) Then
				Me.OnOTROSChanging(value)
				Me.SendPropertyChanging
				Me._OTROS = value
				Me.SendPropertyChanged("OTROS")
				Me.OnOTROSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFDIAGNOSTICO", DbType:="Int")>  _
	Public Property REFDIAGNOSTICO() As System.Nullable(Of Integer)
		Get
			Return Me._REFDIAGNOSTICO
		End Get
		Set
			If (Me._REFDIAGNOSTICO.Equals(value) = false) Then
				Me.OnREFDIAGNOSTICOChanging(value)
				Me.SendPropertyChanging
				Me._REFDIAGNOSTICO = value
				Me.SendPropertyChanged("REFDIAGNOSTICO")
				Me.OnREFDIAGNOSTICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HISTORIALE_HISTORIALES_REVISIONES", Storage:="_HISTORIALE", ThisKey:="ID_Historial", OtherKey:="CHISTORIAL", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property HISTORIALE() As HISTORIALE
		Get
			Return Me._HISTORIALE.Entity
		End Get
		Set
			Dim previousValue As HISTORIALE = Me._HISTORIALE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._HISTORIALE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._HISTORIALE.Entity = Nothing
					previousValue.HISTORIALES_REVISIONES.Remove(Me)
				End If
				Me._HISTORIALE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HISTORIALES_REVISIONES.Add(Me)
					Me._ID_Historial = value.CHISTORIAL
				Else
					Me._ID_Historial = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("HISTORIALE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_HISTORIALES_REVISIONES", Storage:="_MEDICO1", ThisKey:="REFMEDICO", OtherKey:="CMEDICO", IsForeignKey:=true)>  _
	Public Property MEDICO1() As MEDICO
		Get
			Return Me._MEDICO1.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO1.Entity = Nothing
					previousValue.HISTORIALES_REVISIONES.Remove(Me)
				End If
				Me._MEDICO1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HISTORIALES_REVISIONES.Add(Me)
					Me._REFMEDICO = value.CMEDICO
				Else
					Me._REFMEDICO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MEDICO1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_HISTORIALES_REVISIONES", Storage:="_PACIENTE", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.HISTORIALES_REVISIONES.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HISTORIALES_REVISIONES.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IMAGENES")>  _
Partial Public Class IMAGENES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDIMAGEN As Integer
	
	Private _REFPACIENTE As Integer
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _TEXTO As String
	
	Private _IMAGEN As System.Data.Linq.Binary
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDIMAGENChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDIMAGENChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As Integer)
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnTEXTOChanging(value As String)
    End Sub
    Partial Private Sub OnTEXTOChanged()
    End Sub
    Partial Private Sub OnIMAGENChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnIMAGENChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDIMAGEN", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IDIMAGEN() As Integer
		Get
			Return Me._IDIMAGEN
		End Get
		Set
			If ((Me._IDIMAGEN = value)  _
						= false) Then
				Me.OnIDIMAGENChanging(value)
				Me.SendPropertyChanging
				Me._IDIMAGEN = value
				Me.SendPropertyChanged("IDIMAGEN")
				Me.OnIDIMAGENChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int NOT NULL")>  _
	Public Property REFPACIENTE() As Integer
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If ((Me._REFPACIENTE = value)  _
						= false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime")>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEXTO", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TEXTO() As String
		Get
			Return Me._TEXTO
		End Get
		Set
			If (String.Equals(Me._TEXTO, value) = false) Then
				Me.OnTEXTOChanging(value)
				Me.SendPropertyChanging
				Me._TEXTO = value
				Me.SendPropertyChanged("TEXTO")
				Me.OnTEXTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMAGEN", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property IMAGEN() As System.Data.Linq.Binary
		Get
			Return Me._IMAGEN
		End Get
		Set
			If (Object.Equals(Me._IMAGEN, value) = false) Then
				Me.OnIMAGENChanging(value)
				Me.SendPropertyChanging
				Me._IMAGEN = value
				Me.SendPropertyChanged("IMAGEN")
				Me.OnIMAGENChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_IMAGENES", Storage:="_PACIENTE", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.IMAGENES.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IMAGENES.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PRESUPUESTOS")>  _
Partial Public Class PRESUPUESTOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NUMERO As Integer
	
	Private _REFPACIENTE As System.Nullable(Of Integer)
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _REFEMPRESA As System.Nullable(Of Integer)
	
	Private _REFMUTUA As System.Nullable(Of Integer)
	
	Private _FEMISION As System.Nullable(Of Date)
	
	Private _TOTAL As System.Nullable(Of Decimal)
	
	Private _MUTUA As String
	
	Private _DIRECCION As String
	
	Private _LOCALIDAD As String
	
	Private _PROVINCIA As String
	
	Private _CP As String
	
	Private _PACIENTE As String
	
	Private _DNI As String
	
	Private _EMPRESA As String
	
	Private _EMPRESA1 As EntityRef(Of EMPRESA)
	
	Private _MUTUA1 As EntityRef(Of MUTUA)
	
	Private _PACIENTE1 As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNUMEROChanging(value As Integer)
    End Sub
    Partial Private Sub OnNUMEROChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnREFEMPRESAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFEMPRESAChanged()
    End Sub
    Partial Private Sub OnREFMUTUAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFMUTUAChanged()
    End Sub
    Partial Private Sub OnFEMISIONChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFEMISIONChanged()
    End Sub
    Partial Private Sub OnTOTALChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTOTALChanged()
    End Sub
    Partial Private Sub OnMUTUAChanging(value As String)
    End Sub
    Partial Private Sub OnMUTUAChanged()
    End Sub
    Partial Private Sub OnDIRECCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDIRECCIONChanged()
    End Sub
    Partial Private Sub OnLOCALIDADChanging(value As String)
    End Sub
    Partial Private Sub OnLOCALIDADChanged()
    End Sub
    Partial Private Sub OnPROVINCIAChanging(value As String)
    End Sub
    Partial Private Sub OnPROVINCIAChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnPACIENTEChanging(value As String)
    End Sub
    Partial Private Sub OnPACIENTEChanged()
    End Sub
    Partial Private Sub OnDNIChanging(value As String)
    End Sub
    Partial Private Sub OnDNIChanged()
    End Sub
    Partial Private Sub OnEMPRESAChanging(value As String)
    End Sub
    Partial Private Sub OnEMPRESAChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EMPRESA1 = CType(Nothing, EntityRef(Of EMPRESA))
		Me._MUTUA1 = CType(Nothing, EntityRef(Of MUTUA))
		Me._PACIENTE1 = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUMERO", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property NUMERO() As Integer
		Get
			Return Me._NUMERO
		End Get
		Set
			If ((Me._NUMERO = value)  _
						= false) Then
				Me.OnNUMEROChanging(value)
				Me.SendPropertyChanging
				Me._NUMERO = value
				Me.SendPropertyChanged("NUMERO")
				Me.OnNUMEROChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int")>  _
	Public Property REFPACIENTE() As System.Nullable(Of Integer)
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If (Me._REFPACIENTE.Equals(value) = false) Then
				If Me._PACIENTE1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime")>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFEMPRESA", DbType:="Int")>  _
	Public Property REFEMPRESA() As System.Nullable(Of Integer)
		Get
			Return Me._REFEMPRESA
		End Get
		Set
			If (Me._REFEMPRESA.Equals(value) = false) Then
				If Me._EMPRESA1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFEMPRESAChanging(value)
				Me.SendPropertyChanging
				Me._REFEMPRESA = value
				Me.SendPropertyChanged("REFEMPRESA")
				Me.OnREFEMPRESAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMUTUA", DbType:="Int")>  _
	Public Property REFMUTUA() As System.Nullable(Of Integer)
		Get
			Return Me._REFMUTUA
		End Get
		Set
			If (Me._REFMUTUA.Equals(value) = false) Then
				If Me._MUTUA1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMUTUAChanging(value)
				Me.SendPropertyChanging
				Me._REFMUTUA = value
				Me.SendPropertyChanged("REFMUTUA")
				Me.OnREFMUTUAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FEMISION", DbType:="DateTime")>  _
	Public Property FEMISION() As System.Nullable(Of Date)
		Get
			Return Me._FEMISION
		End Get
		Set
			If (Me._FEMISION.Equals(value) = false) Then
				Me.OnFEMISIONChanging(value)
				Me.SendPropertyChanging
				Me._FEMISION = value
				Me.SendPropertyChanged("FEMISION")
				Me.OnFEMISIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TOTAL", DbType:="Decimal(18,2)")>  _
	Public Property TOTAL() As System.Nullable(Of Decimal)
		Get
			Return Me._TOTAL
		End Get
		Set
			If (Me._TOTAL.Equals(value) = false) Then
				Me.OnTOTALChanging(value)
				Me.SendPropertyChanging
				Me._TOTAL = value
				Me.SendPropertyChanged("TOTAL")
				Me.OnTOTALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MUTUA", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property MUTUA() As String
		Get
			Return Me._MUTUA
		End Get
		Set
			If (String.Equals(Me._MUTUA, value) = false) Then
				Me.OnMUTUAChanging(value)
				Me.SendPropertyChanging
				Me._MUTUA = value
				Me.SendPropertyChanged("MUTUA")
				Me.OnMUTUAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIRECCION", DbType:="VarChar(150)")>  _
	Public Property DIRECCION() As String
		Get
			Return Me._DIRECCION
		End Get
		Set
			If (String.Equals(Me._DIRECCION, value) = false) Then
				Me.OnDIRECCIONChanging(value)
				Me.SendPropertyChanging
				Me._DIRECCION = value
				Me.SendPropertyChanged("DIRECCION")
				Me.OnDIRECCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCALIDAD", DbType:="VarChar(35)")>  _
	Public Property LOCALIDAD() As String
		Get
			Return Me._LOCALIDAD
		End Get
		Set
			If (String.Equals(Me._LOCALIDAD, value) = false) Then
				Me.OnLOCALIDADChanging(value)
				Me.SendPropertyChanging
				Me._LOCALIDAD = value
				Me.SendPropertyChanged("LOCALIDAD")
				Me.OnLOCALIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCIA", DbType:="VarChar(35)")>  _
	Public Property PROVINCIA() As String
		Get
			Return Me._PROVINCIA
		End Get
		Set
			If (String.Equals(Me._PROVINCIA, value) = false) Then
				Me.OnPROVINCIAChanging(value)
				Me.SendPropertyChanging
				Me._PROVINCIA = value
				Me.SendPropertyChanged("PROVINCIA")
				Me.OnPROVINCIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="VarChar(6)")>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PACIENTE", DbType:="VarChar(90)")>  _
	Public Property PACIENTE() As String
		Get
			Return Me._PACIENTE
		End Get
		Set
			If (String.Equals(Me._PACIENTE, value) = false) Then
				Me.OnPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._PACIENTE = value
				Me.SendPropertyChanged("PACIENTE")
				Me.OnPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNI", DbType:="VarChar(30)")>  _
	Public Property DNI() As String
		Get
			Return Me._DNI
		End Get
		Set
			If (String.Equals(Me._DNI, value) = false) Then
				Me.OnDNIChanging(value)
				Me.SendPropertyChanging
				Me._DNI = value
				Me.SendPropertyChanged("DNI")
				Me.OnDNIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMPRESA", DbType:="VarChar(1)")>  _
	Public Property EMPRESA() As String
		Get
			Return Me._EMPRESA
		End Get
		Set
			If (String.Equals(Me._EMPRESA, value) = false) Then
				Me.OnEMPRESAChanging(value)
				Me.SendPropertyChanging
				Me._EMPRESA = value
				Me.SendPropertyChanged("EMPRESA")
				Me.OnEMPRESAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EMPRESA_PRESUPUESTOS", Storage:="_EMPRESA1", ThisKey:="REFEMPRESA", OtherKey:="CEMPRESA", IsForeignKey:=true)>  _
	Public Property EMPRESA1() As EMPRESA
		Get
			Return Me._EMPRESA1.Entity
		End Get
		Set
			Dim previousValue As EMPRESA = Me._EMPRESA1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EMPRESA1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EMPRESA1.Entity = Nothing
					previousValue.PRESUPUESTOS.Remove(Me)
				End If
				Me._EMPRESA1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PRESUPUESTOS.Add(Me)
					Me._REFEMPRESA = value.CEMPRESA
				Else
					Me._REFEMPRESA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("EMPRESA1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MUTUA_PRESUPUESTOS", Storage:="_MUTUA1", ThisKey:="REFMUTUA", OtherKey:="CMUTUA", IsForeignKey:=true)>  _
	Public Property MUTUA1() As MUTUA
		Get
			Return Me._MUTUA1.Entity
		End Get
		Set
			Dim previousValue As MUTUA = Me._MUTUA1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MUTUA1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MUTUA1.Entity = Nothing
					previousValue.PRESUPUESTOS.Remove(Me)
				End If
				Me._MUTUA1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PRESUPUESTOS.Add(Me)
					Me._REFMUTUA = value.CMUTUA
				Else
					Me._REFMUTUA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MUTUA1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_PRESUPUESTOS", Storage:="_PACIENTE1", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE1() As PACIENTE
		Get
			Return Me._PACIENTE1.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE1.Entity = Nothing
					previousValue.PRESUPUESTOS.Remove(Me)
				End If
				Me._PACIENTE1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PRESUPUESTOS.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VariablesGlobales")>  _
Partial Public Class VariablesGlobale
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Clave As String
	
	Private _Valor As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnClaveChanging(value As String)
    End Sub
    Partial Private Sub OnClaveChanged()
    End Sub
    Partial Private Sub OnValorChanging(value As String)
    End Sub
    Partial Private Sub OnValorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Clave", DbType:="VarChar(500) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Clave() As String
		Get
			Return Me._Clave
		End Get
		Set
			If (String.Equals(Me._Clave, value) = false) Then
				Me.OnClaveChanging(value)
				Me.SendPropertyChanging
				Me._Clave = value
				Me.SendPropertyChanged("Clave")
				Me.OnClaveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Valor() As String
		Get
			Return Me._Valor
		End Get
		Set
			If (String.Equals(Me._Valor, value) = false) Then
				Me.OnValorChanging(value)
				Me.SendPropertyChanging
				Me._Valor = value
				Me.SendPropertyChanged("Valor")
				Me.OnValorChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LPLANTILLAANALITICAS")>  _
Partial Public Class LPLANTILLAANALITICAS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _REFPLANTILLA As String
	
	Private _REFCONCEPTO As String
	
	Private _PRECIO As Single
	
	Private _PLANTILLAANALITICA As EntityRef(Of PLANTILLAANALITICA)
	
	Private _PLANTILLAANALITICAS As EntityRef(Of PLANTILLAANALITICAS)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnREFPLANTILLAChanging(value As String)
    End Sub
    Partial Private Sub OnREFPLANTILLAChanged()
    End Sub
    Partial Private Sub OnREFCONCEPTOChanging(value As String)
    End Sub
    Partial Private Sub OnREFCONCEPTOChanged()
    End Sub
    Partial Private Sub OnPRECIOChanging(value As Single)
    End Sub
    Partial Private Sub OnPRECIOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PLANTILLAANALITICA = CType(Nothing, EntityRef(Of PLANTILLAANALITICA))
		Me._PLANTILLAANALITICAS = CType(Nothing, EntityRef(Of PLANTILLAANALITICAS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPLANTILLA", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property REFPLANTILLA() As String
		Get
			Return Me._REFPLANTILLA
		End Get
		Set
			If (String.Equals(Me._REFPLANTILLA, value) = false) Then
				If (Me._PLANTILLAANALITICA.HasLoadedOrAssignedValue OrElse Me._PLANTILLAANALITICAS.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPLANTILLAChanging(value)
				Me.SendPropertyChanging
				Me._REFPLANTILLA = value
				Me.SendPropertyChanged("REFPLANTILLA")
				Me.OnREFPLANTILLAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFCONCEPTO", DbType:="VarChar(10)")>  _
	Public Property REFCONCEPTO() As String
		Get
			Return Me._REFCONCEPTO
		End Get
		Set
			If (String.Equals(Me._REFCONCEPTO, value) = false) Then
				Me.OnREFCONCEPTOChanging(value)
				Me.SendPropertyChanging
				Me._REFCONCEPTO = value
				Me.SendPropertyChanged("REFCONCEPTO")
				Me.OnREFCONCEPTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRECIO", DbType:="Real NOT NULL")>  _
	Public Property PRECIO() As Single
		Get
			Return Me._PRECIO
		End Get
		Set
			If ((Me._PRECIO = value)  _
						= false) Then
				Me.OnPRECIOChanging(value)
				Me.SendPropertyChanging
				Me._PRECIO = value
				Me.SendPropertyChanged("PRECIO")
				Me.OnPRECIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PLANTILLAANALITICA_LPLANTILLAANALITICAS", Storage:="_PLANTILLAANALITICA", ThisKey:="REFPLANTILLA", OtherKey:="CODIGO", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property PLANTILLAANALITICA() As PLANTILLAANALITICA
		Get
			Return Me._PLANTILLAANALITICA.Entity
		End Get
		Set
			Dim previousValue As PLANTILLAANALITICA = Me._PLANTILLAANALITICA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PLANTILLAANALITICA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PLANTILLAANALITICA.Entity = Nothing
					previousValue.LPLANTILLAANALITICAS.Remove(Me)
				End If
				Me._PLANTILLAANALITICA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LPLANTILLAANALITICAS.Add(Me)
					Me._REFPLANTILLA = value.CODIGO
				Else
					Me._REFPLANTILLA = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PLANTILLAANALITICA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PLANTILLAANALITICAS_LPLANTILLAANALITICAS", Storage:="_PLANTILLAANALITICAS", ThisKey:="REFPLANTILLA", OtherKey:="CODIGO", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property PLANTILLAANALITICAS() As PLANTILLAANALITICAS
		Get
			Return Me._PLANTILLAANALITICAS.Entity
		End Get
		Set
			Dim previousValue As PLANTILLAANALITICAS = Me._PLANTILLAANALITICAS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PLANTILLAANALITICAS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PLANTILLAANALITICAS.Entity = Nothing
					previousValue.LPLANTILLAANALITICAS.Remove(Me)
				End If
				Me._PLANTILLAANALITICAS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LPLANTILLAANALITICAS.Add(Me)
					Me._REFPLANTILLA = value.CODIGO
				Else
					Me._REFPLANTILLA = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PLANTILLAANALITICAS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PLANTILLAANALITICAS")>  _
Partial Public Class PLANTILLAANALITICAS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As String
	
	Private _DESCRIPCION As String
	
	Private _REFCONCEPTO As String
	
	Private _LPLANTILLAANALITICAS As EntitySet(Of LPLANTILLAANALITICAS)
	
	Private _CONCEPTOSFRA As EntityRef(Of CONCEPTOSFRA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As String)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnREFCONCEPTOChanging(value As String)
    End Sub
    Partial Private Sub OnREFCONCEPTOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LPLANTILLAANALITICAS = New EntitySet(Of LPLANTILLAANALITICAS)(AddressOf Me.attach_LPLANTILLAANALITICAS, AddressOf Me.detach_LPLANTILLAANALITICAS)
		Me._CONCEPTOSFRA = CType(Nothing, EntityRef(Of CONCEPTOSFRA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODIGO() As String
		Get
			Return Me._CODIGO
		End Get
		Set
			If (String.Equals(Me._CODIGO, value) = false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(90) NOT NULL", CanBeNull:=false)>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFCONCEPTO", DbType:="VarChar(10)")>  _
	Public Property REFCONCEPTO() As String
		Get
			Return Me._REFCONCEPTO
		End Get
		Set
			If (String.Equals(Me._REFCONCEPTO, value) = false) Then
				If Me._CONCEPTOSFRA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFCONCEPTOChanging(value)
				Me.SendPropertyChanging
				Me._REFCONCEPTO = value
				Me.SendPropertyChanged("REFCONCEPTO")
				Me.OnREFCONCEPTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PLANTILLAANALITICAS_LPLANTILLAANALITICAS", Storage:="_LPLANTILLAANALITICAS", ThisKey:="CODIGO", OtherKey:="REFPLANTILLA")>  _
	Public Property LPLANTILLAANALITICAS() As EntitySet(Of LPLANTILLAANALITICAS)
		Get
			Return Me._LPLANTILLAANALITICAS
		End Get
		Set
			Me._LPLANTILLAANALITICAS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_PLANTILLAANALITICAS", Storage:="_CONCEPTOSFRA", ThisKey:="REFCONCEPTO", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property CONCEPTOSFRA() As CONCEPTOSFRA
		Get
			Return Me._CONCEPTOSFRA.Entity
		End Get
		Set
			Dim previousValue As CONCEPTOSFRA = Me._CONCEPTOSFRA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONCEPTOSFRA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONCEPTOSFRA.Entity = Nothing
					previousValue.PLANTILLAANALITICAS1.Remove(Me)
				End If
				Me._CONCEPTOSFRA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PLANTILLAANALITICAS1.Add(Me)
					Me._REFCONCEPTO = value.CODIGO
				Else
					Me._REFCONCEPTO = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("CONCEPTOSFRA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LPLANTILLAANALITICAS(ByVal entity As LPLANTILLAANALITICAS)
		Me.SendPropertyChanging
		entity.PLANTILLAANALITICAS = Me
	End Sub
	
	Private Sub detach_LPLANTILLAANALITICAS(ByVal entity As LPLANTILLAANALITICAS)
		Me.SendPropertyChanging
		entity.PLANTILLAANALITICAS = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CONCEPTOSANALITICA")>  _
Partial Public Class CONCEPTOSANALITICA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As Integer
	
	Private _CONCEPTO As String
	
	Private _IMPORTE As Single
	
	Private _NOTAS As String
	
	Private _COLOR As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As Integer)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnCONCEPTOChanging(value As String)
    End Sub
    Partial Private Sub OnCONCEPTOChanged()
    End Sub
    Partial Private Sub OnIMPORTEChanging(value As Single)
    End Sub
    Partial Private Sub OnIMPORTEChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    Partial Private Sub OnCOLORChanging(value As String)
    End Sub
    Partial Private Sub OnCOLORChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CODIGO() As Integer
		Get
			Return Me._CODIGO
		End Get
		Set
			If ((Me._CODIGO = value)  _
						= false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONCEPTO", DbType:="VarChar(90)")>  _
	Public Property CONCEPTO() As String
		Get
			Return Me._CONCEPTO
		End Get
		Set
			If (String.Equals(Me._CONCEPTO, value) = false) Then
				Me.OnCONCEPTOChanging(value)
				Me.SendPropertyChanging
				Me._CONCEPTO = value
				Me.SendPropertyChanged("CONCEPTO")
				Me.OnCONCEPTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMPORTE", DbType:="Real NOT NULL")>  _
	Public Property IMPORTE() As Single
		Get
			Return Me._IMPORTE
		End Get
		Set
			If ((Me._IMPORTE = value)  _
						= false) Then
				Me.OnIMPORTEChanging(value)
				Me.SendPropertyChanging
				Me._IMPORTE = value
				Me.SendPropertyChanged("IMPORTE")
				Me.OnIMPORTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COLOR", DbType:="VarChar(30)")>  _
	Public Property COLOR() As String
		Get
			Return Me._COLOR
		End Get
		Set
			If (String.Equals(Me._COLOR, value) = false) Then
				Me.OnCOLORChanging(value)
				Me.SendPropertyChanging
				Me._COLOR = value
				Me.SendPropertyChanged("COLOR")
				Me.OnCOLORChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CITAS")>  _
Partial Public Class CITA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDCITA As Integer
	
	Private _REFPACIENTE As System.Nullable(Of Integer)
	
	Private _FECHA As System.Nullable(Of Date)
	
	Private _HORA As System.Nullable(Of Date)
	
	Private _CONFIRMADA As String
	
	Private _NOTAS As String
	
	Private _REFMEDICO As System.Nullable(Of Integer)
	
	Private _PACIENTE As String
	
	Private _IMPORTEDR As System.Nullable(Of Decimal)
	
	Private _IMPORTECL As System.Nullable(Of Decimal)
	
	Private _CONTINUA As String
	
	Private _FALTA As String
	
	Private _BANCO As String
	
	Private _PAGADA As String
	
	Private _REFRECIBO As System.Nullable(Of Integer)
	
	Private _ATENDIDO As String
	
	Private _REFFRA As System.Nullable(Of Integer)
	
	Private _REFFORMAPAGO As String
	
	Private _HORAFIN As System.Nullable(Of Date)
	
	Private _FECHACOBRO As System.Nullable(Of Date)
	
	Private _REFPROCEDENCIA As System.Nullable(Of Integer)
	
	Private _ID_Proceso As System.Nullable(Of Long)
	
	Private _EstadoRecurrencia As System.Nullable(Of Integer)
	
	Private _FechaUltimoEstadoRecurrencia As System.Nullable(Of Date)
	
	Private _Descuento As System.Nullable(Of Double)
	
	Private _ID_SALA As System.Nullable(Of Integer)
	
	Private _TOTAL As System.Nullable(Of Decimal)
	
	Private _TipoCita As System.Nullable(Of Integer)
	
	Private _Eliminado As System.Nullable(Of Boolean)
	
	Private _IDEntregaCuenta As System.Nullable(Of Long)
	
	Private _PagadoConCredito As System.Nullable(Of Boolean)
	
	Private _PagadoDesdeFactura As System.Nullable(Of Boolean)
	
	Private _NumeroCita As System.Nullable(Of Byte)
	
	Private _LINEASFACTURAs As EntitySet(Of LINEASFACTURA)
	
	Private _LCOMPARATIVAS_TRATAMIENTOs As EntitySet(Of LCOMPARATIVAS_TRATAMIENTO)
	
	Private _LineasCitas As EntitySet(Of LineasCita)
	
	Private _Sesiones As EntitySet(Of Sesiones)
	
	Private _d_PresupuestoLineas As EntitySet(Of d_PresupuestoLinea)
	
	Private _FORMASPAGO As EntityRef(Of FORMASPAGO)
	
	Private _EntregasCuenta As EntityRef(Of EntregasCuenta)
	
	Private _N_Proceso As EntityRef(Of N_Proceso)
	
	Private _PACIENTE1 As EntityRef(Of PACIENTE)
	
	Private _SALA As EntityRef(Of SALA)
	
	Private _MEDICO As EntityRef(Of MEDICO)
	
	Private _MUTUA As EntityRef(Of MUTUA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDCITAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDCITAChanged()
    End Sub
    Partial Private Sub OnREFPACIENTEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPACIENTEChanged()
    End Sub
    Partial Private Sub OnFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHAChanged()
    End Sub
    Partial Private Sub OnHORAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHORAChanged()
    End Sub
    Partial Private Sub OnCONFIRMADAChanging(value As String)
    End Sub
    Partial Private Sub OnCONFIRMADAChanged()
    End Sub
    Partial Private Sub OnNOTASChanging(value As String)
    End Sub
    Partial Private Sub OnNOTASChanged()
    End Sub
    Partial Private Sub OnREFMEDICOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFMEDICOChanged()
    End Sub
    Partial Private Sub OnPACIENTEChanging(value As String)
    End Sub
    Partial Private Sub OnPACIENTEChanged()
    End Sub
    Partial Private Sub OnIMPORTEDRChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnIMPORTEDRChanged()
    End Sub
    Partial Private Sub OnIMPORTECLChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnIMPORTECLChanged()
    End Sub
    Partial Private Sub OnCONTINUAChanging(value As String)
    End Sub
    Partial Private Sub OnCONTINUAChanged()
    End Sub
    Partial Private Sub OnFALTAChanging(value As String)
    End Sub
    Partial Private Sub OnFALTAChanged()
    End Sub
    Partial Private Sub OnBANCOChanging(value As String)
    End Sub
    Partial Private Sub OnBANCOChanged()
    End Sub
    Partial Private Sub OnPAGADAChanging(value As String)
    End Sub
    Partial Private Sub OnPAGADAChanged()
    End Sub
    Partial Private Sub OnREFRECIBOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFRECIBOChanged()
    End Sub
    Partial Private Sub OnATENDIDOChanging(value As String)
    End Sub
    Partial Private Sub OnATENDIDOChanged()
    End Sub
    Partial Private Sub OnREFFRAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFFRAChanged()
    End Sub
    Partial Private Sub OnREFFORMAPAGOChanging(value As String)
    End Sub
    Partial Private Sub OnREFFORMAPAGOChanged()
    End Sub
    Partial Private Sub OnHORAFINChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHORAFINChanged()
    End Sub
    Partial Private Sub OnFECHACOBROChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHACOBROChanged()
    End Sub
    Partial Private Sub OnREFPROCEDENCIAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFPROCEDENCIAChanged()
    End Sub
    Partial Private Sub OnID_ProcesoChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnID_ProcesoChanged()
    End Sub
    Partial Private Sub OnEstadoRecurrenciaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEstadoRecurrenciaChanged()
    End Sub
    Partial Private Sub OnFechaUltimoEstadoRecurrenciaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaUltimoEstadoRecurrenciaChanged()
    End Sub
    Partial Private Sub OnDescuentoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuentoChanged()
    End Sub
    Partial Private Sub OnID_SALAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_SALAChanged()
    End Sub
    Partial Private Sub OnTOTALChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTOTALChanged()
    End Sub
    Partial Private Sub OnTipoCitaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTipoCitaChanged()
    End Sub
    Partial Private Sub OnEliminadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEliminadoChanged()
    End Sub
    Partial Private Sub OnIDEntregaCuentaChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnIDEntregaCuentaChanged()
    End Sub
    Partial Private Sub OnPagadoConCreditoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPagadoConCreditoChanged()
    End Sub
    Partial Private Sub OnPagadoDesdeFacturaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPagadoDesdeFacturaChanged()
    End Sub
    Partial Private Sub OnNumeroCitaChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnNumeroCitaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LINEASFACTURAs = New EntitySet(Of LINEASFACTURA)(AddressOf Me.attach_LINEASFACTURAs, AddressOf Me.detach_LINEASFACTURAs)
		Me._LCOMPARATIVAS_TRATAMIENTOs = New EntitySet(Of LCOMPARATIVAS_TRATAMIENTO)(AddressOf Me.attach_LCOMPARATIVAS_TRATAMIENTOs, AddressOf Me.detach_LCOMPARATIVAS_TRATAMIENTOs)
		Me._LineasCitas = New EntitySet(Of LineasCita)(AddressOf Me.attach_LineasCitas, AddressOf Me.detach_LineasCitas)
		Me._Sesiones = New EntitySet(Of Sesiones)(AddressOf Me.attach_Sesiones, AddressOf Me.detach_Sesiones)
		Me._d_PresupuestoLineas = New EntitySet(Of d_PresupuestoLinea)(AddressOf Me.attach_d_PresupuestoLineas, AddressOf Me.detach_d_PresupuestoLineas)
		Me._FORMASPAGO = CType(Nothing, EntityRef(Of FORMASPAGO))
		Me._EntregasCuenta = CType(Nothing, EntityRef(Of EntregasCuenta))
		Me._N_Proceso = CType(Nothing, EntityRef(Of N_Proceso))
		Me._PACIENTE1 = CType(Nothing, EntityRef(Of PACIENTE))
		Me._SALA = CType(Nothing, EntityRef(Of SALA))
		Me._MEDICO = CType(Nothing, EntityRef(Of MEDICO))
		Me._MUTUA = CType(Nothing, EntityRef(Of MUTUA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDCITA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDCITA() As Integer
		Get
			Return Me._IDCITA
		End Get
		Set
			If ((Me._IDCITA = value)  _
						= false) Then
				Me.OnIDCITAChanging(value)
				Me.SendPropertyChanging
				Me._IDCITA = value
				Me.SendPropertyChanged("IDCITA")
				Me.OnIDCITAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPACIENTE", DbType:="Int")>  _
	Public Property REFPACIENTE() As System.Nullable(Of Integer)
		Get
			Return Me._REFPACIENTE
		End Get
		Set
			If (Me._REFPACIENTE.Equals(value) = false) Then
				If Me._PACIENTE1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._REFPACIENTE = value
				Me.SendPropertyChanged("REFPACIENTE")
				Me.OnREFPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime")>  _
	Public Property FECHA() As System.Nullable(Of Date)
		Get
			Return Me._FECHA
		End Get
		Set
			If (Me._FECHA.Equals(value) = false) Then
				Me.OnFECHAChanging(value)
				Me.SendPropertyChanging
				Me._FECHA = value
				Me.SendPropertyChanged("FECHA")
				Me.OnFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HORA", DbType:="DateTime")>  _
	Public Property HORA() As System.Nullable(Of Date)
		Get
			Return Me._HORA
		End Get
		Set
			If (Me._HORA.Equals(value) = false) Then
				Me.OnHORAChanging(value)
				Me.SendPropertyChanging
				Me._HORA = value
				Me.SendPropertyChanged("HORA")
				Me.OnHORAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONFIRMADA", DbType:="VarChar(1)")>  _
	Public Property CONFIRMADA() As String
		Get
			Return Me._CONFIRMADA
		End Get
		Set
			If (String.Equals(Me._CONFIRMADA, value) = false) Then
				Me.OnCONFIRMADAChanging(value)
				Me.SendPropertyChanging
				Me._CONFIRMADA = value
				Me.SendPropertyChanged("CONFIRMADA")
				Me.OnCONFIRMADAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOTAS", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property NOTAS() As String
		Get
			Return Me._NOTAS
		End Get
		Set
			If (String.Equals(Me._NOTAS, value) = false) Then
				Me.OnNOTASChanging(value)
				Me.SendPropertyChanging
				Me._NOTAS = value
				Me.SendPropertyChanged("NOTAS")
				Me.OnNOTASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMEDICO", DbType:="Int")>  _
	Public Property REFMEDICO() As System.Nullable(Of Integer)
		Get
			Return Me._REFMEDICO
		End Get
		Set
			If (Me._REFMEDICO.Equals(value) = false) Then
				If Me._MEDICO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFMEDICOChanging(value)
				Me.SendPropertyChanging
				Me._REFMEDICO = value
				Me.SendPropertyChanged("REFMEDICO")
				Me.OnREFMEDICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PACIENTE", DbType:="VarChar(60)")>  _
	Public Property PACIENTE() As String
		Get
			Return Me._PACIENTE
		End Get
		Set
			If (String.Equals(Me._PACIENTE, value) = false) Then
				Me.OnPACIENTEChanging(value)
				Me.SendPropertyChanging
				Me._PACIENTE = value
				Me.SendPropertyChanged("PACIENTE")
				Me.OnPACIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMPORTEDR", DbType:="Decimal(18,2)")>  _
	Public Property IMPORTEDR() As System.Nullable(Of Decimal)
		Get
			Return Me._IMPORTEDR
		End Get
		Set
			If (Me._IMPORTEDR.Equals(value) = false) Then
				Me.OnIMPORTEDRChanging(value)
				Me.SendPropertyChanging
				Me._IMPORTEDR = value
				Me.SendPropertyChanged("IMPORTEDR")
				Me.OnIMPORTEDRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMPORTECL", DbType:="Decimal(18,2)")>  _
	Public Property IMPORTECL() As System.Nullable(Of Decimal)
		Get
			Return Me._IMPORTECL
		End Get
		Set
			If (Me._IMPORTECL.Equals(value) = false) Then
				Me.OnIMPORTECLChanging(value)
				Me.SendPropertyChanging
				Me._IMPORTECL = value
				Me.SendPropertyChanged("IMPORTECL")
				Me.OnIMPORTECLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTINUA", DbType:="VarChar(7)")>  _
	Public Property CONTINUA() As String
		Get
			Return Me._CONTINUA
		End Get
		Set
			If (String.Equals(Me._CONTINUA, value) = false) Then
				Me.OnCONTINUAChanging(value)
				Me.SendPropertyChanging
				Me._CONTINUA = value
				Me.SendPropertyChanged("CONTINUA")
				Me.OnCONTINUAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FALTA", DbType:="VarChar(1)")>  _
	Public Property FALTA() As String
		Get
			Return Me._FALTA
		End Get
		Set
			If (String.Equals(Me._FALTA, value) = false) Then
				Me.OnFALTAChanging(value)
				Me.SendPropertyChanging
				Me._FALTA = value
				Me.SendPropertyChanged("FALTA")
				Me.OnFALTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BANCO", DbType:="VarChar(1)")>  _
	Public Property BANCO() As String
		Get
			Return Me._BANCO
		End Get
		Set
			If (String.Equals(Me._BANCO, value) = false) Then
				Me.OnBANCOChanging(value)
				Me.SendPropertyChanging
				Me._BANCO = value
				Me.SendPropertyChanged("BANCO")
				Me.OnBANCOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PAGADA", DbType:="VarChar(1)")>  _
	Public Property PAGADA() As String
		Get
			Return Me._PAGADA
		End Get
		Set
			If (String.Equals(Me._PAGADA, value) = false) Then
				Me.OnPAGADAChanging(value)
				Me.SendPropertyChanging
				Me._PAGADA = value
				Me.SendPropertyChanged("PAGADA")
				Me.OnPAGADAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFRECIBO", DbType:="Int")>  _
	Public Property REFRECIBO() As System.Nullable(Of Integer)
		Get
			Return Me._REFRECIBO
		End Get
		Set
			If (Me._REFRECIBO.Equals(value) = false) Then
				Me.OnREFRECIBOChanging(value)
				Me.SendPropertyChanging
				Me._REFRECIBO = value
				Me.SendPropertyChanged("REFRECIBO")
				Me.OnREFRECIBOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ATENDIDO", DbType:="VarChar(1)")>  _
	Public Property ATENDIDO() As String
		Get
			Return Me._ATENDIDO
		End Get
		Set
			If (String.Equals(Me._ATENDIDO, value) = false) Then
				Me.OnATENDIDOChanging(value)
				Me.SendPropertyChanging
				Me._ATENDIDO = value
				Me.SendPropertyChanged("ATENDIDO")
				Me.OnATENDIDOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFFRA", DbType:="Int")>  _
	Public Property REFFRA() As System.Nullable(Of Integer)
		Get
			Return Me._REFFRA
		End Get
		Set
			If (Me._REFFRA.Equals(value) = false) Then
				Me.OnREFFRAChanging(value)
				Me.SendPropertyChanging
				Me._REFFRA = value
				Me.SendPropertyChanged("REFFRA")
				Me.OnREFFRAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFFORMAPAGO", DbType:="VarChar(10)")>  _
	Public Property REFFORMAPAGO() As String
		Get
			Return Me._REFFORMAPAGO
		End Get
		Set
			If (String.Equals(Me._REFFORMAPAGO, value) = false) Then
				If Me._FORMASPAGO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFFORMAPAGOChanging(value)
				Me.SendPropertyChanging
				Me._REFFORMAPAGO = value
				Me.SendPropertyChanged("REFFORMAPAGO")
				Me.OnREFFORMAPAGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HORAFIN", DbType:="DateTime")>  _
	Public Property HORAFIN() As System.Nullable(Of Date)
		Get
			Return Me._HORAFIN
		End Get
		Set
			If (Me._HORAFIN.Equals(value) = false) Then
				Me.OnHORAFINChanging(value)
				Me.SendPropertyChanging
				Me._HORAFIN = value
				Me.SendPropertyChanged("HORAFIN")
				Me.OnHORAFINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHACOBRO", DbType:="DateTime")>  _
	Public Property FECHACOBRO() As System.Nullable(Of Date)
		Get
			Return Me._FECHACOBRO
		End Get
		Set
			If (Me._FECHACOBRO.Equals(value) = false) Then
				Me.OnFECHACOBROChanging(value)
				Me.SendPropertyChanging
				Me._FECHACOBRO = value
				Me.SendPropertyChanged("FECHACOBRO")
				Me.OnFECHACOBROChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFPROCEDENCIA", DbType:="Int")>  _
	Public Property REFPROCEDENCIA() As System.Nullable(Of Integer)
		Get
			Return Me._REFPROCEDENCIA
		End Get
		Set
			If (Me._REFPROCEDENCIA.Equals(value) = false) Then
				If Me._MUTUA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFPROCEDENCIAChanging(value)
				Me.SendPropertyChanging
				Me._REFPROCEDENCIA = value
				Me.SendPropertyChanged("REFPROCEDENCIA")
				Me.OnREFPROCEDENCIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proceso", DbType:="BigInt")>  _
	Public Property ID_Proceso() As System.Nullable(Of Long)
		Get
			Return Me._ID_Proceso
		End Get
		Set
			If (Me._ID_Proceso.Equals(value) = false) Then
				If Me._N_Proceso.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProcesoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proceso = value
				Me.SendPropertyChanged("ID_Proceso")
				Me.OnID_ProcesoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstadoRecurrencia", DbType:="Int")>  _
	Public Property EstadoRecurrencia() As System.Nullable(Of Integer)
		Get
			Return Me._EstadoRecurrencia
		End Get
		Set
			If (Me._EstadoRecurrencia.Equals(value) = false) Then
				Me.OnEstadoRecurrenciaChanging(value)
				Me.SendPropertyChanging
				Me._EstadoRecurrencia = value
				Me.SendPropertyChanged("EstadoRecurrencia")
				Me.OnEstadoRecurrenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaUltimoEstadoRecurrencia", DbType:="DateTime")>  _
	Public Property FechaUltimoEstadoRecurrencia() As System.Nullable(Of Date)
		Get
			Return Me._FechaUltimoEstadoRecurrencia
		End Get
		Set
			If (Me._FechaUltimoEstadoRecurrencia.Equals(value) = false) Then
				Me.OnFechaUltimoEstadoRecurrenciaChanging(value)
				Me.SendPropertyChanging
				Me._FechaUltimoEstadoRecurrencia = value
				Me.SendPropertyChanged("FechaUltimoEstadoRecurrencia")
				Me.OnFechaUltimoEstadoRecurrenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento", DbType:="Float")>  _
	Public Property Descuento() As System.Nullable(Of Double)
		Get
			Return Me._Descuento
		End Get
		Set
			If (Me._Descuento.Equals(value) = false) Then
				Me.OnDescuentoChanging(value)
				Me.SendPropertyChanging
				Me._Descuento = value
				Me.SendPropertyChanged("Descuento")
				Me.OnDescuentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_SALA", DbType:="Int")>  _
	Public Property ID_SALA() As System.Nullable(Of Integer)
		Get
			Return Me._ID_SALA
		End Get
		Set
			If (Me._ID_SALA.Equals(value) = false) Then
				If Me._SALA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_SALAChanging(value)
				Me.SendPropertyChanging
				Me._ID_SALA = value
				Me.SendPropertyChanged("ID_SALA")
				Me.OnID_SALAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TOTAL", DbType:="Decimal(18,2)")>  _
	Public Property TOTAL() As System.Nullable(Of Decimal)
		Get
			Return Me._TOTAL
		End Get
		Set
			If (Me._TOTAL.Equals(value) = false) Then
				Me.OnTOTALChanging(value)
				Me.SendPropertyChanging
				Me._TOTAL = value
				Me.SendPropertyChanged("TOTAL")
				Me.OnTOTALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoCita", DbType:="Int")>  _
	Public Property TipoCita() As System.Nullable(Of Integer)
		Get
			Return Me._TipoCita
		End Get
		Set
			If (Me._TipoCita.Equals(value) = false) Then
				Me.OnTipoCitaChanging(value)
				Me.SendPropertyChanging
				Me._TipoCita = value
				Me.SendPropertyChanged("TipoCita")
				Me.OnTipoCitaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Eliminado", DbType:="Bit")>  _
	Public Property Eliminado() As System.Nullable(Of Boolean)
		Get
			Return Me._Eliminado
		End Get
		Set
			If (Me._Eliminado.Equals(value) = false) Then
				Me.OnEliminadoChanging(value)
				Me.SendPropertyChanging
				Me._Eliminado = value
				Me.SendPropertyChanged("Eliminado")
				Me.OnEliminadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDEntregaCuenta", DbType:="BigInt")>  _
	Public Property IDEntregaCuenta() As System.Nullable(Of Long)
		Get
			Return Me._IDEntregaCuenta
		End Get
		Set
			If (Me._IDEntregaCuenta.Equals(value) = false) Then
				If Me._EntregasCuenta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDEntregaCuentaChanging(value)
				Me.SendPropertyChanging
				Me._IDEntregaCuenta = value
				Me.SendPropertyChanged("IDEntregaCuenta")
				Me.OnIDEntregaCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PagadoConCredito", DbType:="Bit")>  _
	Public Property PagadoConCredito() As System.Nullable(Of Boolean)
		Get
			Return Me._PagadoConCredito
		End Get
		Set
			If (Me._PagadoConCredito.Equals(value) = false) Then
				Me.OnPagadoConCreditoChanging(value)
				Me.SendPropertyChanging
				Me._PagadoConCredito = value
				Me.SendPropertyChanged("PagadoConCredito")
				Me.OnPagadoConCreditoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PagadoDesdeFactura", DbType:="Bit")>  _
	Public Property PagadoDesdeFactura() As System.Nullable(Of Boolean)
		Get
			Return Me._PagadoDesdeFactura
		End Get
		Set
			If (Me._PagadoDesdeFactura.Equals(value) = false) Then
				Me.OnPagadoDesdeFacturaChanging(value)
				Me.SendPropertyChanging
				Me._PagadoDesdeFactura = value
				Me.SendPropertyChanged("PagadoDesdeFactura")
				Me.OnPagadoDesdeFacturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeroCita", DbType:="TinyInt")>  _
	Public Property NumeroCita() As System.Nullable(Of Byte)
		Get
			Return Me._NumeroCita
		End Get
		Set
			If (Me._NumeroCita.Equals(value) = false) Then
				Me.OnNumeroCitaChanging(value)
				Me.SendPropertyChanging
				Me._NumeroCita = value
				Me.SendPropertyChanged("NumeroCita")
				Me.OnNumeroCitaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CITA_LINEASFACTURA", Storage:="_LINEASFACTURAs", ThisKey:="IDCITA", OtherKey:="ID_Cita")>  _
	Public Property LINEASFACTURAs() As EntitySet(Of LINEASFACTURA)
		Get
			Return Me._LINEASFACTURAs
		End Get
		Set
			Me._LINEASFACTURAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CITA_LCOMPARATIVAS_TRATAMIENTO", Storage:="_LCOMPARATIVAS_TRATAMIENTOs", ThisKey:="IDCITA", OtherKey:="ID_Cita")>  _
	Public Property LCOMPARATIVAS_TRATAMIENTOs() As EntitySet(Of LCOMPARATIVAS_TRATAMIENTO)
		Get
			Return Me._LCOMPARATIVAS_TRATAMIENTOs
		End Get
		Set
			Me._LCOMPARATIVAS_TRATAMIENTOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CITA_LineasCita", Storage:="_LineasCitas", ThisKey:="IDCITA", OtherKey:="IdCita")>  _
	Public Property LineasCitas() As EntitySet(Of LineasCita)
		Get
			Return Me._LineasCitas
		End Get
		Set
			Me._LineasCitas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CITA_Sesiones", Storage:="_Sesiones", ThisKey:="IDCITA", OtherKey:="refcita")>  _
	Public Property Sesiones() As EntitySet(Of Sesiones)
		Get
			Return Me._Sesiones
		End Get
		Set
			Me._Sesiones.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CITA_d_PresupuestoLinea", Storage:="_d_PresupuestoLineas", ThisKey:="IDCITA", OtherKey:="IDCITA")>  _
	Public Property d_PresupuestoLineas() As EntitySet(Of d_PresupuestoLinea)
		Get
			Return Me._d_PresupuestoLineas
		End Get
		Set
			Me._d_PresupuestoLineas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMASPAGO_CITA", Storage:="_FORMASPAGO", ThisKey:="REFFORMAPAGO", OtherKey:="CODIGO", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property FORMASPAGO() As FORMASPAGO
		Get
			Return Me._FORMASPAGO.Entity
		End Get
		Set
			Dim previousValue As FORMASPAGO = Me._FORMASPAGO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FORMASPAGO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FORMASPAGO.Entity = Nothing
					previousValue.CITAs.Remove(Me)
				End If
				Me._FORMASPAGO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CITAs.Add(Me)
					Me._REFFORMAPAGO = value.CODIGO
				Else
					Me._REFFORMAPAGO = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("FORMASPAGO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EntregasCuenta_CITA", Storage:="_EntregasCuenta", ThisKey:="IDEntregaCuenta", OtherKey:="IDEntregaCuenta", IsForeignKey:=true)>  _
	Public Property EntregasCuenta() As EntregasCuenta
		Get
			Return Me._EntregasCuenta.Entity
		End Get
		Set
			Dim previousValue As EntregasCuenta = Me._EntregasCuenta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EntregasCuenta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EntregasCuenta.Entity = Nothing
					previousValue.CITAs.Remove(Me)
				End If
				Me._EntregasCuenta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CITAs.Add(Me)
					Me._IDEntregaCuenta = value.IDEntregaCuenta
				Else
					Me._IDEntregaCuenta = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("EntregasCuenta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="N_Proceso_CITA", Storage:="_N_Proceso", ThisKey:="ID_Proceso", OtherKey:="ID_Proceso", IsForeignKey:=true, DeleteRule:="SET NULL")>  _
	Public Property N_Proceso() As N_Proceso
		Get
			Return Me._N_Proceso.Entity
		End Get
		Set
			Dim previousValue As N_Proceso = Me._N_Proceso.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._N_Proceso.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._N_Proceso.Entity = Nothing
					previousValue.CITAs.Remove(Me)
				End If
				Me._N_Proceso.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CITAs.Add(Me)
					Me._ID_Proceso = value.ID_Proceso
				Else
					Me._ID_Proceso = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("N_Proceso")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_CITA", Storage:="_PACIENTE1", ThisKey:="REFPACIENTE", OtherKey:="CPACIENTE", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property PACIENTE1() As PACIENTE
		Get
			Return Me._PACIENTE1.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE1.Entity = Nothing
					previousValue.CITAs.Remove(Me)
				End If
				Me._PACIENTE1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CITAs.Add(Me)
					Me._REFPACIENTE = value.CPACIENTE
				Else
					Me._REFPACIENTE = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PACIENTE1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SALA_CITA", Storage:="_SALA", ThisKey:="ID_SALA", OtherKey:="ID_SALA", IsForeignKey:=true, DeleteRule:="SET NULL")>  _
	Public Property SALA() As SALA
		Get
			Return Me._SALA.Entity
		End Get
		Set
			Dim previousValue As SALA = Me._SALA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SALA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SALA.Entity = Nothing
					previousValue.CITAs.Remove(Me)
				End If
				Me._SALA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CITAs.Add(Me)
					Me._ID_SALA = value.ID_SALA
				Else
					Me._ID_SALA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("SALA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MEDICO_CITA", Storage:="_MEDICO", ThisKey:="REFMEDICO", OtherKey:="CMEDICO", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property MEDICO() As MEDICO
		Get
			Return Me._MEDICO.Entity
		End Get
		Set
			Dim previousValue As MEDICO = Me._MEDICO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MEDICO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MEDICO.Entity = Nothing
					previousValue.CITAs.Remove(Me)
				End If
				Me._MEDICO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CITAs.Add(Me)
					Me._REFMEDICO = value.CMEDICO
				Else
					Me._REFMEDICO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MEDICO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MUTUA_CITA", Storage:="_MUTUA", ThisKey:="REFPROCEDENCIA", OtherKey:="CMUTUA", IsForeignKey:=true)>  _
	Public Property MUTUA() As MUTUA
		Get
			Return Me._MUTUA.Entity
		End Get
		Set
			Dim previousValue As MUTUA = Me._MUTUA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MUTUA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MUTUA.Entity = Nothing
					previousValue.CITAs.Remove(Me)
				End If
				Me._MUTUA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CITAs.Add(Me)
					Me._REFPROCEDENCIA = value.CMUTUA
				Else
					Me._REFPROCEDENCIA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MUTUA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LINEASFACTURAs(ByVal entity As LINEASFACTURA)
		Me.SendPropertyChanging
		entity.CITA = Me
	End Sub
	
	Private Sub detach_LINEASFACTURAs(ByVal entity As LINEASFACTURA)
		Me.SendPropertyChanging
		entity.CITA = Nothing
	End Sub
	
	Private Sub attach_LCOMPARATIVAS_TRATAMIENTOs(ByVal entity As LCOMPARATIVAS_TRATAMIENTO)
		Me.SendPropertyChanging
		entity.CITA = Me
	End Sub
	
	Private Sub detach_LCOMPARATIVAS_TRATAMIENTOs(ByVal entity As LCOMPARATIVAS_TRATAMIENTO)
		Me.SendPropertyChanging
		entity.CITA = Nothing
	End Sub
	
	Private Sub attach_LineasCitas(ByVal entity As LineasCita)
		Me.SendPropertyChanging
		entity.CITA = Me
	End Sub
	
	Private Sub detach_LineasCitas(ByVal entity As LineasCita)
		Me.SendPropertyChanging
		entity.CITA = Nothing
	End Sub
	
	Private Sub attach_Sesiones(ByVal entity As Sesiones)
		Me.SendPropertyChanging
		entity.CITA = Me
	End Sub
	
	Private Sub detach_Sesiones(ByVal entity As Sesiones)
		Me.SendPropertyChanging
		entity.CITA = Nothing
	End Sub
	
	Private Sub attach_d_PresupuestoLineas(ByVal entity As d_PresupuestoLinea)
		Me.SendPropertyChanging
		entity.CITA = Me
	End Sub
	
	Private Sub detach_d_PresupuestoLineas(ByVal entity As d_PresupuestoLinea)
		Me.SendPropertyChanging
		entity.CITA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Descartar_Pacientes_Duplicados")>  _
Partial Public Class Descartar_Pacientes_Duplicado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id_Paciente_Origen As Integer
	
	Private _Id_Paciente_Descartado As Integer
	
	Private _Fecha_Descarte As System.Nullable(Of Date)
	
	Private _PACIENTE As EntityRef(Of PACIENTE)
	
	Private _PACIENTE1 As EntityRef(Of PACIENTE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnId_Paciente_OrigenChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_Paciente_OrigenChanged()
    End Sub
    Partial Private Sub OnId_Paciente_DescartadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_Paciente_DescartadoChanged()
    End Sub
    Partial Private Sub OnFecha_DescarteChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFecha_DescarteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PACIENTE = CType(Nothing, EntityRef(Of PACIENTE))
		Me._PACIENTE1 = CType(Nothing, EntityRef(Of PACIENTE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Paciente_Origen", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Id_Paciente_Origen() As Integer
		Get
			Return Me._Id_Paciente_Origen
		End Get
		Set
			If ((Me._Id_Paciente_Origen = value)  _
						= false) Then
				If Me._PACIENTE1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_Paciente_OrigenChanging(value)
				Me.SendPropertyChanging
				Me._Id_Paciente_Origen = value
				Me.SendPropertyChanged("Id_Paciente_Origen")
				Me.OnId_Paciente_OrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Paciente_Descartado", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Id_Paciente_Descartado() As Integer
		Get
			Return Me._Id_Paciente_Descartado
		End Get
		Set
			If ((Me._Id_Paciente_Descartado = value)  _
						= false) Then
				If Me._PACIENTE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_Paciente_DescartadoChanging(value)
				Me.SendPropertyChanging
				Me._Id_Paciente_Descartado = value
				Me.SendPropertyChanged("Id_Paciente_Descartado")
				Me.OnId_Paciente_DescartadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha_Descarte", DbType:="DateTime")>  _
	Public Property Fecha_Descarte() As System.Nullable(Of Date)
		Get
			Return Me._Fecha_Descarte
		End Get
		Set
			If (Me._Fecha_Descarte.Equals(value) = false) Then
				Me.OnFecha_DescarteChanging(value)
				Me.SendPropertyChanging
				Me._Fecha_Descarte = value
				Me.SendPropertyChanged("Fecha_Descarte")
				Me.OnFecha_DescarteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_Descartar_Pacientes_Duplicado", Storage:="_PACIENTE", ThisKey:="Id_Paciente_Descartado", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE() As PACIENTE
		Get
			Return Me._PACIENTE.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE.Entity = Nothing
					previousValue.Descartar_Pacientes_Duplicados.Remove(Me)
				End If
				Me._PACIENTE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Descartar_Pacientes_Duplicados.Add(Me)
					Me._Id_Paciente_Descartado = value.CPACIENTE
				Else
					Me._Id_Paciente_Descartado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PACIENTE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PACIENTE_Descartar_Pacientes_Duplicado1", Storage:="_PACIENTE1", ThisKey:="Id_Paciente_Origen", OtherKey:="CPACIENTE", IsForeignKey:=true)>  _
	Public Property PACIENTE1() As PACIENTE
		Get
			Return Me._PACIENTE1.Entity
		End Get
		Set
			Dim previousValue As PACIENTE = Me._PACIENTE1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PACIENTE1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PACIENTE1.Entity = Nothing
					previousValue.Descartar_Pacientes_Duplicados1.Remove(Me)
				End If
				Me._PACIENTE1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Descartar_Pacientes_Duplicados1.Add(Me)
					Me._Id_Paciente_Origen = value.CPACIENTE
				Else
					Me._Id_Paciente_Origen = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PACIENTE1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Recordatorio")>  _
Partial Public Class Recordatorio
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdRecordatorio As Integer
	
	Private _IdUsuario As Integer
	
	Private _Fecha As Date
	
	Private _Hora As Date
	
	Private _Activo As Boolean
	
	Private _Asunto As String
	
	Private _Anotación As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdRecordatorioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdRecordatorioChanged()
    End Sub
    Partial Private Sub OnIdUsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUsuarioChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnHoraChanging(value As Date)
    End Sub
    Partial Private Sub OnHoraChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnAsuntoChanging(value As String)
    End Sub
    Partial Private Sub OnAsuntoChanged()
    End Sub
    Partial Private Sub OnAnotaciónChanging(value As String)
    End Sub
    Partial Private Sub OnAnotaciónChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdRecordatorio", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdRecordatorio() As Integer
		Get
			Return Me._IdRecordatorio
		End Get
		Set
			If ((Me._IdRecordatorio = value)  _
						= false) Then
				Me.OnIdRecordatorioChanging(value)
				Me.SendPropertyChanging
				Me._IdRecordatorio = value
				Me.SendPropertyChanged("IdRecordatorio")
				Me.OnIdRecordatorioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUsuario", DbType:="Int NOT NULL")>  _
	Public Property IdUsuario() As Integer
		Get
			Return Me._IdUsuario
		End Get
		Set
			If ((Me._IdUsuario = value)  _
						= false) Then
				Me.OnIdUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._IdUsuario = value
				Me.SendPropertyChanged("IdUsuario")
				Me.OnIdUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="Date NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hora", DbType:="DateTime NOT NULL")>  _
	Public Property Hora() As Date
		Get
			Return Me._Hora
		End Get
		Set
			If ((Me._Hora = value)  _
						= false) Then
				Me.OnHoraChanging(value)
				Me.SendPropertyChanging
				Me._Hora = value
				Me.SendPropertyChanged("Hora")
				Me.OnHoraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Asunto", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Asunto() As String
		Get
			Return Me._Asunto
		End Get
		Set
			If (String.Equals(Me._Asunto, value) = false) Then
				Me.OnAsuntoChanging(value)
				Me.SendPropertyChanging
				Me._Asunto = value
				Me.SendPropertyChanged("Asunto")
				Me.OnAsuntoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Anotación", DbType:="NVarChar(500)")>  _
	Public Property Anotación() As String
		Get
			Return Me._Anotación
		End Get
		Set
			If (String.Equals(Me._Anotación, value) = false) Then
				Me.OnAnotaciónChanging(value)
				Me.SendPropertyChanging
				Me._Anotación = value
				Me.SendPropertyChanged("Anotación")
				Me.OnAnotaciónChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.d_PresupuestoLineas")>  _
Partial Public Class d_PresupuestoLinea
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDPresupuestoLinea As Long
	
	Private _IDPresupuesto As Integer
	
	Private _DescripcionGenerada As String
	
	Private _IDTratamiento As String
	
	Private _Cuadrantes As String
	
	Private _PiezasInvolucradas As String
	
	Private _Confirmado As Boolean
	
	Private _Realizado As Boolean
	
	Private _Urgencia As Integer
	
	Private _FechaConfirmado As System.Nullable(Of Date)
	
	Private _FechaRealizado As System.Nullable(Of Date)
	
	Private _Importe As Decimal
	
	Private _IDCITA As System.Nullable(Of Integer)
	
	Private _DescuentoPercent As System.Nullable(Of Double)
	
	Private _IDAccionOrigen As System.Nullable(Of Long)
	
	Private _TipoDenticion As System.Nullable(Of Integer)
	
	Private _LineasCitas As EntitySet(Of LineasCita)
	
	Private _CITA As EntityRef(Of CITA)
	
	Private _CONCEPTOSFRA As EntityRef(Of CONCEPTOSFRA)
	
	Private _d_Accione As EntityRef(Of d_Accione)
	
	Private _d_Presupuesto As EntityRef(Of d_Presupuesto)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDPresupuestoLineaChanging(value As Long)
    End Sub
    Partial Private Sub OnIDPresupuestoLineaChanged()
    End Sub
    Partial Private Sub OnIDPresupuestoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDPresupuestoChanged()
    End Sub
    Partial Private Sub OnDescripcionGeneradaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionGeneradaChanged()
    End Sub
    Partial Private Sub OnIDTratamientoChanging(value As String)
    End Sub
    Partial Private Sub OnIDTratamientoChanged()
    End Sub
    Partial Private Sub OnCuadrantesChanging(value As String)
    End Sub
    Partial Private Sub OnCuadrantesChanged()
    End Sub
    Partial Private Sub OnPiezasInvolucradasChanging(value As String)
    End Sub
    Partial Private Sub OnPiezasInvolucradasChanged()
    End Sub
    Partial Private Sub OnConfirmadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnConfirmadoChanged()
    End Sub
    Partial Private Sub OnRealizadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRealizadoChanged()
    End Sub
    Partial Private Sub OnUrgenciaChanging(value As Integer)
    End Sub
    Partial Private Sub OnUrgenciaChanged()
    End Sub
    Partial Private Sub OnFechaConfirmadoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaConfirmadoChanged()
    End Sub
    Partial Private Sub OnFechaRealizadoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaRealizadoChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As Decimal)
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    Partial Private Sub OnIDCITAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDCITAChanged()
    End Sub
    Partial Private Sub OnDescuentoPercentChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDescuentoPercentChanged()
    End Sub
    Partial Private Sub OnIDAccionOrigenChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnIDAccionOrigenChanged()
    End Sub
    Partial Private Sub OnTipoDenticionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTipoDenticionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LineasCitas = New EntitySet(Of LineasCita)(AddressOf Me.attach_LineasCitas, AddressOf Me.detach_LineasCitas)
		Me._CITA = CType(Nothing, EntityRef(Of CITA))
		Me._CONCEPTOSFRA = CType(Nothing, EntityRef(Of CONCEPTOSFRA))
		Me._d_Accione = CType(Nothing, EntityRef(Of d_Accione))
		Me._d_Presupuesto = CType(Nothing, EntityRef(Of d_Presupuesto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPresupuestoLinea", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDPresupuestoLinea() As Long
		Get
			Return Me._IDPresupuestoLinea
		End Get
		Set
			If ((Me._IDPresupuestoLinea = value)  _
						= false) Then
				Me.OnIDPresupuestoLineaChanging(value)
				Me.SendPropertyChanging
				Me._IDPresupuestoLinea = value
				Me.SendPropertyChanged("IDPresupuestoLinea")
				Me.OnIDPresupuestoLineaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPresupuesto", DbType:="Int NOT NULL")>  _
	Public Property IDPresupuesto() As Integer
		Get
			Return Me._IDPresupuesto
		End Get
		Set
			If ((Me._IDPresupuesto = value)  _
						= false) Then
				If Me._d_Presupuesto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDPresupuestoChanging(value)
				Me.SendPropertyChanging
				Me._IDPresupuesto = value
				Me.SendPropertyChanged("IDPresupuesto")
				Me.OnIDPresupuestoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionGenerada", DbType:="NVarChar(250)")>  _
	Public Property DescripcionGenerada() As String
		Get
			Return Me._DescripcionGenerada
		End Get
		Set
			If (String.Equals(Me._DescripcionGenerada, value) = false) Then
				Me.OnDescripcionGeneradaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionGenerada = value
				Me.SendPropertyChanged("DescripcionGenerada")
				Me.OnDescripcionGeneradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDTratamiento", DbType:="VarChar(10)")>  _
	Public Property IDTratamiento() As String
		Get
			Return Me._IDTratamiento
		End Get
		Set
			If (String.Equals(Me._IDTratamiento, value) = false) Then
				If Me._CONCEPTOSFRA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDTratamientoChanging(value)
				Me.SendPropertyChanging
				Me._IDTratamiento = value
				Me.SendPropertyChanged("IDTratamiento")
				Me.OnIDTratamientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cuadrantes", DbType:="NVarChar(50)")>  _
	Public Property Cuadrantes() As String
		Get
			Return Me._Cuadrantes
		End Get
		Set
			If (String.Equals(Me._Cuadrantes, value) = false) Then
				Me.OnCuadrantesChanging(value)
				Me.SendPropertyChanging
				Me._Cuadrantes = value
				Me.SendPropertyChanged("Cuadrantes")
				Me.OnCuadrantesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PiezasInvolucradas", DbType:="NVarChar(50)")>  _
	Public Property PiezasInvolucradas() As String
		Get
			Return Me._PiezasInvolucradas
		End Get
		Set
			If (String.Equals(Me._PiezasInvolucradas, value) = false) Then
				Me.OnPiezasInvolucradasChanging(value)
				Me.SendPropertyChanging
				Me._PiezasInvolucradas = value
				Me.SendPropertyChanged("PiezasInvolucradas")
				Me.OnPiezasInvolucradasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Confirmado", DbType:="Bit NOT NULL")>  _
	Public Property Confirmado() As Boolean
		Get
			Return Me._Confirmado
		End Get
		Set
			If ((Me._Confirmado = value)  _
						= false) Then
				Me.OnConfirmadoChanging(value)
				Me.SendPropertyChanging
				Me._Confirmado = value
				Me.SendPropertyChanged("Confirmado")
				Me.OnConfirmadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Realizado", DbType:="Bit NOT NULL")>  _
	Public Property Realizado() As Boolean
		Get
			Return Me._Realizado
		End Get
		Set
			If ((Me._Realizado = value)  _
						= false) Then
				Me.OnRealizadoChanging(value)
				Me.SendPropertyChanging
				Me._Realizado = value
				Me.SendPropertyChanged("Realizado")
				Me.OnRealizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Urgencia", DbType:="Int NOT NULL")>  _
	Public Property Urgencia() As Integer
		Get
			Return Me._Urgencia
		End Get
		Set
			If ((Me._Urgencia = value)  _
						= false) Then
				Me.OnUrgenciaChanging(value)
				Me.SendPropertyChanging
				Me._Urgencia = value
				Me.SendPropertyChanged("Urgencia")
				Me.OnUrgenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaConfirmado", DbType:="DateTime")>  _
	Public Property FechaConfirmado() As System.Nullable(Of Date)
		Get
			Return Me._FechaConfirmado
		End Get
		Set
			If (Me._FechaConfirmado.Equals(value) = false) Then
				Me.OnFechaConfirmadoChanging(value)
				Me.SendPropertyChanging
				Me._FechaConfirmado = value
				Me.SendPropertyChanged("FechaConfirmado")
				Me.OnFechaConfirmadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaRealizado", DbType:="DateTime")>  _
	Public Property FechaRealizado() As System.Nullable(Of Date)
		Get
			Return Me._FechaRealizado
		End Get
		Set
			If (Me._FechaRealizado.Equals(value) = false) Then
				Me.OnFechaRealizadoChanging(value)
				Me.SendPropertyChanging
				Me._FechaRealizado = value
				Me.SendPropertyChanged("FechaRealizado")
				Me.OnFechaRealizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Decimal(10,2) NOT NULL")>  _
	Public Property Importe() As Decimal
		Get
			Return Me._Importe
		End Get
		Set
			If ((Me._Importe = value)  _
						= false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDCITA", DbType:="Int")>  _
	Public Property IDCITA() As System.Nullable(Of Integer)
		Get
			Return Me._IDCITA
		End Get
		Set
			If (Me._IDCITA.Equals(value) = false) Then
				If Me._CITA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDCITAChanging(value)
				Me.SendPropertyChanging
				Me._IDCITA = value
				Me.SendPropertyChanged("IDCITA")
				Me.OnIDCITAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescuentoPercent", DbType:="Float")>  _
	Public Property DescuentoPercent() As System.Nullable(Of Double)
		Get
			Return Me._DescuentoPercent
		End Get
		Set
			If (Me._DescuentoPercent.Equals(value) = false) Then
				Me.OnDescuentoPercentChanging(value)
				Me.SendPropertyChanging
				Me._DescuentoPercent = value
				Me.SendPropertyChanged("DescuentoPercent")
				Me.OnDescuentoPercentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDAccionOrigen", DbType:="BigInt")>  _
	Public Property IDAccionOrigen() As System.Nullable(Of Long)
		Get
			Return Me._IDAccionOrigen
		End Get
		Set
			If (Me._IDAccionOrigen.Equals(value) = false) Then
				If Me._d_Accione.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDAccionOrigenChanging(value)
				Me.SendPropertyChanging
				Me._IDAccionOrigen = value
				Me.SendPropertyChanged("IDAccionOrigen")
				Me.OnIDAccionOrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoDenticion", DbType:="Int")>  _
	Public Property TipoDenticion() As System.Nullable(Of Integer)
		Get
			Return Me._TipoDenticion
		End Get
		Set
			If (Me._TipoDenticion.Equals(value) = false) Then
				Me.OnTipoDenticionChanging(value)
				Me.SendPropertyChanging
				Me._TipoDenticion = value
				Me.SendPropertyChanged("TipoDenticion")
				Me.OnTipoDenticionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="d_PresupuestoLinea_LineasCita", Storage:="_LineasCitas", ThisKey:="IDPresupuestoLinea", OtherKey:="RefLineaPresupuestoDental")>  _
	Public Property LineasCitas() As EntitySet(Of LineasCita)
		Get
			Return Me._LineasCitas
		End Get
		Set
			Me._LineasCitas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CITA_d_PresupuestoLinea", Storage:="_CITA", ThisKey:="IDCITA", OtherKey:="IDCITA", IsForeignKey:=true, DeleteRule:="SET NULL")>  _
	Public Property CITA() As CITA
		Get
			Return Me._CITA.Entity
		End Get
		Set
			Dim previousValue As CITA = Me._CITA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CITA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CITA.Entity = Nothing
					previousValue.d_PresupuestoLineas.Remove(Me)
				End If
				Me._CITA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.d_PresupuestoLineas.Add(Me)
					Me._IDCITA = value.IDCITA
				Else
					Me._IDCITA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CITA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CONCEPTOSFRA_d_PresupuestoLinea", Storage:="_CONCEPTOSFRA", ThisKey:="IDTratamiento", OtherKey:="CODIGO", IsForeignKey:=true)>  _
	Public Property CONCEPTOSFRA() As CONCEPTOSFRA
		Get
			Return Me._CONCEPTOSFRA.Entity
		End Get
		Set
			Dim previousValue As CONCEPTOSFRA = Me._CONCEPTOSFRA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CONCEPTOSFRA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CONCEPTOSFRA.Entity = Nothing
					previousValue.d_PresupuestoLineas.Remove(Me)
				End If
				Me._CONCEPTOSFRA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.d_PresupuestoLineas.Add(Me)
					Me._IDTratamiento = value.CODIGO
				Else
					Me._IDTratamiento = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("CONCEPTOSFRA")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="d_Accione_d_PresupuestoLinea", Storage:="_d_Accione", ThisKey:="IDAccionOrigen", OtherKey:="IDAccion", IsForeignKey:=true)>  _
	Public Property d_Accione() As d_Accione
		Get
			Return Me._d_Accione.Entity
		End Get
		Set
			Dim previousValue As d_Accione = Me._d_Accione.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._d_Accione.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._d_Accione.Entity = Nothing
					previousValue.d_PresupuestoLineas.Remove(Me)
				End If
				Me._d_Accione.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.d_PresupuestoLineas.Add(Me)
					Me._IDAccionOrigen = value.IDAccion
				Else
					Me._IDAccionOrigen = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("d_Accione")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="d_Presupuesto_d_PresupuestoLinea", Storage:="_d_Presupuesto", ThisKey:="IDPresupuesto", OtherKey:="IDPresupuesto", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property d_Presupuesto() As d_Presupuesto
		Get
			Return Me._d_Presupuesto.Entity
		End Get
		Set
			Dim previousValue As d_Presupuesto = Me._d_Presupuesto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._d_Presupuesto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._d_Presupuesto.Entity = Nothing
					previousValue.d_PresupuestoLineas.Remove(Me)
				End If
				Me._d_Presupuesto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.d_PresupuestoLineas.Add(Me)
					Me._IDPresupuesto = value.IDPresupuesto
				Else
					Me._IDPresupuesto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("d_Presupuesto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LineasCitas(ByVal entity As LineasCita)
		Me.SendPropertyChanging
		entity.d_PresupuestoLinea = Me
	End Sub
	
	Private Sub detach_LineasCitas(ByVal entity As LineasCita)
		Me.SendPropertyChanging
		entity.d_PresupuestoLinea = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.USUARIOS")>  _
Partial Public Class USUARIO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODIGO As Integer
	
	Private _USUARIO As String
	
	Private _CONTRASENA As String
	
	Private _NIVEL As String
	
	Private _ADMINISTRADOR As String
	
	Private _NOMBRECOMPLETO As String
	
	Private _REFMEDICO As System.Nullable(Of Integer)
	
	Private _FECHACLAVE As Date
	
	Private _CONFIGURACIONXML As System.Xml.Linq.XElement
	
	Private _CERTIFICADOPATH As String
	
	Private _PagosPacientes As EntitySet(Of PagosPaciente)
	
	Private _ROLESUSUARIOs As EntitySet(Of ROLESUSUARIO)
	
	Private _Comunicacions As EntitySet(Of Comunicacion)
	
	Private _CALENDARIO_USUARIOs As EntitySet(Of CALENDARIO_USUARIO)
	
	Private _NOTAs As EntitySet(Of NOTA)
	
	Private _EntregasCuentas As EntitySet(Of EntregasCuenta)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODIGOChanging(value As Integer)
    End Sub
    Partial Private Sub OnCODIGOChanged()
    End Sub
    Partial Private Sub OnUSUARIOChanging(value As String)
    End Sub
    Partial Private Sub OnUSUARIOChanged()
    End Sub
    Partial Private Sub OnCONTRASENAChanging(value As String)
    End Sub
    Partial Private Sub OnCONTRASENAChanged()
    End Sub
    Partial Private Sub OnNIVELChanging(value As String)
    End Sub
    Partial Private Sub OnNIVELChanged()
    End Sub
    Partial Private Sub OnADMINISTRADORChanging(value As String)
    End Sub
    Partial Private Sub OnADMINISTRADORChanged()
    End Sub
    Partial Private Sub OnNOMBRECOMPLETOChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBRECOMPLETOChanged()
    End Sub
    Partial Private Sub OnREFMEDICOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnREFMEDICOChanged()
    End Sub
    Partial Private Sub OnFECHACLAVEChanging(value As Date)
    End Sub
    Partial Private Sub OnFECHACLAVEChanged()
    End Sub
    Partial Private Sub OnCONFIGURACIONXMLChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnCONFIGURACIONXMLChanged()
    End Sub
    Partial Private Sub OnCERTIFICADOPATHChanging(value As String)
    End Sub
    Partial Private Sub OnCERTIFICADOPATHChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PagosPacientes = New EntitySet(Of PagosPaciente)(AddressOf Me.attach_PagosPacientes, AddressOf Me.detach_PagosPacientes)
		Me._ROLESUSUARIOs = New EntitySet(Of ROLESUSUARIO)(AddressOf Me.attach_ROLESUSUARIOs, AddressOf Me.detach_ROLESUSUARIOs)
		Me._Comunicacions = New EntitySet(Of Comunicacion)(AddressOf Me.attach_Comunicacions, AddressOf Me.detach_Comunicacions)
		Me._CALENDARIO_USUARIOs = New EntitySet(Of CALENDARIO_USUARIO)(AddressOf Me.attach_CALENDARIO_USUARIOs, AddressOf Me.detach_CALENDARIO_USUARIOs)
		Me._NOTAs = New EntitySet(Of NOTA)(AddressOf Me.attach_NOTAs, AddressOf Me.detach_NOTAs)
		Me._EntregasCuentas = New EntitySet(Of EntregasCuenta)(AddressOf Me.attach_EntregasCuentas, AddressOf Me.detach_EntregasCuentas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CODIGO() As Integer
		Get
			Return Me._CODIGO
		End Get
		Set
			If ((Me._CODIGO = value)  _
						= false) Then
				Me.OnCODIGOChanging(value)
				Me.SendPropertyChanging
				Me._CODIGO = value
				Me.SendPropertyChanged("CODIGO")
				Me.OnCODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USUARIO", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property USUARIO() As String
		Get
			Return Me._USUARIO
		End Get
		Set
			If (String.Equals(Me._USUARIO, value) = false) Then
				Me.OnUSUARIOChanging(value)
				Me.SendPropertyChanging
				Me._USUARIO = value
				Me.SendPropertyChanged("USUARIO")
				Me.OnUSUARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTRASENA", DbType:="VarChar(15)")>  _
	Public Property CONTRASENA() As String
		Get
			Return Me._CONTRASENA
		End Get
		Set
			If (String.Equals(Me._CONTRASENA, value) = false) Then
				Me.OnCONTRASENAChanging(value)
				Me.SendPropertyChanging
				Me._CONTRASENA = value
				Me.SendPropertyChanged("CONTRASENA")
				Me.OnCONTRASENAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NIVEL", DbType:="VarChar(60) NOT NULL", CanBeNull:=false)>  _
	Public Property NIVEL() As String
		Get
			Return Me._NIVEL
		End Get
		Set
			If (String.Equals(Me._NIVEL, value) = false) Then
				Me.OnNIVELChanging(value)
				Me.SendPropertyChanging
				Me._NIVEL = value
				Me.SendPropertyChanged("NIVEL")
				Me.OnNIVELChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADMINISTRADOR", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property ADMINISTRADOR() As String
		Get
			Return Me._ADMINISTRADOR
		End Get
		Set
			If (String.Equals(Me._ADMINISTRADOR, value) = false) Then
				Me.OnADMINISTRADORChanging(value)
				Me.SendPropertyChanging
				Me._ADMINISTRADOR = value
				Me.SendPropertyChanged("ADMINISTRADOR")
				Me.OnADMINISTRADORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRECOMPLETO", DbType:="VarChar(90)")>  _
	Public Property NOMBRECOMPLETO() As String
		Get
			Return Me._NOMBRECOMPLETO
		End Get
		Set
			If (String.Equals(Me._NOMBRECOMPLETO, value) = false) Then
				Me.OnNOMBRECOMPLETOChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRECOMPLETO = value
				Me.SendPropertyChanged("NOMBRECOMPLETO")
				Me.OnNOMBRECOMPLETOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFMEDICO", DbType:="Int")>  _
	Public Property REFMEDICO() As System.Nullable(Of Integer)
		Get
			Return Me._REFMEDICO
		End Get
		Set
			If (Me._REFMEDICO.Equals(value) = false) Then
				Me.OnREFMEDICOChanging(value)
				Me.SendPropertyChanging
				Me._REFMEDICO = value
				Me.SendPropertyChanged("REFMEDICO")
				Me.OnREFMEDICOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHACLAVE", DbType:="DateTime NOT NULL")>  _
	Public Property FECHACLAVE() As Date
		Get
			Return Me._FECHACLAVE
		End Get
		Set
			If ((Me._FECHACLAVE = value)  _
						= false) Then
				Me.OnFECHACLAVEChanging(value)
				Me.SendPropertyChanging
				Me._FECHACLAVE = value
				Me.SendPropertyChanged("FECHACLAVE")
				Me.OnFECHACLAVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONFIGURACIONXML", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CONFIGURACIONXML() As System.Xml.Linq.XElement
		Get
			Return Me._CONFIGURACIONXML
		End Get
		Set
			If (Object.Equals(Me._CONFIGURACIONXML, value) = false) Then
				Me.OnCONFIGURACIONXMLChanging(value)
				Me.SendPropertyChanging
				Me._CONFIGURACIONXML = value
				Me.SendPropertyChanged("CONFIGURACIONXML")
				Me.OnCONFIGURACIONXMLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CERTIFICADOPATH", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CERTIFICADOPATH() As String
		Get
			Return Me._CERTIFICADOPATH
		End Get
		Set
			If (String.Equals(Me._CERTIFICADOPATH, value) = false) Then
				Me.OnCERTIFICADOPATHChanging(value)
				Me.SendPropertyChanging
				Me._CERTIFICADOPATH = value
				Me.SendPropertyChanged("CERTIFICADOPATH")
				Me.OnCERTIFICADOPATHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIO_PagosPaciente", Storage:="_PagosPacientes", ThisKey:="CODIGO", OtherKey:="IDUsuario")>  _
	Public Property PagosPacientes() As EntitySet(Of PagosPaciente)
		Get
			Return Me._PagosPacientes
		End Get
		Set
			Me._PagosPacientes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIO_ROLESUSUARIO", Storage:="_ROLESUSUARIOs", ThisKey:="CODIGO", OtherKey:="ID_USUARIO")>  _
	Public Property ROLESUSUARIOs() As EntitySet(Of ROLESUSUARIO)
		Get
			Return Me._ROLESUSUARIOs
		End Get
		Set
			Me._ROLESUSUARIOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIO_Comunicacion", Storage:="_Comunicacions", ThisKey:="CODIGO", OtherKey:="ID_UsuarioEmisor")>  _
	Public Property Comunicacions() As EntitySet(Of Comunicacion)
		Get
			Return Me._Comunicacions
		End Get
		Set
			Me._Comunicacions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIO_CALENDARIO_USUARIO", Storage:="_CALENDARIO_USUARIOs", ThisKey:="CODIGO", OtherKey:="ID_Usuario")>  _
	Public Property CALENDARIO_USUARIOs() As EntitySet(Of CALENDARIO_USUARIO)
		Get
			Return Me._CALENDARIO_USUARIOs
		End Get
		Set
			Me._CALENDARIO_USUARIOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIO_NOTA", Storage:="_NOTAs", ThisKey:="CODIGO", OtherKey:="ID_Usuario")>  _
	Public Property NOTAs() As EntitySet(Of NOTA)
		Get
			Return Me._NOTAs
		End Get
		Set
			Me._NOTAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIO_EntregasCuenta", Storage:="_EntregasCuentas", ThisKey:="CODIGO", OtherKey:="IDUsuarioEfectua")>  _
	Public Property EntregasCuentas() As EntitySet(Of EntregasCuenta)
		Get
			Return Me._EntregasCuentas
		End Get
		Set
			Me._EntregasCuentas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PagosPacientes(ByVal entity As PagosPaciente)
		Me.SendPropertyChanging
		entity.USUARIO = Me
	End Sub
	
	Private Sub detach_PagosPacientes(ByVal entity As PagosPaciente)
		Me.SendPropertyChanging
		entity.USUARIO = Nothing
	End Sub
	
	Private Sub attach_ROLESUSUARIOs(ByVal entity As ROLESUSUARIO)
		Me.SendPropertyChanging
		entity.USUARIO = Me
	End Sub
	
	Private Sub detach_ROLESUSUARIOs(ByVal entity As ROLESUSUARIO)
		Me.SendPropertyChanging
		entity.USUARIO = Nothing
	End Sub
	
	Private Sub attach_Comunicacions(ByVal entity As Comunicacion)
		Me.SendPropertyChanging
		entity.USUARIO = Me
	End Sub
	
	Private Sub detach_Comunicacions(ByVal entity As Comunicacion)
		Me.SendPropertyChanging
		entity.USUARIO = Nothing
	End Sub
	
	Private Sub attach_CALENDARIO_USUARIOs(ByVal entity As CALENDARIO_USUARIO)
		Me.SendPropertyChanging
		entity.USUARIO = Me
	End Sub
	
	Private Sub detach_CALENDARIO_USUARIOs(ByVal entity As CALENDARIO_USUARIO)
		Me.SendPropertyChanging
		entity.USUARIO = Nothing
	End Sub
	
	Private Sub attach_NOTAs(ByVal entity As NOTA)
		Me.SendPropertyChanging
		entity.USUARIO = Me
	End Sub
	
	Private Sub detach_NOTAs(ByVal entity As NOTA)
		Me.SendPropertyChanging
		entity.USUARIO = Nothing
	End Sub
	
	Private Sub attach_EntregasCuentas(ByVal entity As EntregasCuenta)
		Me.SendPropertyChanging
		entity.USUARIO = Me
	End Sub
	
	Private Sub detach_EntregasCuentas(ByVal entity As EntregasCuenta)
		Me.SendPropertyChanging
		entity.USUARIO = Nothing
	End Sub
End Class
